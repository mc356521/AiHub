<<<<<<< HEAD
2025-06-17 11:01:26.103 [main] INFO  com.example.aihub.AiHubApplication - Starting AiHubApplication using Java 21.0.7 with PID 20444 (D:\Code\trxy\Learning_2025\AiHub\target\classes started by ikun in D:\Code\trxy\Learning_2025\AiHub)
2025-06-17 11:01:26.112 [main] DEBUG com.example.aihub.AiHubApplication - Running with Spring Boot v3.3.6, Spring v6.1.15
2025-06-17 11:01:26.113 [main] INFO  com.example.aihub.AiHubApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-17 11:01:27.327 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-17 11:01:27.330 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-17 11:01:27.383 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 28 ms. Found 0 Redis repository interfaces.
2025-06-17 11:01:28.296 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 11:01:28.313 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 11:01:28.315 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 11:01:28.316 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.33]
2025-06-17 11:01:28.430 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 11:01:28.430 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2244 ms
2025-06-17 11:01:29.038 [main] DEBUG com.example.aihub.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-17 11:01:29.102 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-06-17 11:01:30.696 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 11:01:30.717 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 11:01:30.727 [main] INFO  com.example.aihub.AiHubApplication - Started AiHubApplication in 5.642 seconds (process running for 6.824)
2025-06-17 18:31:20.965 [main] INFO  com.example.aihub.AiHubApplication - Starting AiHubApplication using Java 21.0.7 with PID 29796 (D:\Code\trxy\Learning_2025\AiHub\target\classes started by ikun in D:\Code\trxy\Learning_2025\AiHub)
2025-06-17 18:31:21.090 [main] DEBUG com.example.aihub.AiHubApplication - Running with Spring Boot v3.3.6, Spring v6.1.15
2025-06-17 18:31:21.091 [main] INFO  com.example.aihub.AiHubApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-17 18:31:22.821 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-17 18:31:22.826 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-17 18:31:22.881 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 28 ms. Found 0 Redis repository interfaces.
2025-06-17 18:31:23.929 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 18:31:23.952 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 18:31:23.955 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 18:31:23.956 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.33]
2025-06-17 18:31:24.082 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 18:31:24.083 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2903 ms
2025-06-17 18:31:25.069 [main] DEBUG com.example.aihub.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-17 18:31:25.148 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-06-17 18:31:27.187 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 18:31:27.203 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-06-17 18:31:27.229 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-17 18:31:27.258 [main] ERROR o.s.b.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2025-06-17 18:32:01.933 [main] INFO  com.example.aihub.AiHubApplication - Starting AiHubApplication using Java 21.0.7 with PID 31532 (D:\Code\trxy\Learning_2025\AiHub\target\classes started by ikun in D:\Code\trxy\Learning_2025\AiHub)
2025-06-17 18:32:01.935 [main] DEBUG com.example.aihub.AiHubApplication - Running with Spring Boot v3.3.6, Spring v6.1.15
2025-06-17 18:32:01.936 [main] INFO  com.example.aihub.AiHubApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-17 18:32:03.196 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-17 18:32:03.199 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-17 18:32:03.252 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 28 ms. Found 0 Redis repository interfaces.
2025-06-17 18:32:04.180 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 18:32:04.197 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 18:32:04.200 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 18:32:04.200 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.33]
2025-06-17 18:32:04.321 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 18:32:04.321 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2308 ms
2025-06-17 18:32:05.005 [main] DEBUG com.example.aihub.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-17 18:32:05.080 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-06-17 18:32:06.892 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 18:32:06.917 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 18:32:06.928 [main] INFO  com.example.aihub.AiHubApplication - Started AiHubApplication in 5.826 seconds (process running for 7.012)
2025-06-17 18:32:15.348 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 18:32:15.349 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 18:32:15.352 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-17 18:32:17.764 [http-nio-8080-exec-9] INFO  org.springdoc.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 764 ms
2025-06-17 18:33:39.148 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.AuthController - 新用户尝试注册: ikun
2025-06-17 18:33:39.264 [http-nio-8080-exec-4] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 18:33:41.132 [http-nio-8080-exec-4] ERROR com.example.aihub.controller.AuthController - 用户注册失败: ikun
org.mybatis.spring.MyBatisSystemException: null
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:97)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy88.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:160)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:87)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:152)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
	at jdk.proxy2/jdk.proxy2.$Proxy89.selectCount(Unknown Source)
	at com.baomidou.mybatisplus.extension.conditions.query.ChainQuery.lambda$count$31c95e6c$1(ChainQuery.java:78)
	at com.baomidou.mybatisplus.extension.conditions.ChainWrapper.execute(ChainWrapper.java:63)
	at com.baomidou.mybatisplus.extension.conditions.query.ChainQuery.count(ChainQuery.java:78)
	at com.example.aihub.service.impl.UsersServiceImpl.register(UsersServiceImpl.java:36)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:716)
	at com.example.aihub.service.impl.UsersServiceImpl$$SpringCGLIB$$0.register(<generated>)
	at com.example.aihub.controller.AuthController.register(AuthController.java:70)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
=======
2025-06-17 00:06:07.489 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-17 00:06:07.607 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-17 00:06:16.491 [main] INFO  com.example.aihub.AiHubApplication - Starting AiHubApplication using Java 17.0.12 with PID 30868 (D:\JAVA\AIHub\target\classes started by ZhuanZ（无密码） in D:\JAVA\AIHub)
2025-06-17 00:06:16.493 [main] DEBUG com.example.aihub.AiHubApplication - Running with Spring Boot v3.3.6, Spring v6.1.15
2025-06-17 00:06:16.494 [main] INFO  com.example.aihub.AiHubApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-17 00:06:18.007 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-17 00:06:18.012 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-17 00:06:18.079 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 34 ms. Found 0 Redis repository interfaces.
2025-06-17 00:06:19.031 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 00:06:19.050 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 00:06:19.054 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 00:06:19.055 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.33]
2025-06-17 00:06:19.159 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 00:06:19.160 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2596 ms
2025-06-17 00:06:20.485 [main] DEBUG com.example.aihub.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-17 00:06:20.553 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-06-17 00:06:22.184 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 00:06:22.205 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 00:06:22.216 [main] INFO  com.example.aihub.AiHubApplication - Started AiHubApplication in 6.586 seconds (process running for 7.522)
2025-06-17 00:06:25.059 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 00:06:25.060 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 00:06:25.062 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-17 00:06:44.926 [http-nio-8080-exec-4] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 00:06:45.389 [http-nio-8080-exec-4] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2a8181b5
2025-06-17 00:06:45.391 [http-nio-8080-exec-4] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 00:06:45.400 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:06:45.439 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:06:45.482 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:06:45.521 [http-nio-8080-exec-4] ERROR com.example.aihub.controller.BaseController - 捕获到全局异常
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource login.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:586)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.aihub.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:59)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-17 00:10:32.193 [http-nio-8080-exec-4] INFO  org.springdoc.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 488 ms
2025-06-17 00:10:40.400 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: testuser
2025-06-17 00:10:40.559 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:10:40.561 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:10:40.565 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:10:40.728 [http-nio-8080-exec-7] WARN  com.example.aihub.controller.AuthController - 用户登录失败，用户名或密码错误: testuser
2025-06-17 00:15:41.880 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: mc356521
2025-06-17 00:15:41.885 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:15:41.886 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: mc356521(String)
2025-06-17 00:15:41.891 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:15:42.102 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.AuthController - 用户登录成功: mc356521
2025-06-17 00:15:48.573 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:15:48.574 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: mc356521(String)
2025-06-17 00:15:48.576 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:15:48.583 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: mc356521
2025-06-17 00:15:48.584 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:15:48.585 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: mc356521(String)
2025-06-17 00:15:48.587 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:15:48.720 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.AuthController - 用户登录成功: mc356521
2025-06-17 00:16:54.329 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:16:54.330 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: mc356521(String)
2025-06-17 00:16:54.333 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:16:54.340 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: mc356521
2025-06-17 00:16:54.342 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:16:54.343 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: mc356521(String)
2025-06-17 00:16:54.345 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:16:54.518 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.AuthController - 用户登录成功: mc356521
2025-06-17 00:17:04.754 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:17:04.756 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: mc356521(String)
2025-06-17 00:17:04.760 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:17:04.765 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: mc356521
2025-06-17 00:17:04.768 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:17:04.769 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: mc356521(String)
2025-06-17 00:17:04.772 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:17:04.907 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.AuthController - 用户登录成功: mc356521
2025-06-17 00:17:06.550 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:17:06.552 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: mc356521(String)
2025-06-17 00:17:06.554 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:17:06.613 [http-nio-8080-exec-9] ERROR com.example.aihub.controller.BaseController - 捕获到全局异常
org.springframework.security.authorization.AuthorizationDeniedException: Access Denied
	at org.springframework.security.authorization.method.ThrowingMethodAuthorizationDeniedHandler.handleDeniedInvocation(ThrowingMethodAuthorizationDeniedHandler.java:38)
	at org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.handleDeniedInvocation(PreAuthorizeAuthorizationManager.java:92)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.handle(AuthorizationManagerBeforeMethodInterceptor.java:288)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:261)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:197)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.example.aihub.controller.CoursesController$$SpringCGLIB$$0.getMyCourses(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
>>>>>>> ac6524341ebe8b9521f469469792290f7f36037d
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
<<<<<<< HEAD
=======
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.aihub.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:59)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-17 00:18:10.305 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:18:10.305 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: mc356521(String)
2025-06-17 00:18:10.308 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:18:10.316 [http-nio-8080-exec-10] ERROR com.example.aihub.controller.BaseController - 捕获到全局异常
org.springframework.security.authorization.AuthorizationDeniedException: Access Denied
	at org.springframework.security.authorization.method.ThrowingMethodAuthorizationDeniedHandler.handleDeniedInvocation(ThrowingMethodAuthorizationDeniedHandler.java:38)
	at org.springframework.security.authorization.method.PreAuthorizeAuthorizationManager.handleDeniedInvocation(PreAuthorizeAuthorizationManager.java:92)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.handle(AuthorizationManagerBeforeMethodInterceptor.java:288)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:261)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:197)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.example.aihub.controller.CoursesController$$SpringCGLIB$$0.getMyCourses(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.aihub.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:59)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-17 00:18:31.605 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: teacher1
2025-06-17 00:18:31.607 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:18:31.609 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: teacher1(String)
2025-06-17 00:18:31.612 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 0
2025-06-17 00:18:31.733 [http-nio-8080-exec-1] WARN  com.example.aihub.controller.AuthController - 用户登录失败，用户名或密码错误: teacher1
2025-06-17 00:18:36.104 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: teacher
2025-06-17 00:18:36.106 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:18:36.107 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: teacher(String)
2025-06-17 00:18:36.108 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 0
2025-06-17 00:18:36.231 [http-nio-8080-exec-2] WARN  com.example.aihub.controller.AuthController - 用户登录失败，用户名或密码错误: teacher
2025-06-17 00:18:44.778 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: testuser
2025-06-17 00:18:44.781 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:18:44.782 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:18:44.783 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:18:44.884 [http-nio-8080-exec-3] WARN  com.example.aihub.controller.AuthController - 用户登录失败，用户名或密码错误: testuser
2025-06-17 00:18:49.567 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: testuser
2025-06-17 00:18:49.570 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:18:49.570 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:18:49.576 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:18:49.687 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.AuthController - 用户登录成功: testuser
2025-06-17 00:18:51.637 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:18:51.638 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:18:51.641 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:18:51.646 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 00:18:51.650 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:18:51.651 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:18:51.653 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:18:51.660 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 00:18:51.662 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 00:18:51.675 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 00:18:51.675 [http-nio-8080-exec-5] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 00:22:08.239 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:22:08.242 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:22:08.252 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:22:08.265 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 00:22:08.268 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:22:08.268 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:22:08.273 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:22:08.275 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 00:22:08.277 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 00:22:08.283 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 00:22:08.283 [http-nio-8080-exec-6] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 00:23:18.359 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:23:18.360 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:23:18.363 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:23:18.374 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 00:23:18.376 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:23:18.376 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:23:18.379 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:23:18.382 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 00:23:18.382 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 00:23:18.386 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 00:23:18.387 [http-nio-8080-exec-7] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 00:24:31.994 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:24:31.996 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:24:31.998 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:24:32.002 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 00:24:32.005 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:24:32.006 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:24:32.009 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:24:32.010 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 00:24:32.011 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 00:24:32.013 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 00:24:32.014 [http-nio-8080-exec-8] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 00:27:02.963 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:27:02.965 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:27:02.968 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:27:02.973 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 00:27:02.974 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:27:02.974 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:27:02.977 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:27:02.979 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 00:27:02.981 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 00:27:02.983 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 00:27:02.983 [http-nio-8080-exec-9] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 00:32:02.749 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-17 00:32:02.784 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-17 00:32:07.887 [main] INFO  com.example.aihub.AiHubApplication - Starting AiHubApplication using Java 17.0.12 with PID 20020 (D:\JAVA\AIHub\target\classes started by ZhuanZ（无密码） in D:\JAVA\AIHub)
2025-06-17 00:32:07.889 [main] DEBUG com.example.aihub.AiHubApplication - Running with Spring Boot v3.3.6, Spring v6.1.15
2025-06-17 00:32:07.890 [main] INFO  com.example.aihub.AiHubApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-17 00:32:08.966 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-17 00:32:08.969 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-17 00:32:09.010 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 0 Redis repository interfaces.
2025-06-17 00:32:09.890 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 00:32:09.905 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 00:32:09.907 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 00:32:09.908 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.33]
2025-06-17 00:32:10.002 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 00:32:10.003 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2050 ms
2025-06-17 00:32:10.902 [main] DEBUG com.example.aihub.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-17 00:32:10.959 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-06-17 00:32:12.345 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 00:32:12.368 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 00:32:12.382 [main] INFO  com.example.aihub.AiHubApplication - Started AiHubApplication in 5.292 seconds (process running for 6.428)
2025-06-17 00:32:32.044 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 00:32:32.045 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 00:32:32.047 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-17 00:32:32.289 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: testuser
2025-06-17 00:32:32.699 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 00:32:33.495 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6345cd38
2025-06-17 00:32:33.497 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 00:32:33.505 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:32:33.530 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:32:33.595 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:32:33.810 [http-nio-8080-exec-1] WARN  com.example.aihub.controller.AuthController - 用户登录失败，用户名或密码错误: testuser
2025-06-17 00:34:11.185 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-17 00:34:11.194 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-17 00:34:19.950 [main] INFO  com.example.aihub.AiHubApplication - Starting AiHubApplication using Java 17.0.12 with PID 38172 (D:\JAVA\AIHub\target\classes started by ZhuanZ（无密码） in D:\JAVA\AIHub)
2025-06-17 00:34:19.953 [main] DEBUG com.example.aihub.AiHubApplication - Running with Spring Boot v3.3.6, Spring v6.1.15
2025-06-17 00:34:19.954 [main] INFO  com.example.aihub.AiHubApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-17 00:34:21.310 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-17 00:34:21.313 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-17 00:34:21.361 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2025-06-17 00:34:22.430 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 00:34:22.466 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 00:34:22.470 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 00:34:22.471 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.33]
2025-06-17 00:34:22.617 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 00:34:22.619 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2573 ms
2025-06-17 00:34:23.547 [main] DEBUG com.example.aihub.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-17 00:34:23.609 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-06-17 00:34:24.897 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 00:34:24.920 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 00:34:24.934 [main] INFO  com.example.aihub.AiHubApplication - Started AiHubApplication in 5.872 seconds (process running for 6.877)
2025-06-17 00:34:54.997 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 00:34:54.997 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 00:34:54.998 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-17 00:34:55.153 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: testuser
2025-06-17 00:34:55.405 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 00:34:55.801 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2d8545e1
2025-06-17 00:34:55.803 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 00:34:55.810 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:34:55.835 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:34:55.872 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:34:56.009 [http-nio-8080-exec-1] WARN  com.example.aihub.controller.AuthController - 用户登录失败，用户名或密码错误: testuser
2025-06-17 00:34:58.998 [http-nio-8080-exec-5] INFO  org.springdoc.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 425 ms
2025-06-17 00:35:04.681 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: testuser
2025-06-17 00:35:04.685 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:35:04.688 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:35:04.692 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:35:04.867 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.AuthController - 用户登录成功: testuser
2025-06-17 00:35:24.186 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:35:24.187 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:35:24.189 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:35:24.240 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:35:24.243 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:35:24.245 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:35:24.254 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:35:24.257 [http-nio-8080-exec-9] ERROR com.example.aihub.controller.BaseController - 捕获到全局异常
java.lang.Exception: 读取课程文件时发生错误
	at com.example.aihub.service.impl.CoursesServiceImpl.getCourseMarkdownContent(CoursesServiceImpl.java:356)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:716)
	at com.example.aihub.service.impl.CoursesServiceImpl$$SpringCGLIB$$0.getCourseMarkdownContent(<generated>)
	at com.example.aihub.controller.CoursesController.getCourseContent(CoursesController.java:95)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.proceed(AuthorizationManagerBeforeMethodInterceptor.java:269)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.attemptAuthorization(AuthorizationManagerBeforeMethodInterceptor.java:264)
	at org.springframework.security.authorization.method.AuthorizationManagerBeforeMethodInterceptor.invoke(AuthorizationManagerBeforeMethodInterceptor.java:197)
	at org.springframework.security.config.annotation.method.configuration.DeferringMethodInterceptor.invoke(DeferringMethodInterceptor.java:44)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.example.aihub.controller.CoursesController$$SpringCGLIB$$0.getCourseContent(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.aihub.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:59)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: java.io.FileNotFoundException: 课程文件不存在: courses-md\courses-md\ae62a3c5-dd69-4e8e-b569-873660d997f7.md
	at com.example.aihub.service.impl.CoursesServiceImpl.getCourseMarkdownContent(CoursesServiceImpl.java:351)
	... 127 common frames omitted
2025-06-17 00:39:35.726 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-17 00:39:35.740 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-17 00:39:45.060 [main] INFO  com.example.aihub.AiHubApplication - Starting AiHubApplication using Java 17.0.12 with PID 37216 (D:\JAVA\AIHub\target\classes started by ZhuanZ（无密码） in D:\JAVA\AIHub)
2025-06-17 00:39:45.062 [main] DEBUG com.example.aihub.AiHubApplication - Running with Spring Boot v3.3.6, Spring v6.1.15
2025-06-17 00:39:45.064 [main] INFO  com.example.aihub.AiHubApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-17 00:39:46.134 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-17 00:39:46.138 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-17 00:39:46.175 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 18 ms. Found 0 Redis repository interfaces.
2025-06-17 00:39:47.025 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 00:39:47.042 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 00:39:47.044 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 00:39:47.045 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.33]
2025-06-17 00:39:47.147 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 00:39:47.147 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1973 ms
2025-06-17 00:39:47.958 [main] DEBUG com.example.aihub.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-17 00:39:48.005 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-06-17 00:39:49.162 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 00:39:49.180 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 00:39:49.191 [main] INFO  com.example.aihub.AiHubApplication - Started AiHubApplication in 4.834 seconds (process running for 5.602)
2025-06-17 00:39:53.009 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 00:39:53.010 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 00:39:53.011 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-17 00:39:53.238 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 00:39:53.633 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7eb34bc
2025-06-17 00:39:53.635 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 00:39:53.642 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:39:53.669 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:39:53.696 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:39:53.747 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:39:53.748 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:39:53.750 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:39:53.760 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:39:53.762 [http-nio-8080-exec-1] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:43:42.475 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:43:42.476 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:43:42.481 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:43:42.500 [http-nio-8080-exec-3] ERROR com.example.aihub.controller.BaseController - 捕获到全局异常
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/courses/1/content.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:586)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
>>>>>>> ac6524341ebe8b9521f469469792290f7f36037d
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.aihub.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:59)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
<<<<<<< HEAD
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection
### The error may exist in com/example/aihub/mapper/UsersMapper.java (best guess)
### The error may involve com.example.aihub.mapper.UsersMapper.selectCount
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:156)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 117 common frames omitted
Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:84)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:348)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:89)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:64)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:336)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:81)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59)
	at jdk.proxy2/jdk.proxy2.$Proxy120.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	... 123 common frames omitted
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:815)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:438)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:241)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:189)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:137)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:360)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:202)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:461)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:550)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:98)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:111)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	... 135 common frames omitted
2025-06-17 18:33:56.468 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: ikun
2025-06-17 18:33:56.647 [http-nio-8080-exec-6] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 18:33:57.696 [http-nio-8080-exec-6] ERROR com.example.aihub.controller.AuthController - 登录过程中发生未知错误，用户: ikun
org.springframework.security.authentication.InternalAuthenticationServiceException: null
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:122)
	at org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider.authenticate(AbstractUserDetailsAuthenticationProvider.java:133)
	at org.springframework.security.authentication.ProviderManager.authenticate(ProviderManager.java:182)
	at com.example.aihub.controller.AuthController.login(AuthController.java:43)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.aihub.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:59)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: org.mybatis.spring.MyBatisSystemException: null
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:97)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy88.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:164)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:77)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:152)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
	at jdk.proxy2/jdk.proxy2.$Proxy89.selectList(Unknown Source)
	at com.baomidou.mybatisplus.core.mapper.BaseMapper.selectOne(BaseMapper.java:306)
	at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:733)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$DefaultMethodInvoker.invoke(MybatisMapperProxy.java:166)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
	at jdk.proxy2/jdk.proxy2.$Proxy89.selectOne(Unknown Source)
	at com.baomidou.mybatisplus.core.mapper.BaseMapper.selectOne(BaseMapper.java:295)
	at java.base/java.lang.invoke.MethodHandle.invokeWithArguments(MethodHandle.java:733)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$DefaultMethodInvoker.invoke(MybatisMapperProxy.java:166)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
	at jdk.proxy2/jdk.proxy2.$Proxy89.selectOne(Unknown Source)
	at com.baomidou.mybatisplus.extension.conditions.query.ChainQuery.lambda$one$cd9f9c92$1(ChainQuery.java:59)
	at com.baomidou.mybatisplus.extension.conditions.ChainWrapper.execute(ChainWrapper.java:63)
	at com.baomidou.mybatisplus.extension.conditions.query.ChainQuery.one(ChainQuery.java:59)
	at com.example.aihub.service.impl.UsersServiceImpl.findByUsername(UsersServiceImpl.java:30)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:716)
	at com.example.aihub.service.impl.UsersServiceImpl$$SpringCGLIB$$0.findByUsername(<generated>)
	at com.example.aihub.service.impl.UserDetailsServiceImpl.loadUserByUsername(UserDetailsServiceImpl.java:30)
	at org.springframework.security.authentication.dao.DaoAuthenticationProvider.retrieveUser(DaoAuthenticationProvider.java:107)
	... 104 common frames omitted
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection
### The error may exist in com/example/aihub/mapper/UsersMapper.java (best guess)
### The error may involve com.example.aihub.mapper.UsersMapper.selectList
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:156)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 132 common frames omitted
Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:84)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:348)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:89)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:64)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:336)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:81)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59)
	at jdk.proxy2/jdk.proxy2.$Proxy120.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	... 137 common frames omitted
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:815)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:438)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:241)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:189)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:137)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:360)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:202)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:461)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:550)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:98)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:111)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	... 149 common frames omitted
2025-06-17 18:34:17.588 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.AuthController - 新用户尝试注册: ikun
2025-06-17 18:34:17.589 [http-nio-8080-exec-8] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 18:34:18.637 [http-nio-8080-exec-8] ERROR com.example.aihub.controller.AuthController - 用户注册失败: ikun
org.mybatis.spring.MyBatisSystemException: null
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:97)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy88.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:160)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:87)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:152)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
	at jdk.proxy2/jdk.proxy2.$Proxy89.selectCount(Unknown Source)
	at com.baomidou.mybatisplus.extension.conditions.query.ChainQuery.lambda$count$31c95e6c$1(ChainQuery.java:78)
	at com.baomidou.mybatisplus.extension.conditions.ChainWrapper.execute(ChainWrapper.java:63)
	at com.baomidou.mybatisplus.extension.conditions.query.ChainQuery.count(ChainQuery.java:78)
	at com.example.aihub.service.impl.UsersServiceImpl.register(UsersServiceImpl.java:36)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:716)
	at com.example.aihub.service.impl.UsersServiceImpl$$SpringCGLIB$$0.register(<generated>)
	at com.example.aihub.controller.AuthController.register(AuthController.java:70)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.aihub.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:59)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection
### The error may exist in com/example/aihub/mapper/UsersMapper.java (best guess)
### The error may involve com.example.aihub.mapper.UsersMapper.selectCount
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:156)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 117 common frames omitted
Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:84)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:348)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:89)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:64)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:336)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:81)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59)
	at jdk.proxy2/jdk.proxy2.$Proxy120.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	... 123 common frames omitted
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:815)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:438)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:241)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:189)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:137)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:360)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:202)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:461)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:550)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:98)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:111)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	... 135 common frames omitted
2025-06-17 18:34:36.571 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.AuthController - 新用户尝试注册: 13000000000
2025-06-17 18:34:36.572 [http-nio-8080-exec-7] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 18:34:37.629 [http-nio-8080-exec-7] ERROR com.example.aihub.controller.AuthController - 用户注册失败: 13000000000
org.mybatis.spring.MyBatisSystemException: null
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:97)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439)
	at jdk.proxy2/jdk.proxy2.$Proxy88.selectOne(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:160)
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:87)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:152)
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89)
	at jdk.proxy2/jdk.proxy2.$Proxy89.selectCount(Unknown Source)
	at com.baomidou.mybatisplus.extension.conditions.query.ChainQuery.lambda$count$31c95e6c$1(ChainQuery.java:78)
	at com.baomidou.mybatisplus.extension.conditions.ChainWrapper.execute(ChainWrapper.java:63)
	at com.baomidou.mybatisplus.extension.conditions.query.ChainQuery.count(ChainQuery.java:78)
	at com.example.aihub.service.impl.UsersServiceImpl.register(UsersServiceImpl.java:36)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:716)
	at com.example.aihub.service.impl.UsersServiceImpl$$SpringCGLIB$$0.register(<generated>)
	at com.example.aihub.controller.AuthController.register(AuthController.java:70)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.aihub.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:59)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection
### The error may exist in com/example/aihub/mapper/UsersMapper.java (best guess)
### The error may involve com.example.aihub.mapper.UsersMapper.selectCount
### The error occurred while executing a query
### Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection
	at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:156)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:75)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425)
	... 117 common frames omitted
Caused by: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:84)
	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:80)
	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:67)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:348)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:89)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:64)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:336)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110)
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:81)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59)
	at jdk.proxy2/jdk.proxy2.$Proxy120.query(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154)
	... 123 common frames omitted
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:130)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:815)
	at com.mysql.cj.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:438)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:241)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:189)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:137)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:360)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:202)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:461)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:550)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:98)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:111)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)
	... 135 common frames omitted
2025-06-17 18:34:59.668 [main] INFO  com.example.aihub.AiHubApplication - Starting AiHubApplication using Java 21.0.7 with PID 29260 (D:\Code\trxy\Learning_2025\AiHub\target\classes started by ikun in D:\Code\trxy\Learning_2025\AiHub)
2025-06-17 18:34:59.671 [main] DEBUG com.example.aihub.AiHubApplication - Running with Spring Boot v3.3.6, Spring v6.1.15
2025-06-17 18:34:59.672 [main] INFO  com.example.aihub.AiHubApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-17 18:35:01.198 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-17 18:35:01.203 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-17 18:35:01.263 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 35 ms. Found 0 Redis repository interfaces.
2025-06-17 18:35:02.452 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 18:35:02.474 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 18:35:02.477 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 18:35:02.478 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.33]
2025-06-17 18:35:02.614 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 18:35:02.614 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2848 ms
2025-06-17 18:35:03.403 [main] DEBUG com.example.aihub.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-17 18:35:03.484 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-06-17 18:35:05.443 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 18:35:05.472 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 18:35:05.483 [main] INFO  com.example.aihub.AiHubApplication - Started AiHubApplication in 6.816 seconds (process running for 8.149)
2025-06-17 18:35:09.931 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 18:35:09.931 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 18:35:09.933 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-17 18:35:10.107 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.AuthController - 新用户尝试注册: 13000000000
2025-06-17 18:35:10.212 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 18:35:10.765 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@208e3578
2025-06-17 18:35:10.768 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 18:35:10.781 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - ==>  Preparing: SELECT COUNT( * ) AS total FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 18:35:10.860 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - ==> Parameters: 13000000000(String)
2025-06-17 18:35:11.092 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - <==      Total: 1
2025-06-17 18:35:11.109 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - ==>  Preparing: SELECT COUNT( * ) AS total FROM users WHERE deleted=0 AND (email = ?)
2025-06-17 18:35:11.109 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - ==> Parameters: newuser@example.com(String)
2025-06-17 18:35:11.121 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - <==      Total: 1
2025-06-17 18:35:11.340 [http-nio-8080-exec-1] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 18:35:11.344 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.insert - ==>  Preparing: INSERT INTO users ( username, email, user_code, password_hash, full_name, role, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-17 18:35:11.346 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.insert - ==> Parameters: 13000000000(String), newuser@example.com(String), 20230002(String), $2a$10$dLjQMEco5VRktWmZlcmLZeZKFMxA3jcvtSF8naaKTkNwn/qW7PUDW(String), 张三(String), teacher(String), 2025-06-17T18:35:11.341539900(LocalDateTime), 2025-06-17T18:35:11.344424300(LocalDateTime)
2025-06-17 18:35:11.358 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.insert - <==    Updates: 1
2025-06-17 18:35:11.362 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.AuthController - 用户注册成功: 13000000000
2025-06-17 18:35:20.991 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: 13000000000
2025-06-17 18:35:21.135 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 18:35:21.136 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: 13000000000(String)
2025-06-17 18:35:21.143 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 18:35:21.353 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.AuthController - 用户登录成功: 13000000000
2025-06-17 18:38:29.801 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-17 18:38:29.812 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-17 18:38:38.453 [main] INFO  com.example.aihub.AiHubApplication - Starting AiHubApplication using Java 21.0.7 with PID 28012 (D:\Code\trxy\Learning_2025\AiHub\target\classes started by ikun in D:\Code\trxy\Learning_2025\AiHub)
2025-06-17 18:38:38.457 [main] DEBUG com.example.aihub.AiHubApplication - Running with Spring Boot v3.3.6, Spring v6.1.15
2025-06-17 18:38:38.458 [main] INFO  com.example.aihub.AiHubApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-17 18:38:39.785 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-17 18:38:39.790 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-17 18:38:39.843 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 31 ms. Found 0 Redis repository interfaces.
2025-06-17 18:38:40.794 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 18:38:40.822 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 18:38:40.825 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 18:38:40.825 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.33]
2025-06-17 18:38:40.950 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 18:38:40.951 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2405 ms
2025-06-17 18:38:41.659 [main] DEBUG com.example.aihub.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-17 18:38:41.729 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-06-17 18:38:43.700 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 18:38:43.739 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 18:38:43.751 [main] INFO  com.example.aihub.AiHubApplication - Started AiHubApplication in 6.088 seconds (process running for 7.287)
2025-06-17 21:44:59.900 [main] INFO  com.example.aihub.AiHubApplication - Starting AiHubApplication using Java 21.0.7 with PID 17720 (D:\Code\trxy\Learning_2025\AiHub\target\classes started by ikun in D:\Code\trxy\Learning_2025\AiHub)
2025-06-17 21:44:59.901 [main] DEBUG com.example.aihub.AiHubApplication - Running with Spring Boot v3.3.6, Spring v6.1.15
2025-06-17 21:44:59.901 [main] INFO  com.example.aihub.AiHubApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-17 21:45:01.640 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-17 21:45:01.647 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-17 21:45:01.734 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 52 ms. Found 0 Redis repository interfaces.
2025-06-17 21:45:02.899 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 21:45:02.915 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 21:45:02.917 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 21:45:02.918 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.33]
2025-06-17 21:45:03.035 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 21:45:03.035 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3064 ms
2025-06-17 21:45:03.757 [main] DEBUG com.example.aihub.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-17 21:45:03.830 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-06-17 21:45:03.846 [main] WARN  c.b.mybatisplus.core.metadata.TableInfoHelper - Can not find table primary key in Class: "com.example.aihub.dto.ClassesRequest".
2025-06-17 21:45:03.847 [main] WARN  c.b.mybatisplus.core.injector.DefaultSqlInjector - class com.example.aihub.dto.ClassesRequest ,Not found @TableId annotation, Cannot use Mybatis-Plus 'xxById' Method.
2025-06-17 21:45:05.956 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 21:45:05.983 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 21:45:05.993 [main] INFO  com.example.aihub.AiHubApplication - Started AiHubApplication in 6.92 seconds (process running for 8.073)
2025-06-17 21:45:42.217 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 21:45:42.217 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 21:45:42.220 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-17 21:45:44.613 [http-nio-8080-exec-8] INFO  org.springdoc.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 804 ms
2025-06-17 21:48:51.491 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.AuthController - 新用户尝试注册: iikun
2025-06-17 21:48:51.637 [http-nio-8080-exec-4] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 21:48:52.122 [http-nio-8080-exec-4] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@44189711
2025-06-17 21:48:52.125 [http-nio-8080-exec-4] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 21:48:52.138 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - ==>  Preparing: SELECT COUNT( * ) AS total FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:48:52.184 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - ==> Parameters: iikun(String)
2025-06-17 21:48:52.225 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - <==      Total: 1
2025-06-17 21:48:52.236 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - ==>  Preparing: SELECT COUNT( * ) AS total FROM users WHERE deleted=0 AND (email = ?)
2025-06-17 21:48:52.236 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - ==> Parameters: newuser@example.com(String)
2025-06-17 21:48:52.237 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - <==      Total: 1
2025-06-17 21:48:52.373 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 21:48:52.376 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.insert - ==>  Preparing: INSERT INTO users ( username, email, user_code, password_hash, full_name, role, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-17 21:48:52.380 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.insert - ==> Parameters: iikun(String), newuser@example.com(String), 20230001(String), $2a$10$n9gXbzBN.6Co6Q9JST6bH.BsWabU7PGXHhhuXuhPgDOlhyP7aGvMi(String), iikun(String), teacher(String), 2025-06-17T21:48:52.373998900(LocalDateTime), 2025-06-17T21:48:52.376894600(LocalDateTime)
2025-06-17 21:48:52.387 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.insert - <==    Updates: 1
2025-06-17 21:48:52.390 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.AuthController - 用户注册成功: iikun
2025-06-17 21:49:03.308 [http-nio-8080-exec-6] ERROR com.example.aihub.controller.BaseController - 捕获到全局异常
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource auth/auth.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:586)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.aihub.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:59)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-17 21:49:13.813 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: iikun
2025-06-17 21:49:13.953 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:49:13.953 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:49:13.958 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:49:14.108 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.AuthController - 用户登录成功: iikun
2025-06-17 21:49:36.517 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:49:36.517 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:49:36.519 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:49:36.529 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:49:36.529 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:49:36.530 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:49:36.533 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 21:49:36.533 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==>  Preparing: INSERT INTO semesters ( name, start_date, end_date, status, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? )
2025-06-17 21:49:36.534 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==> Parameters: 2025-2026学年第一学期(String), 2025-09-01(LocalDate), 2026-01-20(LocalDate), future(String), 2025-06-17T21:49:36.533619100(LocalDateTime), 2025-06-17T21:49:36.533619100(LocalDateTime)
2025-06-17 21:49:36.540 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.SemestersMapper.insert - <==    Updates: 1
2025-06-17 21:52:07.374 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:52:07.374 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:52:07.376 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:52:07.384 [http-nio-8080-exec-9] ERROR com.example.aihub.controller.BaseController - 捕获到全局异常
org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.aihub.dto.SemestersRequest` from Array value (token `JsonToken.START_ARRAY`)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:406)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(AbstractJackson2HttpMessageConverter.java:354)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java:184)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:161)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:135)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:224)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:178)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.aihub.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:59)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.aihub.dto.SemestersRequest` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 1]
	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)
	at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1767)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1541)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1488)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray(BeanDeserializer.java:660)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:211)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:342)
	at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:2125)
	at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1501)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:395)
	... 104 common frames omitted
2025-06-17 21:52:23.044 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:52:23.045 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:52:23.047 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:52:23.053 [http-nio-8080-exec-1] ERROR com.example.aihub.controller.BaseController - 捕获到全局异常
org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.aihub.dto.SemestersRequest` from Array value (token `JsonToken.START_ARRAY`)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:406)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(AbstractJackson2HttpMessageConverter.java:354)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java:184)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:161)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:135)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:224)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:178)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.aihub.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:59)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.aihub.dto.SemestersRequest` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 1]
	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)
	at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1767)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1541)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1488)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray(BeanDeserializer.java:660)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:211)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:342)
	at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:2125)
	at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1501)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:395)
	... 104 common frames omitted
2025-06-17 21:52:28.370 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:52:28.371 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:52:28.371 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:52:28.378 [http-nio-8080-exec-2] ERROR com.example.aihub.controller.BaseController - 捕获到全局异常
org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `com.example.aihub.dto.SemestersRequest` from Array value (token `JsonToken.START_ARRAY`)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:406)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.read(AbstractJackson2HttpMessageConverter.java:354)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java:184)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:161)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:135)
	at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122)
	at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:224)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:178)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.example.aihub.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:59)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize value of type `com.example.aihub.dto.SemestersRequest` from Array value (token `JsonToken.START_ARRAY`)
 at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1, column: 1]
	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)
	at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1767)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1541)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(DeserializationContext.java:1488)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray(BeanDeserializer.java:660)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(BeanDeserializer.java:211)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:187)
	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:342)
	at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:2125)
	at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1501)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.readJavaType(AbstractJackson2HttpMessageConverter.java:395)
	... 104 common frames omitted
2025-06-17 21:52:52.510 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:52:52.511 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:52:52.513 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:52:52.521 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:52:52.522 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:52:52.524 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:52:52.525 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 21:52:52.526 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==>  Preparing: INSERT INTO semesters ( name, start_date, end_date, status, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? )
2025-06-17 21:52:52.527 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==> Parameters: 2016-2017学年第一学期(String), 2016-09-01(LocalDate), 2017-01-20(LocalDate), past(String), 2025-06-17T21:52:52.525890900(LocalDateTime), 2025-06-17T21:52:52.525890900(LocalDateTime)
2025-06-17 21:52:52.532 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.SemestersMapper.insert - <==    Updates: 1
2025-06-17 21:58:04.035 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:04.036 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:04.038 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:04.045 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:04.045 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:04.048 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:04.049 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 21:58:04.049 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==>  Preparing: INSERT INTO semesters ( name, start_date, end_date, status, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? )
2025-06-17 21:58:04.050 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==> Parameters: 2017-2018学年第一学期(String), 2017-09-01(LocalDate), 2018-01-20(LocalDate), past(String), 2025-06-17T21:58:04.049717200(LocalDateTime), 2025-06-17T21:58:04.049717200(LocalDateTime)
2025-06-17 21:58:04.055 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.SemestersMapper.insert - <==    Updates: 1
2025-06-17 21:58:10.316 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:10.316 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:10.319 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:10.325 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:10.325 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:10.327 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:10.333 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 21:58:10.334 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==>  Preparing: INSERT INTO semesters ( name, start_date, end_date, status, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? )
2025-06-17 21:58:10.334 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==> Parameters: 2018-2019学年第一学期(String), 2018-09-01(LocalDate), 2019-01-20(LocalDate), past(String), 2025-06-17T21:58:10.333808500(LocalDateTime), 2025-06-17T21:58:10.333808500(LocalDateTime)
2025-06-17 21:58:10.339 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.SemestersMapper.insert - <==    Updates: 1
2025-06-17 21:58:15.878 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:15.879 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:15.881 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:15.889 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:15.890 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:15.891 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:15.892 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 21:58:15.892 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==>  Preparing: INSERT INTO semesters ( name, start_date, end_date, status, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? )
2025-06-17 21:58:15.892 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==> Parameters: 2019-2020学年第一学期(String), 2019-09-01(LocalDate), 2020-01-20(LocalDate), past(String), 2025-06-17T21:58:15.892678200(LocalDateTime), 2025-06-17T21:58:15.892678200(LocalDateTime)
2025-06-17 21:58:15.898 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.SemestersMapper.insert - <==    Updates: 1
2025-06-17 21:58:21.704 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:21.704 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:21.706 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:21.712 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:21.712 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:21.714 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:21.715 [http-nio-8080-exec-10] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 21:58:21.715 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==>  Preparing: INSERT INTO semesters ( name, start_date, end_date, status, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? )
2025-06-17 21:58:21.715 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==> Parameters: 2020-2021学年第一学期(String), 2020-09-01(LocalDate), 2021-01-20(LocalDate), past(String), 2025-06-17T21:58:21.715601800(LocalDateTime), 2025-06-17T21:58:21.715601800(LocalDateTime)
2025-06-17 21:58:21.720 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.SemestersMapper.insert - <==    Updates: 1
2025-06-17 21:58:28.291 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:28.292 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:28.294 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:28.301 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:28.301 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:28.303 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:28.304 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 21:58:28.304 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==>  Preparing: INSERT INTO semesters ( name, start_date, end_date, status, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? )
2025-06-17 21:58:28.304 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==> Parameters: 2021-2022学年第一学期(String), 2021-09-01(LocalDate), 2022-01-20(LocalDate), past(String), 2025-06-17T21:58:28.304072900(LocalDateTime), 2025-06-17T21:58:28.304072900(LocalDateTime)
2025-06-17 21:58:28.309 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.SemestersMapper.insert - <==    Updates: 1
2025-06-17 21:58:34.977 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:34.978 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:34.980 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:34.988 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:34.989 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:34.992 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:34.992 [http-nio-8080-exec-1] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 21:58:34.993 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==>  Preparing: INSERT INTO semesters ( name, start_date, end_date, status, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? )
2025-06-17 21:58:34.993 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==> Parameters: 2022-2023学年第一学期(String), 2022-09-01(LocalDate), 2023-01-20(LocalDate), past(String), 2025-06-17T21:58:34.993770900(LocalDateTime), 2025-06-17T21:58:34.993770900(LocalDateTime)
2025-06-17 21:58:34.997 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.SemestersMapper.insert - <==    Updates: 1
2025-06-17 21:58:41.065 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:41.065 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:41.067 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:41.073 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:41.075 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:41.075 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:41.077 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 21:58:41.077 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==>  Preparing: INSERT INTO semesters ( name, start_date, end_date, status, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? )
2025-06-17 21:58:41.077 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==> Parameters: 2023-2024学年第一学期(String), 2023-09-01(LocalDate), 2024-01-20(LocalDate), past(String), 2025-06-17T21:58:41.077544300(LocalDateTime), 2025-06-17T21:58:41.077544300(LocalDateTime)
2025-06-17 21:58:41.082 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.SemestersMapper.insert - <==    Updates: 1
2025-06-17 21:58:48.565 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:48.566 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:48.566 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:48.572 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:48.573 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:48.575 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:48.575 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 21:58:48.575 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==>  Preparing: INSERT INTO semesters ( name, start_date, end_date, status, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? )
2025-06-17 21:58:48.576 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==> Parameters: 2024-2025学年第一学期(String), 2024-09-01(LocalDate), 2025-01-20(LocalDate), current(String), 2025-06-17T21:58:48.575855(LocalDateTime), 2025-06-17T21:58:48.575855(LocalDateTime)
2025-06-17 21:58:48.581 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.SemestersMapper.insert - <==    Updates: 1
2025-06-17 21:58:55.165 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:55.165 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:55.168 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:55.173 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 21:58:55.174 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 21:58:55.176 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 21:58:55.177 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 21:58:55.177 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==>  Preparing: INSERT INTO semesters ( name, start_date, end_date, status, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ? )
2025-06-17 21:58:55.178 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.SemestersMapper.insert - ==> Parameters: 2025-2026学年第一学期(String), 2025-09-01(LocalDate), 2026-01-20(LocalDate), future(String), 2025-06-17T21:58:55.177510(LocalDateTime), 2025-06-17T21:58:55.177510(LocalDateTime)
2025-06-17 21:58:55.183 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.SemestersMapper.insert - <==    Updates: 1
2025-06-17 22:29:53.908 [main] INFO  com.example.aihub.AiHubApplication - Starting AiHubApplication using Java 21.0.7 with PID 23612 (D:\Code\trxy\Learning_2025\AiHub\target\classes started by ikun in D:\Code\trxy\Learning_2025\AiHub)
2025-06-17 22:29:53.911 [main] DEBUG com.example.aihub.AiHubApplication - Running with Spring Boot v3.3.6, Spring v6.1.15
2025-06-17 22:29:53.912 [main] INFO  com.example.aihub.AiHubApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-17 22:29:55.284 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-17 22:29:55.287 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-17 22:29:55.341 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 31 ms. Found 0 Redis repository interfaces.
2025-06-17 22:29:56.276 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 22:29:56.297 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 22:29:56.299 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 22:29:56.299 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.33]
2025-06-17 22:29:56.415 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 22:29:56.416 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2408 ms
2025-06-17 22:29:57.104 [main] DEBUG com.example.aihub.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-17 22:29:57.167 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-06-17 22:29:57.180 [main] WARN  c.b.mybatisplus.core.metadata.TableInfoHelper - Can not find table primary key in Class: "com.example.aihub.dto.ClassesRequest".
2025-06-17 22:29:57.180 [main] WARN  c.b.mybatisplus.core.injector.DefaultSqlInjector - class com.example.aihub.dto.ClassesRequest ,Not found @TableId annotation, Cannot use Mybatis-Plus 'xxById' Method.
2025-06-17 22:29:59.037 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 22:29:59.060 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 22:29:59.071 [main] INFO  com.example.aihub.AiHubApplication - Started AiHubApplication in 6.221 seconds (process running for 7.457)
2025-06-17 22:30:22.996 [http-nio-8080-exec-2] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 22:30:22.997 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 22:30:22.998 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-06-17 22:30:23.251 [http-nio-8080-exec-2] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 22:30:23.738 [http-nio-8080-exec-2] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@38c1329b
2025-06-17 22:30:23.739 [http-nio-8080-exec-2] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 22:30:23.751 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 22:30:23.791 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 22:30:23.831 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 0
2025-06-17 22:30:23.839 [http-nio-8080-exec-2] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
org.springframework.security.core.userdetails.UsernameNotFoundException: 用户不存在: iikun
	at com.example.aihub.service.impl.UserDetailsServiceImpl.loadUserByUsername(UserDetailsServiceImpl.java:32)
	at com.example.aihub.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:49)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-17 22:31:23.000 [main] INFO  com.example.aihub.AiHubApplication - Starting AiHubApplication using Java 21.0.7 with PID 30044 (D:\Code\trxy\Learning_2025\AiHub\target\classes started by ikun in D:\Code\trxy\Learning_2025\AiHub)
2025-06-17 22:31:23.001 [main] DEBUG com.example.aihub.AiHubApplication - Running with Spring Boot v3.3.6, Spring v6.1.15
2025-06-17 22:31:23.002 [main] INFO  com.example.aihub.AiHubApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-17 22:31:24.150 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-17 22:31:24.153 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-17 22:31:24.202 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 28 ms. Found 0 Redis repository interfaces.
2025-06-17 22:31:25.091 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 22:31:25.109 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 22:31:25.111 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 22:31:25.111 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.33]
2025-06-17 22:31:25.229 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 22:31:25.229 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2162 ms
2025-06-17 22:31:25.949 [main] DEBUG com.example.aihub.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-17 22:31:26.016 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-06-17 22:31:26.029 [main] WARN  c.b.mybatisplus.core.metadata.TableInfoHelper - Can not find table primary key in Class: "com.example.aihub.dto.ClassesRequest".
2025-06-17 22:31:26.029 [main] WARN  c.b.mybatisplus.core.injector.DefaultSqlInjector - class com.example.aihub.dto.ClassesRequest ,Not found @TableId annotation, Cannot use Mybatis-Plus 'xxById' Method.
2025-06-17 22:31:27.772 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 22:31:27.799 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 22:31:27.815 [main] INFO  com.example.aihub.AiHubApplication - Started AiHubApplication in 5.614 seconds (process running for 6.727)
2025-06-17 22:31:28.871 [http-nio-8080-exec-2] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 22:31:28.872 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 22:31:28.875 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-17 22:31:29.135 [http-nio-8080-exec-2] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 22:31:29.625 [http-nio-8080-exec-2] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@78179313
2025-06-17 22:31:29.627 [http-nio-8080-exec-2] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 22:31:29.646 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 22:31:29.685 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 22:31:29.719 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 0
2025-06-17 22:31:29.727 [http-nio-8080-exec-2] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
org.springframework.security.core.userdetails.UsernameNotFoundException: 用户不存在: iikun
	at com.example.aihub.service.impl.UserDetailsServiceImpl.loadUserByUsername(UserDetailsServiceImpl.java:32)
	at com.example.aihub.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:49)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-17 22:34:06.696 [main] INFO  com.example.aihub.AiHubApplication - Starting AiHubApplication using Java 21.0.7 with PID 1176 (D:\Code\trxy\Learning_2025\AiHub\target\classes started by ikun in D:\Code\trxy\Learning_2025\AiHub)
2025-06-17 22:34:06.699 [main] DEBUG com.example.aihub.AiHubApplication - Running with Spring Boot v3.3.6, Spring v6.1.15
2025-06-17 22:34:06.699 [main] INFO  com.example.aihub.AiHubApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-17 22:34:07.892 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-17 22:34:07.895 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-17 22:34:07.946 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 30 ms. Found 0 Redis repository interfaces.
2025-06-17 22:34:08.841 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 22:34:08.858 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 22:34:08.860 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 22:34:08.860 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.33]
2025-06-17 22:34:08.980 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 22:34:08.980 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2210 ms
2025-06-17 22:34:09.633 [main] DEBUG com.example.aihub.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-17 22:34:09.695 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-06-17 22:34:09.708 [main] WARN  c.b.mybatisplus.core.metadata.TableInfoHelper - Can not find table primary key in Class: "com.example.aihub.dto.ClassesRequest".
2025-06-17 22:34:09.709 [main] WARN  c.b.mybatisplus.core.injector.DefaultSqlInjector - class com.example.aihub.dto.ClassesRequest ,Not found @TableId annotation, Cannot use Mybatis-Plus 'xxById' Method.
2025-06-17 22:34:11.454 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 22:34:11.483 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 22:34:11.499 [main] INFO  com.example.aihub.AiHubApplication - Started AiHubApplication in 5.597 seconds (process running for 6.697)
2025-06-17 22:34:12.214 [http-nio-8080-exec-2] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 22:34:12.215 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 22:34:12.216 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-17 22:34:23.608 [http-nio-8080-exec-3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 22:34:24.155 [http-nio-8080-exec-3] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4d01b9df
2025-06-17 22:34:24.158 [http-nio-8080-exec-3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 22:34:24.171 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 22:34:24.213 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 22:34:24.248 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 0
2025-06-17 22:34:24.256 [http-nio-8080-exec-3] ERROR o.a.c.c.C.[.[localhost].[/].[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
org.springframework.security.core.userdetails.UsernameNotFoundException: 用户不存在: iikun
	at com.example.aihub.service.impl.UserDetailsServiceImpl.loadUserByUsername(UserDetailsServiceImpl.java:32)
	at com.example.aihub.config.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:49)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2025-06-17 22:34:33.959 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.AuthController - 新用户尝试注册: iikun
2025-06-17 22:34:33.962 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - ==>  Preparing: SELECT COUNT( * ) AS total FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 22:34:33.963 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - ==> Parameters: iikun(String)
2025-06-17 22:34:33.967 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - <==      Total: 1
2025-06-17 22:34:33.969 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - ==>  Preparing: SELECT COUNT( * ) AS total FROM users WHERE deleted=0 AND (email = ?)
2025-06-17 22:34:33.970 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - ==> Parameters: newuser@example.com(String)
2025-06-17 22:34:33.971 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectCount - <==      Total: 1
2025-06-17 22:34:34.115 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 22:34:34.118 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.insert - ==>  Preparing: INSERT INTO users ( username, email, user_code, password_hash, full_name, role, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-17 22:34:34.120 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.insert - ==> Parameters: iikun(String), newuser@example.com(String), 20230001(String), $2a$10$Urrv/5KrhKp1awfVewux2OPkLXdAG8mdtmyWOzanA5ScM/7g5LqEC(String), iikun(String), teacher(String), 2025-06-17T22:34:34.115328300(LocalDateTime), 2025-06-17T22:34:34.118110600(LocalDateTime)
2025-06-17 22:34:34.129 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.insert - <==    Updates: 1
2025-06-17 22:34:34.135 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.AuthController - 用户注册成功: iikun
2025-06-17 22:34:37.952 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: iikun
2025-06-17 22:34:38.086 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 22:34:38.087 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 22:34:38.092 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 22:34:38.273 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.AuthController - 用户登录成功: iikun
2025-06-17 22:34:45.603 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 22:34:45.604 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 22:34:45.606 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 22:34:45.616 [http-nio-8080-exec-6] DEBUG c.example.aihub.mapper.SemestersMapper.selectList - ==>  Preparing: SELECT id,name,start_date,end_date,status,create_time,update_time,deleted FROM semesters WHERE deleted=0
2025-06-17 22:34:45.617 [http-nio-8080-exec-6] DEBUG c.example.aihub.mapper.SemestersMapper.selectList - ==> Parameters: 
2025-06-17 22:38:45.511 [main] INFO  com.example.aihub.AiHubApplication - Starting AiHubApplication using Java 21.0.7 with PID 32796 (D:\Code\trxy\Learning_2025\AiHub\target\classes started by ikun in D:\Code\trxy\Learning_2025\AiHub)
2025-06-17 22:38:45.513 [main] DEBUG com.example.aihub.AiHubApplication - Running with Spring Boot v3.3.6, Spring v6.1.15
2025-06-17 22:38:45.515 [main] INFO  com.example.aihub.AiHubApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-17 22:38:47.007 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-17 22:38:47.010 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-17 22:38:47.065 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 33 ms. Found 0 Redis repository interfaces.
2025-06-17 22:38:47.969 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 22:38:47.986 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 22:38:47.988 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 22:38:47.989 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.33]
2025-06-17 22:38:48.114 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 22:38:48.114 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2336 ms
2025-06-17 22:38:48.572 [main] WARN  c.b.mybatisplus.core.metadata.TableInfoHelper - Can not find table primary key in Class: "com.example.aihub.entity.Semesters".
2025-06-17 22:38:48.572 [main] WARN  c.b.mybatisplus.core.injector.DefaultSqlInjector - class com.example.aihub.entity.Semesters ,Not found @TableId annotation, Cannot use Mybatis-Plus 'xxById' Method.
2025-06-17 22:38:48.800 [main] DEBUG com.example.aihub.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-17 22:38:48.873 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-06-17 22:38:48.886 [main] WARN  c.b.mybatisplus.core.metadata.TableInfoHelper - Can not find table primary key in Class: "com.example.aihub.dto.ClassesRequest".
2025-06-17 22:38:48.886 [main] WARN  c.b.mybatisplus.core.injector.DefaultSqlInjector - class com.example.aihub.dto.ClassesRequest ,Not found @TableId annotation, Cannot use Mybatis-Plus 'xxById' Method.
2025-06-17 22:38:50.686 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 22:38:50.712 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 22:38:50.725 [main] INFO  com.example.aihub.AiHubApplication - Started AiHubApplication in 6.053 seconds (process running for 7.21)
2025-06-17 22:38:53.382 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 22:38:53.382 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 22:38:53.384 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-17 22:38:53.719 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 22:38:54.322 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2181498
2025-06-17 22:38:54.325 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 22:38:54.340 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 22:38:54.381 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 22:38:54.422 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 22:38:54.465 [http-nio-8080-exec-1] DEBUG c.example.aihub.mapper.SemestersMapper.selectList - ==>  Preparing: SELECT name,start_date,end_date,status FROM semesters
2025-06-17 22:38:54.466 [http-nio-8080-exec-1] DEBUG c.example.aihub.mapper.SemestersMapper.selectList - ==> Parameters: 
2025-06-17 22:38:54.470 [http-nio-8080-exec-1] DEBUG c.example.aihub.mapper.SemestersMapper.selectList - <==      Total: 12
2025-06-17 22:44:11.353 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 22:44:11.353 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: iikun(String)
2025-06-17 22:44:11.355 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 22:44:11.361 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.SemestersMapper.selectList - ==>  Preparing: SELECT name,start_date,end_date,status FROM semesters
2025-06-17 22:44:11.362 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.SemestersMapper.selectList - ==> Parameters: 
2025-06-17 22:44:11.365 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.SemestersMapper.selectList - <==      Total: 12
=======
	at java.base/java.lang.Thread.run(Thread.java:840)
2025-06-17 00:43:44.723 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:43:44.724 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:43:44.728 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:43:44.739 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:43:44.740 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:43:44.741 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:43:44.746 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:43:44.749 [http-nio-8080-exec-8] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:43:47.618 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:43:47.619 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:43:47.623 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:43:47.630 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:43:47.631 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:43:47.632 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:43:47.636 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:43:47.638 [http-nio-8080-exec-5] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:44:03.541 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:44:03.541 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:44:03.547 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:44:03.557 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:44:03.557 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:44:03.559 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:44:03.564 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:44:03.566 [http-nio-8080-exec-6] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:44:03.592 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:44:03.592 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:44:03.594 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:44:03.604 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:44:03.605 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:44:03.606 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:44:03.610 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:44:03.611 [http-nio-8080-exec-7] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:44:03.731 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:44:03.732 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:44:03.734 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:44:03.743 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:44:03.743 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:44:03.744 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:44:03.747 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:44:03.748 [http-nio-8080-exec-4] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:44:10.764 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:44:10.766 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:44:10.770 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:44:10.779 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:44:10.780 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:44:10.781 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:44:10.785 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:44:10.787 [http-nio-8080-exec-9] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:44:17.805 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:44:17.808 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:44:17.815 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:44:17.827 [http-nio-8080-exec-10] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:44:17.828 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:44:17.829 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:44:17.832 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:44:17.834 [http-nio-8080-exec-10] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:44:32.354 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:44:32.354 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:44:32.357 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:44:32.364 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:44:32.365 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:44:32.366 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:44:32.369 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:44:32.370 [http-nio-8080-exec-1] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:44:36.495 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: testuser
2025-06-17 00:44:36.662 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:44:36.663 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:44:36.665 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:44:36.833 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.AuthController - 用户登录成功: testuser
2025-06-17 00:44:38.187 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:44:38.188 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:44:38.190 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:44:38.196 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 00:44:38.199 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:44:38.200 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:44:38.202 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:44:38.208 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 00:44:38.209 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 00:44:38.219 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 00:44:38.221 [http-nio-8080-exec-3] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 00:44:39.349 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:44:39.350 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:44:39.352 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:44:39.358 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:44:39.359 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:44:39.360 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:44:39.362 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:44:39.363 [http-nio-8080-exec-8] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:45:21.852 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:45:21.853 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:45:21.854 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:45:21.858 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:45:21.859 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:45:21.860 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:45:21.861 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:45:21.862 [http-nio-8080-exec-5] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:45:23.762 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:45:23.763 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:45:23.767 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:45:23.771 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:45:23.772 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:45:23.772 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:45:23.774 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:45:23.775 [http-nio-8080-exec-6] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:47:39.438 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:47:39.439 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:47:39.442 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:47:39.452 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:47:39.454 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:47:39.454 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:47:39.459 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:47:39.461 [http-nio-8080-exec-7] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:48:06.596 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:48:06.596 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:48:06.599 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:48:06.607 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:48:06.609 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:48:06.611 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:48:06.617 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:48:06.619 [http-nio-8080-exec-4] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:48:07.256 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:48:07.256 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:48:07.259 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:48:07.271 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:48:07.271 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:48:07.273 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:48:07.276 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:48:07.278 [http-nio-8080-exec-9] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:48:20.059 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:48:20.060 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:48:20.061 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:48:20.071 [http-nio-8080-exec-10] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:48:20.072 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:48:20.073 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:48:20.075 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:48:20.077 [http-nio-8080-exec-10] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:48:26.983 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:48:26.984 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:48:26.985 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:48:26.993 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:48:26.993 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:48:26.994 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:48:26.996 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:48:26.997 [http-nio-8080-exec-1] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:49:55.384 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:49:55.385 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:49:55.387 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:49:55.394 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:49:55.395 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:49:55.396 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:49:55.398 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:49:55.400 [http-nio-8080-exec-2] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:50:28.139 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:50:28.139 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:50:28.142 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:50:28.152 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:50:28.152 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:50:28.152 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:50:28.155 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:50:28.157 [http-nio-8080-exec-3] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:50:33.032 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:50:33.034 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:50:33.038 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:50:33.049 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:50:33.050 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:50:33.052 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:50:33.056 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:50:33.059 [http-nio-8080-exec-8] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:53:07.309 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:53:07.310 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:53:07.313 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:53:07.323 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:53:07.324 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:53:07.325 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:53:07.327 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:53:07.329 [http-nio-8080-exec-5] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:53:26.201 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:53:26.201 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:53:26.204 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:53:26.212 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:53:26.213 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:53:26.214 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:53:26.217 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:53:26.218 [http-nio-8080-exec-6] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:53:40.875 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:53:40.876 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:53:40.878 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:53:40.884 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:53:40.885 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:53:40.885 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:53:40.887 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:53:40.888 [http-nio-8080-exec-7] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:54:19.872 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:54:19.873 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:54:19.876 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:54:19.882 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:54:19.882 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:54:19.883 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:54:19.884 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:54:19.885 [http-nio-8080-exec-4] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 00:58:03.388 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:58:03.389 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:58:03.392 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:58:03.425 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 请求解析课程，课程ID: 1
2025-06-17 00:58:03.607 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:58:03.608 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:58:03.611 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:58:04.494 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 00:58:04.565 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:04.565 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [0, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.565 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.565 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1
2025-06-17 00:58:04.566 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:04.566 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.566 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.566 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.1
2025-06-17 00:58:04.566 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:04.566 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.566 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.566 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.2
2025-06-17 00:58:04.566 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:04.566 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.566 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.566 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2
2025-06-17 00:58:04.567 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:04.567 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.567 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.567 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1
2025-06-17 00:58:04.567 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:04.568 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.568 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 1, 0, 0, 0]
2025-06-17 00:58:04.568 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.1
2025-06-17 00:58:04.568 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:04.568 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 1, 0, 0, 0]
2025-06-17 00:58:04.569 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 2, 0, 0, 0]
2025-06-17 00:58:04.794 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.2
2025-06-17 00:58:04.796 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:04.796 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 2, 0, 0, 0]
2025-06-17 00:58:04.796 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.796 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.2
2025-06-17 00:58:04.797 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:04.797 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.797 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.797 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3
2025-06-17 00:58:04.797 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:04.797 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.797 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.797 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.1
2025-06-17 00:58:04.798 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:04.798 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.798 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.798 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.2
2025-06-17 00:58:04.798 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:04.798 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.798 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [4, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.798 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 4
2025-06-17 00:58:04.799 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:04.799 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [4, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.799 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [4, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.799 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 4.1
2025-06-17 00:58:04.799 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:04.799 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [4, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.799 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [4, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.806 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 4.2
2025-06-17 00:58:04.807 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:04.807 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [4, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.807 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [5, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.807 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 5
2025-06-17 00:58:04.807 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:04.808 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [5, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.808 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [5, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.808 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 5.1
2025-06-17 00:58:04.808 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:04.808 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [5, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.808 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [5, 1, 1, 0, 0, 0]
2025-06-17 00:58:04.808 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 5.1.1
2025-06-17 00:58:04.808 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:04.808 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [5, 1, 1, 0, 0, 0]
2025-06-17 00:58:04.810 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [5, 1, 2, 0, 0, 0]
2025-06-17 00:58:04.810 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 5.1.2
2025-06-17 00:58:04.810 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:04.859 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [5, 1, 2, 0, 0, 0]
2025-06-17 00:58:04.859 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [5, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.859 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 5.2
2025-06-17 00:58:04.859 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:04.859 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [5, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.859 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [6, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.859 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 6
2025-06-17 00:58:04.861 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:04.861 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [6, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.861 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [6, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.861 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 6.1
2025-06-17 00:58:04.862 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:04.862 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [6, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.862 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [6, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.862 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 6.2
2025-06-17 00:58:04.862 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:04.862 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [6, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.862 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [7, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.862 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 7
2025-06-17 00:58:04.863 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:04.863 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [7, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.863 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [7, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.863 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 7.1
2025-06-17 00:58:04.863 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:04.863 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [7, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.863 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [7, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.863 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 7.2
2025-06-17 00:58:04.864 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:04.864 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [7, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.864 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [8, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.864 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 8
2025-06-17 00:58:04.866 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:04.866 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [8, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.866 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [8, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.866 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 8.1
2025-06-17 00:58:04.866 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:04.866 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [8, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.866 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [8, 1, 1, 0, 0, 0]
2025-06-17 00:58:04.866 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 8.1.1
2025-06-17 00:58:04.867 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:04.867 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [8, 1, 1, 0, 0, 0]
2025-06-17 00:58:04.867 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [8, 1, 2, 0, 0, 0]
2025-06-17 00:58:04.867 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 8.1.2
2025-06-17 00:58:04.867 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:04.867 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [8, 1, 2, 0, 0, 0]
2025-06-17 00:58:04.868 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [8, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.868 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 8.2
2025-06-17 00:58:04.868 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:04.868 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [8, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.868 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [9, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.868 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 9
2025-06-17 00:58:04.870 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:04.870 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [9, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.870 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [9, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.870 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 9.1
2025-06-17 00:58:04.870 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:04.870 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [9, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.870 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [9, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.870 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 9.2
2025-06-17 00:58:04.871 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:04.871 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [9, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.871 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [10, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.871 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 10
2025-06-17 00:58:04.872 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:04.872 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [10, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.872 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [10, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.872 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 10.1
2025-06-17 00:58:04.873 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:04.874 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [10, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.875 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [10, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.875 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 10.2
2025-06-17 00:58:04.876 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:04.876 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [10, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.876 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [11, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.876 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 11
2025-06-17 00:58:04.877 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:04.877 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [11, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.877 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [11, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.878 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 11.1
2025-06-17 00:58:04.879 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:04.879 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [11, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.879 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [11, 1, 1, 0, 0, 0]
2025-06-17 00:58:04.879 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 11.1.1
2025-06-17 00:58:04.880 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:04.880 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [11, 1, 1, 0, 0, 0]
2025-06-17 00:58:04.880 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [11, 1, 2, 0, 0, 0]
2025-06-17 00:58:04.880 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 11.1.2
2025-06-17 00:58:04.881 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:04.882 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [11, 1, 2, 0, 0, 0]
2025-06-17 00:58:04.882 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [11, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.882 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 11.2
2025-06-17 00:58:04.883 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:04.883 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [11, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.883 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [12, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.883 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 12
2025-06-17 00:58:04.884 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:04.884 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [12, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.884 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [12, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.884 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 12.1
2025-06-17 00:58:04.886 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:04.886 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [12, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.886 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [12, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.886 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 12.2
2025-06-17 00:58:04.887 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:04.887 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [12, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.887 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [13, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.887 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 13
2025-06-17 00:58:04.888 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:04.888 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [13, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.888 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [13, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.888 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 13.1
2025-06-17 00:58:04.890 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:04.890 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [13, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.890 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [13, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.891 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 13.2
2025-06-17 00:58:04.895 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:04.897 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [13, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.897 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [14, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.898 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 14
2025-06-17 00:58:04.901 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:04.901 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [14, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.901 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [14, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.901 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 14.1
2025-06-17 00:58:04.903 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:04.903 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [14, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.903 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [14, 1, 1, 0, 0, 0]
2025-06-17 00:58:04.903 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 14.1.1
2025-06-17 00:58:04.905 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:04.905 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [14, 1, 1, 0, 0, 0]
2025-06-17 00:58:04.906 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [14, 1, 2, 0, 0, 0]
2025-06-17 00:58:04.906 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 14.1.2
2025-06-17 00:58:04.908 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:04.908 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [14, 1, 2, 0, 0, 0]
2025-06-17 00:58:04.908 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [14, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.908 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 14.2
2025-06-17 00:58:04.910 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:04.910 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [14, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.910 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [15, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.910 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 15
2025-06-17 00:58:04.911 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:04.911 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [15, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.911 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [15, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.912 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 15.1
2025-06-17 00:58:04.913 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:04.913 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [15, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.913 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [15, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.913 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 15.2
2025-06-17 00:58:04.914 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:04.914 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [15, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.916 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [16, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.916 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 16
2025-06-17 00:58:04.919 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:04.919 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [16, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.919 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [16, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.919 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 16.1
2025-06-17 00:58:04.921 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:04.925 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [16, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.925 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [16, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.925 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 16.2
2025-06-17 00:58:04.926 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:04.926 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [16, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.926 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [17, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.926 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 17
2025-06-17 00:58:04.927 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:04.927 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [17, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.927 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [17, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.928 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 17.1
2025-06-17 00:58:04.929 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:04.929 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [17, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.929 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [17, 1, 1, 0, 0, 0]
2025-06-17 00:58:04.929 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 17.1.1
2025-06-17 00:58:04.931 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:04.931 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [17, 1, 1, 0, 0, 0]
2025-06-17 00:58:04.931 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [17, 1, 2, 0, 0, 0]
2025-06-17 00:58:04.931 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 17.1.2
2025-06-17 00:58:04.932 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:04.932 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [17, 1, 2, 0, 0, 0]
2025-06-17 00:58:04.932 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [17, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.932 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 17.2
2025-06-17 00:58:04.934 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:04.936 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [17, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.936 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [18, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.936 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 18
2025-06-17 00:58:04.939 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:04.939 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [18, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.939 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [18, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.939 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 18.1
2025-06-17 00:58:04.940 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:04.941 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [18, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.941 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [18, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.941 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 18.2
2025-06-17 00:58:04.942 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:04.942 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [18, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.942 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [19, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.942 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 19
2025-06-17 00:58:04.943 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:04.943 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [19, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.943 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [19, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.943 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 19.1
2025-06-17 00:58:04.946 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:04.946 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [19, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.946 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [19, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.946 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 19.2
2025-06-17 00:58:04.948 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:04.948 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [19, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.950 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [20, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.954 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 20
2025-06-17 00:58:04.957 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:04.957 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [20, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.957 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [20, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.957 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 20.1
2025-06-17 00:58:04.958 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:04.959 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [20, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.959 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [20, 1, 1, 0, 0, 0]
2025-06-17 00:58:04.959 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 20.1.1
2025-06-17 00:58:04.960 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:04.961 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [20, 1, 1, 0, 0, 0]
2025-06-17 00:58:04.961 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [20, 1, 2, 0, 0, 0]
2025-06-17 00:58:04.961 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 20.1.2
2025-06-17 00:58:04.962 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:04.962 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [20, 1, 2, 0, 0, 0]
2025-06-17 00:58:04.963 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [20, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.963 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 20.2
2025-06-17 00:58:04.963 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:04.963 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [20, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.963 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [21, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.963 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 21
2025-06-17 00:58:04.964 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:04.966 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [21, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.966 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [21, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.966 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 21.1
2025-06-17 00:58:04.970 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:04.970 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [21, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.970 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [21, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.970 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 21.2
2025-06-17 00:58:04.972 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:04.974 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [21, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.974 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [22, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.975 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 22
2025-06-17 00:58:04.978 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:04.978 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [22, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.978 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [22, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.978 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 22.1
2025-06-17 00:58:04.980 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:04.981 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [22, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.984 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [22, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.984 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 22.2
2025-06-17 00:58:04.986 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:04.991 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [22, 2, 0, 0, 0, 0]
2025-06-17 00:58:04.992 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [23, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.993 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 23
2025-06-17 00:58:04.999 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:04.999 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [23, 0, 0, 0, 0, 0]
2025-06-17 00:58:04.999 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [23, 1, 0, 0, 0, 0]
2025-06-17 00:58:04.999 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 23.1
2025-06-17 00:58:05.003 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:05.003 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [23, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.005 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [23, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.005 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 23.1.1
2025-06-17 00:58:05.009 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:05.010 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [23, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.010 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [23, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.010 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 23.1.2
2025-06-17 00:58:05.012 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:05.012 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [23, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.012 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [23, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.012 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 23.2
2025-06-17 00:58:05.014 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:05.014 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [23, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.014 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [24, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.014 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 24
2025-06-17 00:58:05.017 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:05.017 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [24, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.017 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [24, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.017 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 24.1
2025-06-17 00:58:05.020 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:05.020 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [24, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.020 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [24, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.020 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 24.2
2025-06-17 00:58:05.025 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:05.025 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [24, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.025 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [25, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.025 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 25
2025-06-17 00:58:05.032 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:05.032 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [25, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.032 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [25, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.032 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 25.1
2025-06-17 00:58:05.042 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:05.042 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [25, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.042 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [25, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.042 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 25.2
2025-06-17 00:58:05.044 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:05.044 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [25, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.044 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [26, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.044 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 26
2025-06-17 00:58:05.048 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:05.048 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [26, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.048 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [26, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.048 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 26.1
2025-06-17 00:58:05.056 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:05.056 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [26, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.056 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [26, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.056 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 26.1.1
2025-06-17 00:58:05.065 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:05.070 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [26, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.070 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [26, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.070 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 26.1.2
2025-06-17 00:58:05.074 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:05.074 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [26, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.075 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [26, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.075 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 26.2
2025-06-17 00:58:05.076 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:05.076 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [26, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.076 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [27, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.076 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 27
2025-06-17 00:58:05.079 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:05.079 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [27, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.080 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [27, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.080 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 27.1
2025-06-17 00:58:05.082 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:05.082 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [27, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.082 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [27, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.082 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 27.2
2025-06-17 00:58:05.086 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:05.087 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [27, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.087 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [28, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.087 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 28
2025-06-17 00:58:05.090 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:05.090 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [28, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.090 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [28, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.090 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 28.1
2025-06-17 00:58:05.095 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:05.095 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [28, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.096 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [28, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.096 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 28.2
2025-06-17 00:58:05.127 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:05.129 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [28, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.132 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [29, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.134 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 29
2025-06-17 00:58:05.141 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:05.141 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [29, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.141 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [29, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.141 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 29.1
2025-06-17 00:58:05.143 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:05.143 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [29, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.143 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [29, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.143 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 29.1.1
2025-06-17 00:58:05.144 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:05.146 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [29, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.146 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [29, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.146 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 29.1.2
2025-06-17 00:58:05.148 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:05.149 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [29, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.149 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [29, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.149 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 29.2
2025-06-17 00:58:05.152 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:05.153 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [29, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.153 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [30, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.153 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 30
2025-06-17 00:58:05.156 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:05.156 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [30, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.156 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [30, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.156 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 30.1
2025-06-17 00:58:05.158 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:05.158 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [30, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.158 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [30, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.158 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 30.2
2025-06-17 00:58:05.160 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:05.164 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [30, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.164 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [31, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.164 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 31
2025-06-17 00:58:05.167 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:05.167 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [31, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.167 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [31, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.167 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 31.1
2025-06-17 00:58:05.169 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:05.169 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [31, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.169 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [31, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.169 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 31.2
2025-06-17 00:58:05.172 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:05.172 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [31, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.172 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [32, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.172 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 32
2025-06-17 00:58:05.174 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:05.174 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [32, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.174 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [32, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.174 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 32.1
2025-06-17 00:58:05.177 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:05.177 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [32, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.177 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [32, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.177 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 32.1.1
2025-06-17 00:58:05.179 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:05.179 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [32, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.180 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [32, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.180 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 32.1.2
2025-06-17 00:58:05.182 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:05.182 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [32, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.182 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [32, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.182 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 32.2
2025-06-17 00:58:05.185 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:05.185 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [32, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.185 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [33, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.185 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 33
2025-06-17 00:58:05.188 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:05.188 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [33, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.188 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [33, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.188 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 33.1
2025-06-17 00:58:05.191 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:05.191 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [33, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.191 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [33, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.191 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 33.2
2025-06-17 00:58:05.194 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:05.195 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [33, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.195 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [34, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.195 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 34
2025-06-17 00:58:05.197 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:05.197 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [34, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.197 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [34, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.197 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 34.1
2025-06-17 00:58:05.200 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:05.201 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [34, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.201 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [34, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.201 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 34.2
2025-06-17 00:58:05.203 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:05.203 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [34, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.205 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [35, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.205 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 35
2025-06-17 00:58:05.207 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:05.207 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [35, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.207 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [35, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.207 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 35.1
2025-06-17 00:58:05.210 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:05.210 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [35, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.210 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [35, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.210 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 35.1.1
2025-06-17 00:58:05.213 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:05.213 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [35, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.213 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [35, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.213 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 35.1.2
2025-06-17 00:58:05.216 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:05.216 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [35, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.216 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [35, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.216 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 35.2
2025-06-17 00:58:05.219 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:05.220 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [35, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.220 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [36, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.220 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 36
2025-06-17 00:58:05.222 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:05.222 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [36, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.222 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [36, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.222 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 36.1
2025-06-17 00:58:05.224 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:05.224 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [36, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.224 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [36, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.224 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 36.2
2025-06-17 00:58:05.229 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:05.229 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [36, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.230 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [37, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.230 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 37
2025-06-17 00:58:05.233 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:05.233 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [37, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.233 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [37, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.233 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 37.1
2025-06-17 00:58:05.240 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:05.240 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [37, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.240 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [37, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.240 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 37.2
2025-06-17 00:58:05.243 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:05.244 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [37, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.244 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [38, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.244 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 38
2025-06-17 00:58:05.247 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:05.248 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [38, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.248 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [38, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.248 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 38.1
2025-06-17 00:58:05.251 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:05.252 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [38, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.252 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [38, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.252 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 38.1.1
2025-06-17 00:58:05.254 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:05.254 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [38, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.254 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [38, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.254 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 38.1.2
2025-06-17 00:58:05.263 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:05.263 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [38, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.264 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [38, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.264 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 38.2
2025-06-17 00:58:05.267 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:05.267 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [38, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.267 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [39, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.267 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 39
2025-06-17 00:58:05.270 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:05.270 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [39, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.270 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [39, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.270 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 39.1
2025-06-17 00:58:05.275 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:05.275 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [39, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.275 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [39, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.275 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 39.2
2025-06-17 00:58:05.278 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:05.278 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [39, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.278 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [40, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.278 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 40
2025-06-17 00:58:05.281 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:05.281 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [40, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.281 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [40, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.281 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 40.1
2025-06-17 00:58:05.283 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:05.283 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [40, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.283 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [40, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.283 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 40.2
2025-06-17 00:58:05.286 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:05.286 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [40, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.286 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [41, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.286 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 41
2025-06-17 00:58:05.289 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:05.289 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [41, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.289 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [41, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.289 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 41.1
2025-06-17 00:58:05.293 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:05.295 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [41, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.295 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [41, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.295 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 41.1.1
2025-06-17 00:58:05.297 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:05.297 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [41, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.297 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [41, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.297 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 41.1.2
2025-06-17 00:58:05.299 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:05.299 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [41, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.299 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [41, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.299 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 41.2
2025-06-17 00:58:05.302 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:05.302 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [41, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.302 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [42, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.302 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 42
2025-06-17 00:58:05.305 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:05.305 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [42, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.305 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [42, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.305 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 42.1
2025-06-17 00:58:05.307 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:05.307 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [42, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.307 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [42, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.307 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 42.2
2025-06-17 00:58:05.309 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:05.310 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [42, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.310 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [43, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.310 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 43
2025-06-17 00:58:05.312 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:05.312 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [43, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.312 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [43, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.312 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 43.1
2025-06-17 00:58:05.316 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:05.316 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [43, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.316 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [43, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.316 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 43.2
2025-06-17 00:58:05.318 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:05.318 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [43, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.318 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [44, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.318 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 44
2025-06-17 00:58:05.323 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:05.323 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [44, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.323 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [44, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.323 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 44.1
2025-06-17 00:58:05.329 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:05.330 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [44, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.331 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [44, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.331 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 44.1.1
2025-06-17 00:58:05.335 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:05.335 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [44, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.335 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [44, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.335 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 44.1.2
2025-06-17 00:58:05.342 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:05.342 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [44, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.342 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [44, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.342 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 44.2
2025-06-17 00:58:05.345 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:05.346 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [44, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.346 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [45, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.346 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 45
2025-06-17 00:58:05.349 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:05.349 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [45, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.350 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [45, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.350 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 45.1
2025-06-17 00:58:05.352 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:05.352 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [45, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.352 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [45, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.352 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 45.2
2025-06-17 00:58:05.355 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:05.355 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [45, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.355 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [46, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.355 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 46
2025-06-17 00:58:05.361 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:05.361 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [46, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.361 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [46, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.362 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 46.1
2025-06-17 00:58:05.365 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:05.365 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [46, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.366 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [46, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.366 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 46.2
2025-06-17 00:58:05.369 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:05.369 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [46, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.369 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [47, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.369 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 47
2025-06-17 00:58:05.372 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:05.373 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [47, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.373 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [47, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.373 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 47.1
2025-06-17 00:58:05.374 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:05.374 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [47, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.376 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [47, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.376 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 47.1.1
2025-06-17 00:58:05.380 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:05.380 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [47, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.380 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [47, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.380 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 47.1.2
2025-06-17 00:58:05.385 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:05.385 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [47, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.385 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [47, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.385 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 47.2
2025-06-17 00:58:05.390 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:05.390 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [47, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.390 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [48, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.390 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 48
2025-06-17 00:58:05.395 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:05.396 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [48, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.397 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [48, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.398 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 48.1
2025-06-17 00:58:05.402 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:05.403 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [48, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.403 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [48, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.403 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 48.2
2025-06-17 00:58:05.410 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:05.411 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [48, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.411 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [49, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.411 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 49
2025-06-17 00:58:05.418 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:05.418 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [49, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.418 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [49, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.418 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 49.1
2025-06-17 00:58:05.435 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:05.436 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [49, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.437 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [49, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.437 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 49.2
2025-06-17 00:58:05.446 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:05.447 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [49, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.448 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [50, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.448 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 50
2025-06-17 00:58:05.452 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:05.452 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [50, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.453 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [50, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.453 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 50.1
2025-06-17 00:58:05.460 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:05.461 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [50, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.461 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [50, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.461 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 50.1.1
2025-06-17 00:58:05.467 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:05.467 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [50, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.467 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [50, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.467 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 50.1.2
2025-06-17 00:58:05.470 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:05.470 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [50, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.470 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [50, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.470 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 50.2
2025-06-17 00:58:05.473 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:05.474 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [50, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.474 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [51, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.474 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 51
2025-06-17 00:58:05.479 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:05.480 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [51, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.480 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [51, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.480 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 51.1
2025-06-17 00:58:05.483 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:05.483 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [51, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.483 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [51, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.485 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 51.2
2025-06-17 00:58:05.488 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:05.488 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [51, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.488 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [52, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.488 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 52
2025-06-17 00:58:05.493 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:05.493 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [52, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.493 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [52, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.494 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 52.1
2025-06-17 00:58:05.500 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:05.500 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [52, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.502 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [52, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.502 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 52.2
2025-06-17 00:58:05.505 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:05.505 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [52, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.505 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [53, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.505 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 53
2025-06-17 00:58:05.509 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:05.510 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [53, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.510 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [53, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.510 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 53.1
2025-06-17 00:58:05.521 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:05.523 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [53, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.523 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [53, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.523 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 53.1.1
2025-06-17 00:58:05.536 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:05.537 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [53, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.539 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [53, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.539 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 53.1.2
2025-06-17 00:58:05.549 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:05.549 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [53, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.549 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [53, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.549 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 53.2
2025-06-17 00:58:05.556 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:05.556 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [53, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.557 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [54, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.557 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 54
2025-06-17 00:58:05.564 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:05.564 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [54, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.564 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [54, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.564 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 54.1
2025-06-17 00:58:05.569 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:05.569 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [54, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.569 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [54, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.569 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 54.2
2025-06-17 00:58:05.573 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:05.575 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [54, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.575 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [55, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.575 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 55
2025-06-17 00:58:05.589 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:05.589 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [55, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.589 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [55, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.589 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 55.1
2025-06-17 00:58:05.598 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:05.598 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [55, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.599 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [55, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.599 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 55.2
2025-06-17 00:58:05.603 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:05.603 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [55, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.603 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [56, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.603 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 56
2025-06-17 00:58:05.609 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:05.610 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [56, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.610 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [56, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.611 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 56.1
2025-06-17 00:58:05.619 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:05.620 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [56, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.620 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [56, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.620 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 56.1.1
2025-06-17 00:58:05.624 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:05.624 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [56, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.624 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [56, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.624 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 56.1.2
2025-06-17 00:58:05.629 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:05.630 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [56, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.632 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [56, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.632 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 56.2
2025-06-17 00:58:05.641 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:05.641 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [56, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.642 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [57, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.642 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 57
2025-06-17 00:58:05.652 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:05.652 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [57, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.652 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [57, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.653 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 57.1
2025-06-17 00:58:05.663 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:05.663 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [57, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.664 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [57, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.665 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 57.2
2025-06-17 00:58:05.674 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:05.675 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [57, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.675 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [58, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.676 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 58
2025-06-17 00:58:05.689 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:05.691 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [58, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.693 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [58, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.696 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 58.1
2025-06-17 00:58:05.706 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:05.713 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [58, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.713 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [58, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.713 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 58.2
2025-06-17 00:58:05.718 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:05.720 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [58, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.720 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [59, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.720 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 59
2025-06-17 00:58:05.724 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:05.724 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [59, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.724 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [59, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.726 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 59.1
2025-06-17 00:58:05.729 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:05.729 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [59, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.729 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [59, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.729 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 59.1.1
2025-06-17 00:58:05.738 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:05.739 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [59, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.739 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [59, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.741 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 59.1.2
2025-06-17 00:58:05.757 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:05.757 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [59, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.757 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [59, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.757 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 59.2
2025-06-17 00:58:05.764 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:05.764 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [59, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.764 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [60, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.764 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 60
2025-06-17 00:58:05.771 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:05.771 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [60, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.772 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [60, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.772 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 60.1
2025-06-17 00:58:05.779 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:05.780 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [60, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.780 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [60, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.780 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 60.2
2025-06-17 00:58:05.786 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:05.786 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [60, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.786 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [61, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.786 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 61
2025-06-17 00:58:05.790 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:05.791 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [61, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.791 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [61, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.791 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 61.1
2025-06-17 00:58:05.798 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:05.799 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [61, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.799 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [61, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.799 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 61.2
2025-06-17 00:58:05.804 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:05.804 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [61, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.804 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [62, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.804 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 62
2025-06-17 00:58:05.811 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:05.811 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [62, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.811 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [62, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.811 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 62.1
2025-06-17 00:58:05.817 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:05.817 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [62, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.817 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [62, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.817 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 62.1.1
2025-06-17 00:58:05.821 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:05.821 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [62, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.821 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [62, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.821 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 62.1.2
2025-06-17 00:58:05.827 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:05.827 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [62, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.827 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [62, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.828 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 62.2
2025-06-17 00:58:05.834 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:05.834 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [62, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.834 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [63, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.834 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 63
2025-06-17 00:58:05.838 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:05.838 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [63, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.838 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [63, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.838 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 63.1
2025-06-17 00:58:05.843 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:05.844 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [63, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.844 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [63, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.844 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 63.2
2025-06-17 00:58:05.850 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:05.850 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [63, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.850 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [64, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.850 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 64
2025-06-17 00:58:05.855 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:05.855 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [64, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.856 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [64, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.856 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 64.1
2025-06-17 00:58:05.858 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:05.858 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [64, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.858 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [64, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.858 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 64.2
2025-06-17 00:58:05.864 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:05.864 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [64, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.864 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [65, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.864 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 65
2025-06-17 00:58:05.869 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:05.869 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [65, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.869 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [65, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.869 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 65.1
2025-06-17 00:58:05.873 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:05.873 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [65, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.873 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [65, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.873 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 65.1.1
2025-06-17 00:58:05.877 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:05.878 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [65, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.878 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [65, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.878 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 65.1.2
2025-06-17 00:58:05.902 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:05.902 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [65, 1, 2, 0, 0, 0]
2025-06-17 00:58:05.902 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [65, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.903 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 65.2
2025-06-17 00:58:05.912 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:05.913 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [65, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.913 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [66, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.913 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 66
2025-06-17 00:58:05.923 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:05.923 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [66, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.923 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [66, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.923 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 66.1
2025-06-17 00:58:05.927 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:05.927 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [66, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.927 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [66, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.930 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 66.2
2025-06-17 00:58:05.940 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:05.941 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [66, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.941 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [67, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.941 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 67
2025-06-17 00:58:05.955 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:05.956 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [67, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.956 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [67, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.956 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 67.1
2025-06-17 00:58:05.969 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:05.970 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [67, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.970 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [67, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.970 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 67.2
2025-06-17 00:58:05.977 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:05.978 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [67, 2, 0, 0, 0, 0]
2025-06-17 00:58:05.978 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [68, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.979 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 68
2025-06-17 00:58:05.987 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:05.987 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [68, 0, 0, 0, 0, 0]
2025-06-17 00:58:05.987 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [68, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.987 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 68.1
2025-06-17 00:58:05.992 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:05.993 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [68, 1, 0, 0, 0, 0]
2025-06-17 00:58:05.993 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [68, 1, 1, 0, 0, 0]
2025-06-17 00:58:05.993 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 68.1.1
2025-06-17 00:58:06.000 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:06.000 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [68, 1, 1, 0, 0, 0]
2025-06-17 00:58:06.000 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [68, 1, 2, 0, 0, 0]
2025-06-17 00:58:06.000 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 68.1.2
2025-06-17 00:58:06.007 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:06.007 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [68, 1, 2, 0, 0, 0]
2025-06-17 00:58:06.007 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [68, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.007 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 68.2
2025-06-17 00:58:06.011 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:06.011 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [68, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.011 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [69, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.011 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 69
2025-06-17 00:58:06.021 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:06.022 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [69, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.022 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [69, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.023 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 69.1
2025-06-17 00:58:06.027 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:06.027 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [69, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.027 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [69, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.027 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 69.2
2025-06-17 00:58:06.032 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:06.032 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [69, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.039 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [70, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.039 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 70
2025-06-17 00:58:06.050 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:06.050 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [70, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.050 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [70, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.050 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 70.1
2025-06-17 00:58:06.056 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:06.057 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [70, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.057 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [70, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.057 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 70.2
2025-06-17 00:58:06.073 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:06.074 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [70, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.074 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [71, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.075 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 71
2025-06-17 00:58:06.083 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:06.086 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [71, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.086 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [71, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.086 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 71.1
2025-06-17 00:58:06.095 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:06.096 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [71, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.096 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [71, 1, 1, 0, 0, 0]
2025-06-17 00:58:06.096 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 71.1.1
2025-06-17 00:58:06.104 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:06.105 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [71, 1, 1, 0, 0, 0]
2025-06-17 00:58:06.107 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [71, 1, 2, 0, 0, 0]
2025-06-17 00:58:06.113 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 71.1.2
2025-06-17 00:58:06.118 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:06.119 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [71, 1, 2, 0, 0, 0]
2025-06-17 00:58:06.119 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [71, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.119 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 71.2
2025-06-17 00:58:06.124 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:06.124 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [71, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.124 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [72, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.124 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 72
2025-06-17 00:58:06.131 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:06.131 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [72, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.132 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [72, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.132 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 72.1
2025-06-17 00:58:06.139 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:06.139 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [72, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.139 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [72, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.139 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 72.2
2025-06-17 00:58:06.143 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:06.143 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [72, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.144 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [73, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.144 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 73
2025-06-17 00:58:06.154 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:06.154 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [73, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.154 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [73, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.156 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 73.1
2025-06-17 00:58:06.166 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:06.167 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [73, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.169 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [73, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.169 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 73.2
2025-06-17 00:58:06.191 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:06.195 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [73, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.203 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [74, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.205 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 74
2025-06-17 00:58:06.214 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:06.214 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [74, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.214 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [74, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.214 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 74.1
2025-06-17 00:58:06.240 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:06.241 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [74, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.242 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [74, 1, 1, 0, 0, 0]
2025-06-17 00:58:06.242 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 74.1.1
2025-06-17 00:58:06.248 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:06.248 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [74, 1, 1, 0, 0, 0]
2025-06-17 00:58:06.249 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [74, 1, 2, 0, 0, 0]
2025-06-17 00:58:06.249 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 74.1.2
2025-06-17 00:58:06.256 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:06.256 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [74, 1, 2, 0, 0, 0]
2025-06-17 00:58:06.256 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [74, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.257 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 74.2
2025-06-17 00:58:06.262 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:06.263 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [74, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.263 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [75, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.263 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 75
2025-06-17 00:58:06.269 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:06.269 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [75, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.271 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [75, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.271 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 75.1
2025-06-17 00:58:06.319 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:06.337 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [75, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.342 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [75, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.343 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 75.2
2025-06-17 00:58:06.355 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:06.356 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [75, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.356 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [76, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.356 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 76
2025-06-17 00:58:06.361 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:06.362 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [76, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.362 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [76, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.362 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 76.1
2025-06-17 00:58:06.373 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:06.373 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [76, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.373 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [76, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.373 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 76.2
2025-06-17 00:58:06.380 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:06.381 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [76, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.381 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [77, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.381 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 77
2025-06-17 00:58:06.389 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:06.389 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [77, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.390 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [77, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.390 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 77.1
2025-06-17 00:58:06.397 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:06.399 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [77, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.399 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [77, 1, 1, 0, 0, 0]
2025-06-17 00:58:06.399 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 77.1.1
2025-06-17 00:58:06.404 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:06.404 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [77, 1, 1, 0, 0, 0]
2025-06-17 00:58:06.404 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [77, 1, 2, 0, 0, 0]
2025-06-17 00:58:06.404 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 77.1.2
2025-06-17 00:58:06.410 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:06.410 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [77, 1, 2, 0, 0, 0]
2025-06-17 00:58:06.410 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [77, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.410 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 77.2
2025-06-17 00:58:06.416 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:06.417 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [77, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.417 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [78, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.417 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 78
2025-06-17 00:58:06.424 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:06.425 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [78, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.425 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [78, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.425 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 78.1
2025-06-17 00:58:06.431 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:06.431 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [78, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.431 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [78, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.431 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 78.2
2025-06-17 00:58:06.436 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:06.436 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [78, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.436 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [79, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.436 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 79
2025-06-17 00:58:06.442 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:06.442 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [79, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.442 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [79, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.442 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 79.1
2025-06-17 00:58:06.448 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:06.448 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [79, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.448 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [79, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.448 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 79.2
2025-06-17 00:58:06.453 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:06.453 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [79, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.453 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [80, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.453 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 80
2025-06-17 00:58:06.458 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:06.459 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [80, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.459 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [80, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.459 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 80.1
2025-06-17 00:58:06.464 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:06.464 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [80, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.468 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [80, 1, 1, 0, 0, 0]
2025-06-17 00:58:06.469 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 80.1.1
2025-06-17 00:58:06.500 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:06.500 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [80, 1, 1, 0, 0, 0]
2025-06-17 00:58:06.500 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [80, 1, 2, 0, 0, 0]
2025-06-17 00:58:06.500 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 80.1.2
2025-06-17 00:58:06.531 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:06.531 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [80, 1, 2, 0, 0, 0]
2025-06-17 00:58:06.532 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [80, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.534 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 80.2
2025-06-17 00:58:06.551 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:06.551 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [80, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.551 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [81, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.551 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 81
2025-06-17 00:58:06.570 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:06.571 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [81, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.571 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [81, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.571 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 81.1
2025-06-17 00:58:06.577 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:06.578 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [81, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.578 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [81, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.579 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 81.2
2025-06-17 00:58:06.586 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:06.586 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [81, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.587 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [82, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.587 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 82
2025-06-17 00:58:06.593 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:06.593 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [82, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.593 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [82, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.593 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 82.1
2025-06-17 00:58:06.598 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:06.598 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [82, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.598 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [82, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.598 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 82.2
2025-06-17 00:58:06.604 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:06.604 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [82, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.604 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [83, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.604 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 83
2025-06-17 00:58:06.610 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:06.610 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [83, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.610 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [83, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.610 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 83.1
2025-06-17 00:58:06.614 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:06.616 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [83, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.616 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [83, 1, 1, 0, 0, 0]
2025-06-17 00:58:06.616 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 83.1.1
2025-06-17 00:58:06.620 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:06.620 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [83, 1, 1, 0, 0, 0]
2025-06-17 00:58:06.620 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [83, 1, 2, 0, 0, 0]
2025-06-17 00:58:06.620 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 83.1.2
2025-06-17 00:58:06.626 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:06.626 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [83, 1, 2, 0, 0, 0]
2025-06-17 00:58:06.626 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [83, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.626 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 83.2
2025-06-17 00:58:06.630 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:06.630 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [83, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.631 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [84, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.631 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 84
2025-06-17 00:58:06.637 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:06.637 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [84, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.637 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [84, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.637 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 84.1
2025-06-17 00:58:06.647 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:06.647 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [84, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.647 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [84, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.647 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 84.2
2025-06-17 00:58:06.655 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:06.656 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [84, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.656 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [85, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.656 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 85
2025-06-17 00:58:06.789 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:06.791 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [85, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.791 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [85, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.792 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 85.1
2025-06-17 00:58:06.813 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:06.813 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [85, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.813 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [85, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.813 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 85.2
2025-06-17 00:58:06.830 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:06.831 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [85, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.831 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [86, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.832 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 86
2025-06-17 00:58:06.865 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:06.866 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [86, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.866 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [86, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.866 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 86.1
2025-06-17 00:58:06.883 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:06.883 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [86, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.883 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [86, 1, 1, 0, 0, 0]
2025-06-17 00:58:06.883 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 86.1.1
2025-06-17 00:58:06.891 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:06.891 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [86, 1, 1, 0, 0, 0]
2025-06-17 00:58:06.892 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [86, 1, 2, 0, 0, 0]
2025-06-17 00:58:06.892 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 86.1.2
2025-06-17 00:58:06.902 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:06.902 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [86, 1, 2, 0, 0, 0]
2025-06-17 00:58:06.902 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [86, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.903 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 86.2
2025-06-17 00:58:06.914 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:06.914 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [86, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.914 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [87, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.914 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 87
2025-06-17 00:58:06.933 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:06.935 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [87, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.935 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [87, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.936 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 87.1
2025-06-17 00:58:06.966 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:06.966 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [87, 1, 0, 0, 0, 0]
2025-06-17 00:58:06.966 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [87, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.967 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 87.2
2025-06-17 00:58:06.977 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:06.979 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [87, 2, 0, 0, 0, 0]
2025-06-17 00:58:06.980 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [88, 0, 0, 0, 0, 0]
2025-06-17 00:58:06.980 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 88
2025-06-17 00:58:07.013 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:07.016 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [88, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.027 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [88, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.036 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 88.1
2025-06-17 00:58:07.087 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:07.087 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [88, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.088 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [88, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.088 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 88.2
2025-06-17 00:58:07.132 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:07.133 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [88, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.133 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [89, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.133 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 89
2025-06-17 00:58:07.142 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:07.143 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [89, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.143 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [89, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.143 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 89.1
2025-06-17 00:58:07.148 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:07.149 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [89, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.149 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [89, 1, 1, 0, 0, 0]
2025-06-17 00:58:07.149 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 89.1.1
2025-06-17 00:58:07.154 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:07.154 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [89, 1, 1, 0, 0, 0]
2025-06-17 00:58:07.154 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [89, 1, 2, 0, 0, 0]
2025-06-17 00:58:07.154 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 89.1.2
2025-06-17 00:58:07.160 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:07.160 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [89, 1, 2, 0, 0, 0]
2025-06-17 00:58:07.160 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [89, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.160 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 89.2
2025-06-17 00:58:07.166 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:07.166 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [89, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.166 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [90, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.166 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 90
2025-06-17 00:58:07.171 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:07.171 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [90, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.171 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [90, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.171 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 90.1
2025-06-17 00:58:07.177 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:07.177 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [90, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.177 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [90, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.177 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 90.2
2025-06-17 00:58:07.184 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:07.184 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [90, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.184 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [91, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.184 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 91
2025-06-17 00:58:07.190 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:07.190 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [91, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.190 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [91, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.190 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 91.1
2025-06-17 00:58:07.197 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:07.197 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [91, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.197 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [91, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.197 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 91.2
2025-06-17 00:58:07.213 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:07.214 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [91, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.214 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [92, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.214 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 92
2025-06-17 00:58:07.229 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:07.229 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [92, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.229 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [92, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.229 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 92.1
2025-06-17 00:58:07.242 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:07.246 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [92, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.246 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [92, 1, 1, 0, 0, 0]
2025-06-17 00:58:07.246 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 92.1.1
2025-06-17 00:58:07.265 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:07.265 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [92, 1, 1, 0, 0, 0]
2025-06-17 00:58:07.265 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [92, 1, 2, 0, 0, 0]
2025-06-17 00:58:07.265 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 92.1.2
2025-06-17 00:58:07.273 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:07.279 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [92, 1, 2, 0, 0, 0]
2025-06-17 00:58:07.281 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [92, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.281 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 92.2
2025-06-17 00:58:07.309 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:07.309 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [92, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.309 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [93, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.309 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 93
2025-06-17 00:58:07.316 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:07.317 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [93, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.317 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [93, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.317 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 93.1
2025-06-17 00:58:07.328 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:07.328 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [93, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.328 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [93, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.328 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 93.2
2025-06-17 00:58:07.336 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:07.336 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [93, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.336 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [94, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.336 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 94
2025-06-17 00:58:07.343 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:07.343 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [94, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.343 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [94, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.344 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 94.1
2025-06-17 00:58:07.356 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:07.356 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [94, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.356 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [94, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.356 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 94.2
2025-06-17 00:58:07.366 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:07.366 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [94, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.366 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [95, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.366 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 95
2025-06-17 00:58:07.375 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:07.375 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [95, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.375 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [95, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.375 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 95.1
2025-06-17 00:58:07.381 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:07.382 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [95, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.382 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [95, 1, 1, 0, 0, 0]
2025-06-17 00:58:07.382 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 95.1.1
2025-06-17 00:58:07.388 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:07.388 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [95, 1, 1, 0, 0, 0]
2025-06-17 00:58:07.388 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [95, 1, 2, 0, 0, 0]
2025-06-17 00:58:07.388 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 95.1.2
2025-06-17 00:58:07.393 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:07.395 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [95, 1, 2, 0, 0, 0]
2025-06-17 00:58:07.395 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [95, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.395 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 95.2
2025-06-17 00:58:07.400 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:07.400 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [95, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.400 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [96, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.400 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 96
2025-06-17 00:58:07.406 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:07.406 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [96, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.406 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [96, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.406 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 96.1
2025-06-17 00:58:07.431 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:07.431 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [96, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.431 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [96, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.431 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 96.2
2025-06-17 00:58:07.458 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:07.459 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [96, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.459 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [97, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.459 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 97
2025-06-17 00:58:07.466 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:07.466 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [97, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.466 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [97, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.466 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 97.1
2025-06-17 00:58:07.475 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:07.475 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [97, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.476 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [97, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.476 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 97.2
2025-06-17 00:58:07.486 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:07.487 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [97, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.487 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [98, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.487 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 98
2025-06-17 00:58:07.498 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:07.498 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [98, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.498 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [98, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.498 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 98.1
2025-06-17 00:58:07.507 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:07.507 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [98, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.507 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [98, 1, 1, 0, 0, 0]
2025-06-17 00:58:07.507 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 98.1.1
2025-06-17 00:58:07.513 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:07.513 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [98, 1, 1, 0, 0, 0]
2025-06-17 00:58:07.513 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [98, 1, 2, 0, 0, 0]
2025-06-17 00:58:07.513 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 98.1.2
2025-06-17 00:58:07.522 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:07.523 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [98, 1, 2, 0, 0, 0]
2025-06-17 00:58:07.523 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [98, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.523 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 98.2
2025-06-17 00:58:07.538 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:07.538 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [98, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.539 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [99, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.539 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 99
2025-06-17 00:58:07.547 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:07.547 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [99, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.547 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [99, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.547 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 99.1
2025-06-17 00:58:07.554 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:07.555 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [99, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.555 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [99, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.555 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 99.2
2025-06-17 00:58:07.563 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:07.563 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [99, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.563 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [100, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.563 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 100
2025-06-17 00:58:07.582 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:07.582 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [100, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.582 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [100, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.583 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 100.1
2025-06-17 00:58:07.606 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:07.607 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [100, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.608 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [100, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.608 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 100.2
2025-06-17 00:58:07.617 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:07.618 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [100, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.618 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [101, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.618 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 101
2025-06-17 00:58:07.628 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:07.628 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [101, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.628 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [101, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.628 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 101.1
2025-06-17 00:58:07.636 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:07.636 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [101, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.636 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [101, 1, 1, 0, 0, 0]
2025-06-17 00:58:07.636 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 101.1.1
2025-06-17 00:58:07.647 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:07.647 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [101, 1, 1, 0, 0, 0]
2025-06-17 00:58:07.647 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [101, 1, 2, 0, 0, 0]
2025-06-17 00:58:07.647 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 101.1.2
2025-06-17 00:58:07.659 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:07.661 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [101, 1, 2, 0, 0, 0]
2025-06-17 00:58:07.661 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [101, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.665 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 101.2
2025-06-17 00:58:07.685 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:07.685 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [101, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.685 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [102, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.685 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 102
2025-06-17 00:58:07.698 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:07.698 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [102, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.698 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [102, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.698 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 102.1
2025-06-17 00:58:07.710 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:07.712 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [102, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.713 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [102, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.713 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 102.2
2025-06-17 00:58:07.733 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:07.733 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [102, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.733 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [103, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.733 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 103
2025-06-17 00:58:07.743 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:07.743 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [103, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.743 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [103, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.743 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 103.1
2025-06-17 00:58:07.753 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:07.753 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [103, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.753 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [103, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.753 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 103.2
2025-06-17 00:58:07.761 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:07.761 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [103, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.761 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [104, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.763 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 104
2025-06-17 00:58:07.769 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:07.769 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [104, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.769 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [104, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.769 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 104.1
2025-06-17 00:58:07.777 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:07.777 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [104, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.777 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [104, 1, 1, 0, 0, 0]
2025-06-17 00:58:07.777 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 104.1.1
2025-06-17 00:58:07.783 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:07.783 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [104, 1, 1, 0, 0, 0]
2025-06-17 00:58:07.783 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [104, 1, 2, 0, 0, 0]
2025-06-17 00:58:07.783 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 104.1.2
2025-06-17 00:58:07.792 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:07.792 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [104, 1, 2, 0, 0, 0]
2025-06-17 00:58:07.792 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [104, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.792 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 104.2
2025-06-17 00:58:07.800 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:07.800 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [104, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.800 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [105, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.800 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 105
2025-06-17 00:58:07.808 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:07.808 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [105, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.808 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [105, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.808 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 105.1
2025-06-17 00:58:07.815 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:07.815 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [105, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.815 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [105, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.815 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 105.2
2025-06-17 00:58:07.825 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:07.826 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [105, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.826 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [106, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.826 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 106
2025-06-17 00:58:07.833 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:07.833 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [106, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.834 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [106, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.834 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 106.1
2025-06-17 00:58:07.841 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:07.841 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [106, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.841 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [106, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.841 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 106.2
2025-06-17 00:58:07.848 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:07.848 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [106, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.848 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [107, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.848 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 107
2025-06-17 00:58:07.860 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:07.860 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [107, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.860 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [107, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.860 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 107.1
2025-06-17 00:58:07.867 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:07.867 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [107, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.867 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [107, 1, 1, 0, 0, 0]
2025-06-17 00:58:07.867 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 107.1.1
2025-06-17 00:58:07.873 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:07.875 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [107, 1, 1, 0, 0, 0]
2025-06-17 00:58:07.875 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [107, 1, 2, 0, 0, 0]
2025-06-17 00:58:07.875 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 107.1.2
2025-06-17 00:58:07.883 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:07.885 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [107, 1, 2, 0, 0, 0]
2025-06-17 00:58:07.885 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [107, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.885 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 107.2
2025-06-17 00:58:07.892 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:07.892 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [107, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.892 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [108, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.892 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 108
2025-06-17 00:58:07.907 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:07.908 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [108, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.908 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [108, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.908 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 108.1
2025-06-17 00:58:07.917 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:07.918 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [108, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.918 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [108, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.918 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 108.2
2025-06-17 00:58:07.924 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:07.924 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [108, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.924 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [109, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.924 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 109
2025-06-17 00:58:07.931 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:07.931 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [109, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.931 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [109, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.931 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 109.1
2025-06-17 00:58:07.937 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:07.938 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [109, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.938 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [109, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.938 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 109.2
2025-06-17 00:58:07.945 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:07.945 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [109, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.945 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [110, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.945 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 110
2025-06-17 00:58:07.952 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:07.952 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [110, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.952 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [110, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.952 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 110.1
2025-06-17 00:58:07.961 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:07.961 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [110, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.962 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [110, 1, 1, 0, 0, 0]
2025-06-17 00:58:07.962 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 110.1.1
2025-06-17 00:58:07.969 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:07.970 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [110, 1, 1, 0, 0, 0]
2025-06-17 00:58:07.970 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [110, 1, 2, 0, 0, 0]
2025-06-17 00:58:07.970 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 110.1.2
2025-06-17 00:58:07.977 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:07.977 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [110, 1, 2, 0, 0, 0]
2025-06-17 00:58:07.977 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [110, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.977 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 110.2
2025-06-17 00:58:07.986 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:07.987 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [110, 2, 0, 0, 0, 0]
2025-06-17 00:58:07.987 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [111, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.987 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 111
2025-06-17 00:58:07.998 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:07.999 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [111, 0, 0, 0, 0, 0]
2025-06-17 00:58:07.999 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [111, 1, 0, 0, 0, 0]
2025-06-17 00:58:07.999 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 111.1
2025-06-17 00:58:08.019 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:08.019 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [111, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.019 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [111, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.019 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 111.2
2025-06-17 00:58:08.027 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:08.028 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [111, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.028 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [112, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.028 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 112
2025-06-17 00:58:08.037 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:08.037 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [112, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.037 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [112, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.037 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 112.1
2025-06-17 00:58:08.043 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:08.043 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [112, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.043 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [112, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.043 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 112.2
2025-06-17 00:58:08.055 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:08.056 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [112, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.056 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [113, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.056 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 113
2025-06-17 00:58:08.068 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:08.070 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [113, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.070 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [113, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.070 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 113.1
2025-06-17 00:58:08.080 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:08.080 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [113, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.080 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [113, 1, 1, 0, 0, 0]
2025-06-17 00:58:08.080 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 113.1.1
2025-06-17 00:58:08.092 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:08.092 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [113, 1, 1, 0, 0, 0]
2025-06-17 00:58:08.092 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [113, 1, 2, 0, 0, 0]
2025-06-17 00:58:08.092 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 113.1.2
2025-06-17 00:58:08.108 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:08.108 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [113, 1, 2, 0, 0, 0]
2025-06-17 00:58:08.108 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [113, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.108 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 113.2
2025-06-17 00:58:08.119 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:08.119 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [113, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.120 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [114, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.120 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 114
2025-06-17 00:58:08.130 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:08.130 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [114, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.130 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [114, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.130 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 114.1
2025-06-17 00:58:08.138 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:08.138 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [114, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.138 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [114, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.138 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 114.2
2025-06-17 00:58:08.153 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:08.153 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [114, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.153 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [115, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.153 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 115
2025-06-17 00:58:08.164 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:08.164 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [115, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.164 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [115, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.164 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 115.1
2025-06-17 00:58:08.171 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:08.171 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [115, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.171 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [115, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.171 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 115.2
2025-06-17 00:58:08.183 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:08.184 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [115, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.185 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [116, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.185 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 116
2025-06-17 00:58:08.194 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:08.195 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [116, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.195 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [116, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.195 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 116.1
2025-06-17 00:58:08.205 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:08.205 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [116, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.205 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [116, 1, 1, 0, 0, 0]
2025-06-17 00:58:08.205 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 116.1.1
2025-06-17 00:58:08.215 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:08.215 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [116, 1, 1, 0, 0, 0]
2025-06-17 00:58:08.215 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [116, 1, 2, 0, 0, 0]
2025-06-17 00:58:08.215 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 116.1.2
2025-06-17 00:58:08.223 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:08.223 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [116, 1, 2, 0, 0, 0]
2025-06-17 00:58:08.223 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [116, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.225 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 116.2
2025-06-17 00:58:08.236 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:08.236 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [116, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.236 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [117, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.236 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 117
2025-06-17 00:58:08.251 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:08.251 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [117, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.253 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [117, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.253 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 117.1
2025-06-17 00:58:08.261 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:08.262 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [117, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.262 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [117, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.262 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 117.2
2025-06-17 00:58:08.269 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:08.269 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [117, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.270 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [118, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.270 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 118
2025-06-17 00:58:08.278 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:08.278 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [118, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.278 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [118, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.278 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 118.1
2025-06-17 00:58:08.286 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:08.287 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [118, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.287 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [118, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.287 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 118.2
2025-06-17 00:58:08.295 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:08.295 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [118, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.295 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [119, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.295 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 119
2025-06-17 00:58:08.303 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:08.303 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [119, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.303 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [119, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.303 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 119.1
2025-06-17 00:58:08.313 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:08.313 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [119, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.313 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [119, 1, 1, 0, 0, 0]
2025-06-17 00:58:08.313 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 119.1.1
2025-06-17 00:58:08.319 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:08.319 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [119, 1, 1, 0, 0, 0]
2025-06-17 00:58:08.319 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [119, 1, 2, 0, 0, 0]
2025-06-17 00:58:08.319 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 119.1.2
2025-06-17 00:58:08.326 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:08.327 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [119, 1, 2, 0, 0, 0]
2025-06-17 00:58:08.327 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [119, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.327 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 119.2
2025-06-17 00:58:08.334 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:08.334 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [119, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.334 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [120, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.334 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 120
2025-06-17 00:58:08.341 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:08.342 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [120, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.343 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [120, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.343 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 120.1
2025-06-17 00:58:08.351 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:08.352 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [120, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.352 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [120, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.352 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 120.2
2025-06-17 00:58:08.359 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:08.360 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [120, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.360 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [121, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.360 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 121
2025-06-17 00:58:08.369 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:08.370 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [121, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.370 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [121, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.370 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 121.1
2025-06-17 00:58:08.378 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:08.379 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [121, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.379 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [121, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.379 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 121.2
2025-06-17 00:58:08.387 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:08.387 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [121, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.387 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [122, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.387 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 122
2025-06-17 00:58:08.400 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:08.400 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [122, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.401 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [122, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.401 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 122.1
2025-06-17 00:58:08.409 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:08.410 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [122, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.410 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [122, 1, 1, 0, 0, 0]
2025-06-17 00:58:08.410 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 122.1.1
2025-06-17 00:58:08.420 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:08.420 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [122, 1, 1, 0, 0, 0]
2025-06-17 00:58:08.420 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [122, 1, 2, 0, 0, 0]
2025-06-17 00:58:08.420 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 122.1.2
2025-06-17 00:58:08.431 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:08.431 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [122, 1, 2, 0, 0, 0]
2025-06-17 00:58:08.431 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [122, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.431 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 122.2
2025-06-17 00:58:08.441 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:08.441 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [122, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.442 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [123, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.442 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 123
2025-06-17 00:58:08.455 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:08.456 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [123, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.456 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [123, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.456 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 123.1
2025-06-17 00:58:08.466 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:08.466 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [123, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.466 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [123, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.466 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 123.2
2025-06-17 00:58:08.476 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:08.476 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [123, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.476 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [124, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.476 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 124
2025-06-17 00:58:08.485 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:08.486 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [124, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.486 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [124, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.486 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 124.1
2025-06-17 00:58:08.494 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:08.495 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [124, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.496 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [124, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.496 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 124.2
2025-06-17 00:58:08.506 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:08.506 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [124, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.507 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [125, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.507 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 125
2025-06-17 00:58:08.518 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:08.518 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [125, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.518 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [125, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.518 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 125.1
2025-06-17 00:58:08.531 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:08.531 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [125, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.531 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [125, 1, 1, 0, 0, 0]
2025-06-17 00:58:08.531 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 125.1.1
2025-06-17 00:58:08.550 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:08.552 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [125, 1, 1, 0, 0, 0]
2025-06-17 00:58:08.552 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [125, 1, 2, 0, 0, 0]
2025-06-17 00:58:08.552 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 125.1.2
2025-06-17 00:58:08.562 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:08.562 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [125, 1, 2, 0, 0, 0]
2025-06-17 00:58:08.563 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [125, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.563 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 125.2
2025-06-17 00:58:08.574 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:08.575 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [125, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.575 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [126, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.575 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 126
2025-06-17 00:58:08.585 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:08.585 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [126, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.585 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [126, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.585 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 126.1
2025-06-17 00:58:08.596 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:08.596 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [126, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.596 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [126, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.596 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 126.2
2025-06-17 00:58:08.609 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:08.613 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [126, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.614 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [127, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.614 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 127
2025-06-17 00:58:08.621 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:08.622 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [127, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.622 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [127, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.622 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 127.1
2025-06-17 00:58:08.633 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:08.633 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [127, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.633 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [127, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.633 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 127.2
2025-06-17 00:58:08.644 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:08.644 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [127, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.644 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [128, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.644 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 128
2025-06-17 00:58:08.653 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:08.654 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [128, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.655 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [128, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.655 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 128.1
2025-06-17 00:58:08.669 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:08.669 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [128, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.669 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [128, 1, 1, 0, 0, 0]
2025-06-17 00:58:08.669 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 128.1.1
2025-06-17 00:58:08.679 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:08.679 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [128, 1, 1, 0, 0, 0]
2025-06-17 00:58:08.679 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [128, 1, 2, 0, 0, 0]
2025-06-17 00:58:08.679 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 128.1.2
2025-06-17 00:58:08.690 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:08.691 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [128, 1, 2, 0, 0, 0]
2025-06-17 00:58:08.691 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [128, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.691 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 128.2
2025-06-17 00:58:08.701 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:08.701 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [128, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.701 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [129, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.702 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 129
2025-06-17 00:58:08.711 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:08.711 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [129, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.712 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [129, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.712 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 129.1
2025-06-17 00:58:08.723 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:08.723 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [129, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.724 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [129, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.724 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 129.2
2025-06-17 00:58:08.737 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:08.737 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [129, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.737 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [130, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.737 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 130
2025-06-17 00:58:08.749 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:08.750 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [130, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.750 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [130, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.750 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 130.1
2025-06-17 00:58:08.763 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:08.763 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [130, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.763 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [130, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.765 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 130.2
2025-06-17 00:58:08.776 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:08.776 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [130, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.776 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [131, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.776 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 131
2025-06-17 00:58:08.787 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:08.787 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [131, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.787 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [131, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.788 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 131.1
2025-06-17 00:58:08.799 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:08.799 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [131, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.799 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [131, 1, 1, 0, 0, 0]
2025-06-17 00:58:08.799 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 131.1.1
2025-06-17 00:58:08.808 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:08.809 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [131, 1, 1, 0, 0, 0]
2025-06-17 00:58:08.809 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [131, 1, 2, 0, 0, 0]
2025-06-17 00:58:08.809 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 131.1.2
2025-06-17 00:58:08.818 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:08.818 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [131, 1, 2, 0, 0, 0]
2025-06-17 00:58:08.818 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [131, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.818 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 131.2
2025-06-17 00:58:08.827 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:08.827 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [131, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.827 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [132, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.827 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 132
2025-06-17 00:58:08.837 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:08.837 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [132, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.837 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [132, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.837 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 132.1
2025-06-17 00:58:08.845 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:08.846 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [132, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.846 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [132, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.846 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 132.2
2025-06-17 00:58:08.854 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:08.854 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [132, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.854 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [133, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.854 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 133
2025-06-17 00:58:08.864 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:08.864 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [133, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.864 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [133, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.864 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 133.1
2025-06-17 00:58:08.873 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:08.873 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [133, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.873 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [133, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.873 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 133.2
2025-06-17 00:58:08.883 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:08.883 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [133, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.883 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [134, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.883 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 134
2025-06-17 00:58:08.895 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:08.895 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [134, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.895 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [134, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.895 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 134.1
2025-06-17 00:58:08.903 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:08.903 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [134, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.903 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [134, 1, 1, 0, 0, 0]
2025-06-17 00:58:08.903 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 134.1.1
2025-06-17 00:58:08.912 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:08.912 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [134, 1, 1, 0, 0, 0]
2025-06-17 00:58:08.912 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [134, 1, 2, 0, 0, 0]
2025-06-17 00:58:08.912 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 134.1.2
2025-06-17 00:58:08.922 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:08.922 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [134, 1, 2, 0, 0, 0]
2025-06-17 00:58:08.922 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [134, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.922 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 134.2
2025-06-17 00:58:08.932 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:08.932 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [134, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.933 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [135, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.933 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 135
2025-06-17 00:58:08.941 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:08.941 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [135, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.941 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [135, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.941 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 135.1
2025-06-17 00:58:08.949 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:08.950 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [135, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.950 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [135, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.950 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 135.2
2025-06-17 00:58:08.958 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:08.958 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [135, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.958 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [136, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.958 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 136
2025-06-17 00:58:08.966 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:08.966 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [136, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.966 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [136, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.966 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 136.1
2025-06-17 00:58:08.974 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:08.974 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [136, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.974 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [136, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.974 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 136.2
2025-06-17 00:58:08.983 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:08.983 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [136, 2, 0, 0, 0, 0]
2025-06-17 00:58:08.983 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [137, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.983 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 137
2025-06-17 00:58:08.992 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:08.992 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [137, 0, 0, 0, 0, 0]
2025-06-17 00:58:08.992 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [137, 1, 0, 0, 0, 0]
2025-06-17 00:58:08.992 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 137.1
2025-06-17 00:58:08.999 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:09.000 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [137, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.000 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [137, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.000 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 137.1.1
2025-06-17 00:58:09.007 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:09.007 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [137, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.008 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [137, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.008 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 137.1.2
2025-06-17 00:58:09.016 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:09.016 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [137, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.016 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [137, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.016 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 137.2
2025-06-17 00:58:09.027 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:09.027 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [137, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.027 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [138, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.027 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 138
2025-06-17 00:58:09.033 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:09.033 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [138, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.033 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [138, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.033 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 138.1
2025-06-17 00:58:09.041 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:09.041 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [138, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.041 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [138, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.041 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 138.2
2025-06-17 00:58:09.050 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:09.050 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [138, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.050 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [139, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.050 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 139
2025-06-17 00:58:09.059 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:09.059 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [139, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.059 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [139, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.059 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 139.1
2025-06-17 00:58:09.075 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:09.075 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [139, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.075 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [139, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.075 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 139.2
2025-06-17 00:58:09.088 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:09.088 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [139, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.088 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [140, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.089 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 140
2025-06-17 00:58:09.101 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:09.101 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [140, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.101 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [140, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.101 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 140.1
2025-06-17 00:58:09.112 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:09.112 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [140, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.112 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [140, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.112 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 140.1.1
2025-06-17 00:58:09.123 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:09.123 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [140, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.123 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [140, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.123 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 140.1.2
2025-06-17 00:58:09.134 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:09.134 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [140, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.134 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [140, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.134 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 140.2
2025-06-17 00:58:09.140 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:09.141 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [140, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.141 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [141, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.141 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 141
2025-06-17 00:58:09.150 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:09.150 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [141, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.150 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [141, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.150 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 141.1
2025-06-17 00:58:09.156 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:09.156 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [141, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.156 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [141, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.156 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 141.2
2025-06-17 00:58:09.163 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:09.163 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [141, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.163 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [142, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.163 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 142
2025-06-17 00:58:09.170 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:09.170 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [142, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.170 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [142, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.170 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 142.1
2025-06-17 00:58:09.176 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:09.176 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [142, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.176 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [142, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.176 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 142.2
2025-06-17 00:58:09.183 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:09.183 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [142, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.183 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [143, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.183 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 143
2025-06-17 00:58:09.191 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:09.191 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [143, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.192 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [143, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.192 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 143.1
2025-06-17 00:58:09.201 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:09.201 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [143, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.201 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [143, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.201 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 143.1.1
2025-06-17 00:58:09.209 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:09.209 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [143, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.209 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [143, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.209 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 143.1.2
2025-06-17 00:58:09.216 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:09.217 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [143, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.217 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [143, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.217 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 143.2
2025-06-17 00:58:09.223 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:09.223 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [143, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.223 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [144, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.223 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 144
2025-06-17 00:58:09.231 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:09.231 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [144, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.231 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [144, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.231 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 144.1
2025-06-17 00:58:09.237 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:09.238 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [144, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.238 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [144, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.238 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 144.2
2025-06-17 00:58:09.247 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:09.247 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [144, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.247 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [145, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.248 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 145
2025-06-17 00:58:09.256 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:09.256 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [145, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.256 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [145, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.256 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 145.1
2025-06-17 00:58:09.263 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:09.263 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [145, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.263 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [145, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.263 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 145.2
2025-06-17 00:58:09.275 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:09.275 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [145, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.275 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [146, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.275 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 146
2025-06-17 00:58:09.284 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:09.284 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [146, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.284 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [146, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.284 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 146.1
2025-06-17 00:58:09.291 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:09.292 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [146, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.292 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [146, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.292 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 146.1.1
2025-06-17 00:58:09.299 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:09.299 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [146, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.299 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [146, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.299 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 146.1.2
2025-06-17 00:58:09.307 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:09.307 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [146, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.307 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [146, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.307 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 146.2
2025-06-17 00:58:09.313 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:09.313 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [146, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.313 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [147, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.313 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 147
2025-06-17 00:58:09.319 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:09.319 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [147, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.319 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [147, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.319 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 147.1
2025-06-17 00:58:09.325 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:09.325 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [147, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.325 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [147, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.325 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 147.2
2025-06-17 00:58:09.333 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:09.333 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [147, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.333 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [148, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.333 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 148
2025-06-17 00:58:09.339 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:09.339 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [148, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.339 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [148, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.339 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 148.1
2025-06-17 00:58:09.349 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:09.349 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [148, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.349 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [148, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.349 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 148.2
2025-06-17 00:58:09.362 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:09.362 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [148, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.362 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [149, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.362 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 149
2025-06-17 00:58:09.368 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:09.368 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [149, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.368 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [149, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.368 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 149.1
2025-06-17 00:58:09.376 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:09.376 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [149, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.376 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [149, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.376 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 149.1.1
2025-06-17 00:58:09.385 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:09.385 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [149, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.385 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [149, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.385 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 149.1.2
2025-06-17 00:58:09.391 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:09.391 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [149, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.391 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [149, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.391 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 149.2
2025-06-17 00:58:09.399 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:09.399 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [149, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.399 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [150, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.399 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 150
2025-06-17 00:58:09.406 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:09.406 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [150, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.406 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [150, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.406 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 150.1
2025-06-17 00:58:09.412 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:09.412 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [150, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.412 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [150, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.412 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 150.2
2025-06-17 00:58:09.421 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:09.421 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [150, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.421 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [151, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.421 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 151
2025-06-17 00:58:09.433 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:09.434 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [151, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.434 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [151, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.434 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 151.1
2025-06-17 00:58:09.444 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:09.444 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [151, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.444 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [151, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.444 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 151.2
2025-06-17 00:58:09.455 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:09.455 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [151, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.455 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [152, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.455 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 152
2025-06-17 00:58:09.463 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:09.463 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [152, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.463 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [152, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.463 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 152.1
2025-06-17 00:58:09.474 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:09.474 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [152, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.474 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [152, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.474 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 152.1.1
2025-06-17 00:58:09.483 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:09.483 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [152, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.483 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [152, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.483 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 152.1.2
2025-06-17 00:58:09.491 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:09.492 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [152, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.492 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [152, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.492 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 152.2
2025-06-17 00:58:09.501 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:09.502 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [152, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.502 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [153, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.502 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 153
2025-06-17 00:58:09.512 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:09.512 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [153, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.512 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [153, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.512 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 153.1
2025-06-17 00:58:09.521 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:09.521 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [153, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.521 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [153, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.521 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 153.2
2025-06-17 00:58:09.527 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:09.527 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [153, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.527 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [154, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.527 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 154
2025-06-17 00:58:09.536 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:09.536 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [154, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.536 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [154, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.536 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 154.1
2025-06-17 00:58:09.541 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:09.541 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [154, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.542 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [154, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.542 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 154.2
2025-06-17 00:58:09.555 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:09.555 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [154, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.555 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [155, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.555 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 155
2025-06-17 00:58:09.561 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:09.561 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [155, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.561 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [155, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.561 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 155.1
2025-06-17 00:58:09.567 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:09.567 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [155, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.567 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [155, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.567 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 155.1.1
2025-06-17 00:58:09.575 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:09.576 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [155, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.576 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [155, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.576 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 155.1.2
2025-06-17 00:58:09.586 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:09.586 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [155, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.586 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [155, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.586 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 155.2
2025-06-17 00:58:09.594 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:09.594 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [155, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.595 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [156, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.595 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 156
2025-06-17 00:58:09.607 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:09.607 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [156, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.607 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [156, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.607 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 156.1
2025-06-17 00:58:09.620 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:09.620 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [156, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.621 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [156, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.621 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 156.2
2025-06-17 00:58:09.630 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:09.630 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [156, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.630 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [157, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.630 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 157
2025-06-17 00:58:09.644 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:09.644 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [157, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.644 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [157, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.644 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 157.1
2025-06-17 00:58:09.650 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:09.650 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [157, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.650 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [157, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.650 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 157.2
2025-06-17 00:58:09.662 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:09.662 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [157, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.662 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [158, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.662 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 158
2025-06-17 00:58:09.672 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:09.672 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [158, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.672 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [158, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.672 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 158.1
2025-06-17 00:58:09.685 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:09.685 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [158, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.685 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [158, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.685 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 158.1.1
2025-06-17 00:58:09.691 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:09.691 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [158, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.691 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [158, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.692 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 158.1.2
2025-06-17 00:58:09.703 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:09.703 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [158, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.703 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [158, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.703 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 158.2
2025-06-17 00:58:09.713 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:09.714 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [158, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.714 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [159, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.714 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 159
2025-06-17 00:58:09.721 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:09.721 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [159, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.721 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [159, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.721 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 159.1
2025-06-17 00:58:09.733 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:09.733 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [159, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.733 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [159, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.733 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 159.2
2025-06-17 00:58:09.746 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:09.747 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [159, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.747 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [160, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.747 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 160
2025-06-17 00:58:09.761 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:09.761 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [160, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.761 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [160, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.761 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 160.1
2025-06-17 00:58:09.770 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:09.770 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [160, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.770 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [160, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.770 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 160.2
2025-06-17 00:58:09.775 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:09.775 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [160, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.775 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [161, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.775 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 161
2025-06-17 00:58:09.783 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:09.783 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [161, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.783 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [161, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.783 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 161.1
2025-06-17 00:58:09.789 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:09.789 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [161, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.789 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [161, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.789 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 161.1.1
2025-06-17 00:58:09.795 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:09.796 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [161, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.796 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [161, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.796 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 161.1.2
2025-06-17 00:58:09.801 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:09.801 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [161, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.801 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [161, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.801 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 161.2
2025-06-17 00:58:09.814 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:09.814 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [161, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.814 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [162, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.816 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 162
2025-06-17 00:58:09.821 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:09.821 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [162, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.821 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [162, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.821 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 162.1
2025-06-17 00:58:09.831 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:09.832 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [162, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.832 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [162, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.832 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 162.2
2025-06-17 00:58:09.845 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:09.845 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [162, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.845 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [163, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.845 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 163
2025-06-17 00:58:09.858 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:09.858 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [163, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.858 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [163, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.858 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 163.1
2025-06-17 00:58:09.868 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:09.868 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [163, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.868 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [163, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.868 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 163.2
2025-06-17 00:58:09.880 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:09.880 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [163, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.880 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [164, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.880 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 164
2025-06-17 00:58:09.889 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:09.889 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [164, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.889 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [164, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.889 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 164.1
2025-06-17 00:58:09.898 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:09.899 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [164, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.899 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [164, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.899 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 164.1.1
2025-06-17 00:58:09.903 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:09.903 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [164, 1, 1, 0, 0, 0]
2025-06-17 00:58:09.903 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [164, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.903 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 164.1.2
2025-06-17 00:58:09.913 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:09.913 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [164, 1, 2, 0, 0, 0]
2025-06-17 00:58:09.913 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [164, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.913 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 164.2
2025-06-17 00:58:09.923 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:09.923 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [164, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.923 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [165, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.923 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 165
2025-06-17 00:58:09.934 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:09.934 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [165, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.934 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [165, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.934 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 165.1
2025-06-17 00:58:09.940 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:09.940 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [165, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.940 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [165, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.940 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 165.2
2025-06-17 00:58:09.954 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:09.954 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [165, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.954 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [166, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.954 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 166
2025-06-17 00:58:09.967 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:09.967 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [166, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.967 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [166, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.967 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 166.1
2025-06-17 00:58:09.980 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:09.980 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [166, 1, 0, 0, 0, 0]
2025-06-17 00:58:09.980 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [166, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.980 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 166.2
2025-06-17 00:58:09.992 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:09.993 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [166, 2, 0, 0, 0, 0]
2025-06-17 00:58:09.993 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [167, 0, 0, 0, 0, 0]
2025-06-17 00:58:09.993 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 167
2025-06-17 00:58:10.008 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:10.008 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [167, 0, 0, 0, 0, 0]
2025-06-17 00:58:10.008 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [167, 1, 0, 0, 0, 0]
2025-06-17 00:58:10.008 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 167.1
2025-06-17 00:58:10.021 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:10.021 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [167, 1, 0, 0, 0, 0]
2025-06-17 00:58:10.021 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [167, 1, 1, 0, 0, 0]
2025-06-17 00:58:10.021 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 167.1.1
2025-06-17 00:58:10.033 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:10.033 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [167, 1, 1, 0, 0, 0]
2025-06-17 00:58:10.033 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [167, 1, 2, 0, 0, 0]
2025-06-17 00:58:10.033 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 167.1.2
2025-06-17 00:58:10.046 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:10.046 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [167, 1, 2, 0, 0, 0]
2025-06-17 00:58:10.047 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [167, 2, 0, 0, 0, 0]
2025-06-17 00:58:10.047 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 167.2
2025-06-17 00:58:10.057 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:10.057 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [167, 2, 0, 0, 0, 0]
2025-06-17 00:58:10.057 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [168, 0, 0, 0, 0, 0]
2025-06-17 00:58:10.057 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 168
2025-06-17 00:58:10.072 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:10.072 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [168, 0, 0, 0, 0, 0]
2025-06-17 00:58:10.072 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [168, 1, 0, 0, 0, 0]
2025-06-17 00:58:10.072 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 168.1
2025-06-17 00:58:10.085 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:10.085 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [168, 1, 0, 0, 0, 0]
2025-06-17 00:58:10.085 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [168, 2, 0, 0, 0, 0]
2025-06-17 00:58:10.085 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 168.2
2025-06-17 00:58:10.094 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 00:58:10.096 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [168, 2, 0, 0, 0, 0]
2025-06-17 00:58:10.096 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [169, 0, 0, 0, 0, 0]
2025-06-17 00:58:10.096 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 169
2025-06-17 00:58:10.103 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.1 什么是人工智能？', level: 2
2025-06-17 00:58:10.103 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [169, 0, 0, 0, 0, 0]
2025-06-17 00:58:10.103 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [169, 1, 0, 0, 0, 0]
2025-06-17 00:58:10.103 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 169.1
2025-06-17 00:58:10.121 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '1.2 AI发展简史', level: 2
2025-06-17 00:58:10.122 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [169, 1, 0, 0, 0, 0]
2025-06-17 00:58:10.122 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [169, 2, 0, 0, 0, 0]
2025-06-17 00:58:10.122 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 169.2
2025-06-17 00:58:10.129 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 00:58:10.129 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [169, 2, 0, 0, 0, 0]
2025-06-17 00:58:10.129 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [170, 0, 0, 0, 0, 0]
2025-06-17 00:58:10.129 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 170
2025-06-17 00:58:10.139 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1 机器学习基础', level: 2
2025-06-17 00:58:10.139 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [170, 0, 0, 0, 0, 0]
2025-06-17 00:58:10.139 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [170, 1, 0, 0, 0, 0]
2025-06-17 00:58:10.139 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 170.1
2025-06-17 00:58:10.148 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.1 监督学习', level: 3
2025-06-17 00:58:10.148 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [170, 1, 0, 0, 0, 0]
2025-06-17 00:58:10.148 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [170, 1, 1, 0, 0, 0]
2025-06-17 00:58:10.148 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 170.1.1
2025-06-17 00:58:10.159 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.1.2 无监督学习', level: 3
2025-06-17 00:58:10.159 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [170, 1, 1, 0, 0, 0]
2025-06-17 00:58:10.159 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [170, 1, 2, 0, 0, 0]
2025-06-17 00:58:10.159 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 170.1.2
2025-06-17 00:58:10.164 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '2.2 神经网络与深度学习', level: 2
2025-06-17 00:58:10.164 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [170, 1, 2, 0, 0, 0]
2025-06-17 00:58:10.164 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [170, 2, 0, 0, 0, 0]
2025-06-17 00:58:10.164 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 170.2
2025-06-17 00:58:10.175 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 00:58:10.175 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [170, 2, 0, 0, 0, 0]
2025-06-17 00:58:10.175 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [171, 0, 0, 0, 0, 0]
2025-06-17 00:58:10.175 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 171
2025-06-17 00:58:10.182 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.1 自然语言处理 (NLP)', level: 2
2025-06-17 00:58:10.182 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [171, 0, 0, 0, 0, 0]
2025-06-17 00:58:10.182 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [171, 1, 0, 0, 0, 0]
2025-06-17 00:58:10.182 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 171.1
2025-06-17 00:58:10.189 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 00:58:10.189 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [171, 1, 0, 0, 0, 0]
2025-06-17 00:58:10.189 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [171, 2, 0, 0, 0, 0]
2025-06-17 00:58:10.189 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 171.2
2025-06-17 00:58:10.198 [http-nio-8080-exec-9] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 627 ---
2025-06-17 00:58:10.209 [http-nio-8080-exec-9] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 00:58:10.211 [http-nio-8080-exec-9] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 00:58:10.259 [http-nio-8080-exec-9] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 11
2025-06-17 00:58:10.323 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.332 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==>  Preparing: INSERT INTO chapters ( course_id, chapter_key, level, title, content, sort_order, line_start, line_end, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-17 00:58:10.337 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 1(Integer), 0(Integer), 27(Integer), 2025-06-17T00:58:10.323598700(LocalDateTime), 2025-06-17T00:58:10.330665600(LocalDateTime)
2025-06-17 00:58:10.337 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.340 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T00:58:10.337524800(LocalDateTime), 2025-06-17T00:58:10.337524800(LocalDateTime)
2025-06-17 00:58:10.340 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.341 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T00:58:10.340524900(LocalDateTime), 2025-06-17T00:58:10.340524900(LocalDateTime)
2025-06-17 00:58:10.341 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.342 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 4(Integer), 28(Integer), 76(Integer), 2025-06-17T00:58:10.341526800(LocalDateTime), 2025-06-17T00:58:10.341526800(LocalDateTime)
2025-06-17 00:58:10.342 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.343 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T00:58:10.342525600(LocalDateTime), 2025-06-17T00:58:10.342525600(LocalDateTime)
2025-06-17 00:58:10.346 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.347 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T00:58:10.346583900(LocalDateTime), 2025-06-17T00:58:10.346583900(LocalDateTime)
2025-06-17 00:58:10.349 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.350 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T00:58:10.349594(LocalDateTime), 2025-06-17T00:58:10.349594(LocalDateTime)
2025-06-17 00:58:10.350 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.351 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T00:58:10.350596300(LocalDateTime), 2025-06-17T00:58:10.350596300(LocalDateTime)
2025-06-17 00:58:10.353 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.353 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 9(Integer), 77(Integer), 97(Integer), 2025-06-17T00:58:10.353102300(LocalDateTime), 2025-06-17T00:58:10.353102300(LocalDateTime)
2025-06-17 00:58:10.354 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.355 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T00:58:10.355114400(LocalDateTime), 2025-06-17T00:58:10.355114400(LocalDateTime)
2025-06-17 00:58:10.356 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.357 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T00:58:10.356639400(LocalDateTime), 2025-06-17T00:58:10.356639400(LocalDateTime)
2025-06-17 00:58:10.357 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.357 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 4(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 12(Integer), 98(Integer), 125(Integer), 2025-06-17T00:58:10.357654200(LocalDateTime), 2025-06-17T00:58:10.357654200(LocalDateTime)
2025-06-17 00:58:10.358 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.358 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 4.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 13(Integer), 102(Integer), 112(Integer), 2025-06-17T00:58:10.358653100(LocalDateTime), 2025-06-17T00:58:10.358653100(LocalDateTime)
2025-06-17 00:58:10.359 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.359 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 4.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 14(Integer), 113(Integer), 125(Integer), 2025-06-17T00:58:10.359652200(LocalDateTime), 2025-06-17T00:58:10.359652200(LocalDateTime)
2025-06-17 00:58:10.360 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.361 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 5(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 15(Integer), 126(Integer), 174(Integer), 2025-06-17T00:58:10.360650500(LocalDateTime), 2025-06-17T00:58:10.360650500(LocalDateTime)
2025-06-17 00:58:10.362 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.363 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 5.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 16(Integer), 130(Integer), 150(Integer), 2025-06-17T00:58:10.362650400(LocalDateTime), 2025-06-17T00:58:10.362650400(LocalDateTime)
2025-06-17 00:58:10.363 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.365 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 5.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 17(Integer), 134(Integer), 142(Integer), 2025-06-17T00:58:10.363650(LocalDateTime), 2025-06-17T00:58:10.363650(LocalDateTime)
2025-06-17 00:58:10.365 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.365 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 5.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 18(Integer), 143(Integer), 150(Integer), 2025-06-17T00:58:10.365214100(LocalDateTime), 2025-06-17T00:58:10.365214100(LocalDateTime)
2025-06-17 00:58:10.365 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.365 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 5.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 19(Integer), 151(Integer), 174(Integer), 2025-06-17T00:58:10.365214100(LocalDateTime), 2025-06-17T00:58:10.365214100(LocalDateTime)
2025-06-17 00:58:10.365 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.366 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 6(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 20(Integer), 175(Integer), 195(Integer), 2025-06-17T00:58:10.365214100(LocalDateTime), 2025-06-17T00:58:10.365214100(LocalDateTime)
2025-06-17 00:58:10.366 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.367 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 6.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 21(Integer), 179(Integer), 187(Integer), 2025-06-17T00:58:10.366725200(LocalDateTime), 2025-06-17T00:58:10.366725200(LocalDateTime)
2025-06-17 00:58:10.367 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.367 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 6.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 22(Integer), 188(Integer), 195(Integer), 2025-06-17T00:58:10.367743400(LocalDateTime), 2025-06-17T00:58:10.367743400(LocalDateTime)
2025-06-17 00:58:10.368 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.368 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 7(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 23(Integer), 196(Integer), 223(Integer), 2025-06-17T00:58:10.368740400(LocalDateTime), 2025-06-17T00:58:10.368740400(LocalDateTime)
2025-06-17 00:58:10.369 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.369 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 7.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 24(Integer), 200(Integer), 210(Integer), 2025-06-17T00:58:10.369742100(LocalDateTime), 2025-06-17T00:58:10.369742100(LocalDateTime)
2025-06-17 00:58:10.371 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.371 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 7.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 25(Integer), 211(Integer), 223(Integer), 2025-06-17T00:58:10.371740900(LocalDateTime), 2025-06-17T00:58:10.371740900(LocalDateTime)
2025-06-17 00:58:10.372 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.373 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 8(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 26(Integer), 224(Integer), 272(Integer), 2025-06-17T00:58:10.372738500(LocalDateTime), 2025-06-17T00:58:10.373739300(LocalDateTime)
2025-06-17 00:58:10.373 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.375 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 8.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 27(Integer), 228(Integer), 248(Integer), 2025-06-17T00:58:10.373739300(LocalDateTime), 2025-06-17T00:58:10.373739300(LocalDateTime)
2025-06-17 00:58:10.375 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.375 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 8.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 28(Integer), 232(Integer), 240(Integer), 2025-06-17T00:58:10.375251800(LocalDateTime), 2025-06-17T00:58:10.375251800(LocalDateTime)
2025-06-17 00:58:10.375 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.375 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 8.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 29(Integer), 241(Integer), 248(Integer), 2025-06-17T00:58:10.375251800(LocalDateTime), 2025-06-17T00:58:10.375251800(LocalDateTime)
2025-06-17 00:58:10.376 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.376 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 8.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 30(Integer), 249(Integer), 272(Integer), 2025-06-17T00:58:10.376266500(LocalDateTime), 2025-06-17T00:58:10.376266500(LocalDateTime)
2025-06-17 00:58:10.376 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.376 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 9(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 31(Integer), 273(Integer), 293(Integer), 2025-06-17T00:58:10.376266500(LocalDateTime), 2025-06-17T00:58:10.376780900(LocalDateTime)
2025-06-17 00:58:10.376 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.376 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 9.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 32(Integer), 277(Integer), 285(Integer), 2025-06-17T00:58:10.376780900(LocalDateTime), 2025-06-17T00:58:10.376780900(LocalDateTime)
2025-06-17 00:58:10.377 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.377 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 9.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 33(Integer), 286(Integer), 293(Integer), 2025-06-17T00:58:10.377795400(LocalDateTime), 2025-06-17T00:58:10.377795400(LocalDateTime)
2025-06-17 00:58:10.377 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.377 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 10(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 34(Integer), 294(Integer), 321(Integer), 2025-06-17T00:58:10.377795400(LocalDateTime), 2025-06-17T00:58:10.377795400(LocalDateTime)
2025-06-17 00:58:10.378 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.378 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 10.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 35(Integer), 298(Integer), 308(Integer), 2025-06-17T00:58:10.378793200(LocalDateTime), 2025-06-17T00:58:10.378793200(LocalDateTime)
2025-06-17 00:58:10.379 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.379 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 10.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 36(Integer), 309(Integer), 321(Integer), 2025-06-17T00:58:10.379792900(LocalDateTime), 2025-06-17T00:58:10.379792900(LocalDateTime)
2025-06-17 00:58:10.380 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.380 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 11(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 37(Integer), 322(Integer), 370(Integer), 2025-06-17T00:58:10.380794400(LocalDateTime), 2025-06-17T00:58:10.380794400(LocalDateTime)
2025-06-17 00:58:10.380 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.380 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 11.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 38(Integer), 326(Integer), 346(Integer), 2025-06-17T00:58:10.380794400(LocalDateTime), 2025-06-17T00:58:10.380794400(LocalDateTime)
2025-06-17 00:58:10.380 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.380 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 11.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 39(Integer), 330(Integer), 338(Integer), 2025-06-17T00:58:10.380794400(LocalDateTime), 2025-06-17T00:58:10.380794400(LocalDateTime)
2025-06-17 00:58:10.381 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.381 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 11.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 40(Integer), 339(Integer), 346(Integer), 2025-06-17T00:58:10.381790600(LocalDateTime), 2025-06-17T00:58:10.381790600(LocalDateTime)
2025-06-17 00:58:10.381 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.381 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 11.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 41(Integer), 347(Integer), 370(Integer), 2025-06-17T00:58:10.381790600(LocalDateTime), 2025-06-17T00:58:10.381790600(LocalDateTime)
2025-06-17 00:58:10.381 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.381 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 12(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 42(Integer), 371(Integer), 391(Integer), 2025-06-17T00:58:10.381790600(LocalDateTime), 2025-06-17T00:58:10.381790600(LocalDateTime)
2025-06-17 00:58:10.382 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.385 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 12.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 43(Integer), 375(Integer), 383(Integer), 2025-06-17T00:58:10.383790300(LocalDateTime), 2025-06-17T00:58:10.383790300(LocalDateTime)
2025-06-17 00:58:10.385 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.386 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 12.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 44(Integer), 384(Integer), 391(Integer), 2025-06-17T00:58:10.385419300(LocalDateTime), 2025-06-17T00:58:10.385419300(LocalDateTime)
2025-06-17 00:58:10.386 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.387 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 13(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 45(Integer), 392(Integer), 419(Integer), 2025-06-17T00:58:10.386816700(LocalDateTime), 2025-06-17T00:58:10.386816700(LocalDateTime)
2025-06-17 00:58:10.389 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.390 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 13.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 46(Integer), 396(Integer), 406(Integer), 2025-06-17T00:58:10.389823400(LocalDateTime), 2025-06-17T00:58:10.389823400(LocalDateTime)
2025-06-17 00:58:10.390 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.391 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 13.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 47(Integer), 407(Integer), 419(Integer), 2025-06-17T00:58:10.390827500(LocalDateTime), 2025-06-17T00:58:10.390827500(LocalDateTime)
2025-06-17 00:58:10.391 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.392 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 14(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 48(Integer), 420(Integer), 468(Integer), 2025-06-17T00:58:10.391829700(LocalDateTime), 2025-06-17T00:58:10.391829700(LocalDateTime)
2025-06-17 00:58:10.393 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.393 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 14.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 49(Integer), 424(Integer), 444(Integer), 2025-06-17T00:58:10.393825500(LocalDateTime), 2025-06-17T00:58:10.393825500(LocalDateTime)
2025-06-17 00:58:10.393 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.393 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 14.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 50(Integer), 428(Integer), 436(Integer), 2025-06-17T00:58:10.393825500(LocalDateTime), 2025-06-17T00:58:10.393825500(LocalDateTime)
2025-06-17 00:58:10.395 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.395 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 14.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 51(Integer), 437(Integer), 444(Integer), 2025-06-17T00:58:10.395334600(LocalDateTime), 2025-06-17T00:58:10.395334600(LocalDateTime)
2025-06-17 00:58:10.396 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.396 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 14.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 52(Integer), 445(Integer), 468(Integer), 2025-06-17T00:58:10.396347100(LocalDateTime), 2025-06-17T00:58:10.396347100(LocalDateTime)
2025-06-17 00:58:10.396 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.396 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 15(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 53(Integer), 469(Integer), 489(Integer), 2025-06-17T00:58:10.396856500(LocalDateTime), 2025-06-17T00:58:10.396856500(LocalDateTime)
2025-06-17 00:58:10.397 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.397 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 15.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 54(Integer), 473(Integer), 481(Integer), 2025-06-17T00:58:10.397875(LocalDateTime), 2025-06-17T00:58:10.397875(LocalDateTime)
2025-06-17 00:58:10.397 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.397 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 15.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 55(Integer), 482(Integer), 489(Integer), 2025-06-17T00:58:10.397875(LocalDateTime), 2025-06-17T00:58:10.397875(LocalDateTime)
2025-06-17 00:58:10.397 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.398 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 16(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 56(Integer), 490(Integer), 517(Integer), 2025-06-17T00:58:10.397875(LocalDateTime), 2025-06-17T00:58:10.397875(LocalDateTime)
2025-06-17 00:58:10.398 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.398 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 16.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 57(Integer), 494(Integer), 504(Integer), 2025-06-17T00:58:10.398870500(LocalDateTime), 2025-06-17T00:58:10.398870500(LocalDateTime)
2025-06-17 00:58:10.398 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.398 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 16.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 58(Integer), 505(Integer), 517(Integer), 2025-06-17T00:58:10.398870500(LocalDateTime), 2025-06-17T00:58:10.398870500(LocalDateTime)
2025-06-17 00:58:10.399 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.399 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 17(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 59(Integer), 518(Integer), 566(Integer), 2025-06-17T00:58:10.399870200(LocalDateTime), 2025-06-17T00:58:10.399870200(LocalDateTime)
2025-06-17 00:58:10.399 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.399 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 17.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 60(Integer), 522(Integer), 542(Integer), 2025-06-17T00:58:10.399870200(LocalDateTime), 2025-06-17T00:58:10.399870200(LocalDateTime)
2025-06-17 00:58:10.400 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.401 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 17.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 61(Integer), 526(Integer), 534(Integer), 2025-06-17T00:58:10.400868100(LocalDateTime), 2025-06-17T00:58:10.400868100(LocalDateTime)
2025-06-17 00:58:10.401 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.401 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 17.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 62(Integer), 535(Integer), 542(Integer), 2025-06-17T00:58:10.401865900(LocalDateTime), 2025-06-17T00:58:10.401865900(LocalDateTime)
2025-06-17 00:58:10.401 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.402 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 17.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 63(Integer), 543(Integer), 566(Integer), 2025-06-17T00:58:10.401865900(LocalDateTime), 2025-06-17T00:58:10.401865900(LocalDateTime)
2025-06-17 00:58:10.402 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.402 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 18(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 64(Integer), 567(Integer), 587(Integer), 2025-06-17T00:58:10.402866400(LocalDateTime), 2025-06-17T00:58:10.402866400(LocalDateTime)
2025-06-17 00:58:10.403 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.403 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 18.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 65(Integer), 571(Integer), 579(Integer), 2025-06-17T00:58:10.403867400(LocalDateTime), 2025-06-17T00:58:10.403867400(LocalDateTime)
2025-06-17 00:58:10.403 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.403 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 18.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 66(Integer), 580(Integer), 587(Integer), 2025-06-17T00:58:10.403867400(LocalDateTime), 2025-06-17T00:58:10.403867400(LocalDateTime)
2025-06-17 00:58:10.403 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.403 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 19(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 67(Integer), 588(Integer), 615(Integer), 2025-06-17T00:58:10.403867400(LocalDateTime), 2025-06-17T00:58:10.403867400(LocalDateTime)
2025-06-17 00:58:10.405 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.405 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 19.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 68(Integer), 592(Integer), 602(Integer), 2025-06-17T00:58:10.405379400(LocalDateTime), 2025-06-17T00:58:10.405379400(LocalDateTime)
2025-06-17 00:58:10.405 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.405 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 19.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 69(Integer), 603(Integer), 615(Integer), 2025-06-17T00:58:10.405379400(LocalDateTime), 2025-06-17T00:58:10.405379400(LocalDateTime)
2025-06-17 00:58:10.406 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.406 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 20(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 70(Integer), 616(Integer), 664(Integer), 2025-06-17T00:58:10.406392800(LocalDateTime), 2025-06-17T00:58:10.406392800(LocalDateTime)
2025-06-17 00:58:10.406 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.406 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 20.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 71(Integer), 620(Integer), 640(Integer), 2025-06-17T00:58:10.406901800(LocalDateTime), 2025-06-17T00:58:10.406901800(LocalDateTime)
2025-06-17 00:58:10.406 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.407 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 20.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 72(Integer), 624(Integer), 632(Integer), 2025-06-17T00:58:10.406901800(LocalDateTime), 2025-06-17T00:58:10.406901800(LocalDateTime)
2025-06-17 00:58:10.407 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.408 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 20.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 73(Integer), 633(Integer), 640(Integer), 2025-06-17T00:58:10.407916200(LocalDateTime), 2025-06-17T00:58:10.407916200(LocalDateTime)
2025-06-17 00:58:10.409 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.409 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 20.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 74(Integer), 641(Integer), 664(Integer), 2025-06-17T00:58:10.409929400(LocalDateTime), 2025-06-17T00:58:10.409929400(LocalDateTime)
2025-06-17 00:58:10.410 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.411 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 21(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 75(Integer), 665(Integer), 685(Integer), 2025-06-17T00:58:10.411927800(LocalDateTime), 2025-06-17T00:58:10.411927800(LocalDateTime)
2025-06-17 00:58:10.412 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.412 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 21.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 76(Integer), 669(Integer), 677(Integer), 2025-06-17T00:58:10.412929700(LocalDateTime), 2025-06-17T00:58:10.412929700(LocalDateTime)
2025-06-17 00:58:10.413 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.413 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 21.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 77(Integer), 678(Integer), 685(Integer), 2025-06-17T00:58:10.413929200(LocalDateTime), 2025-06-17T00:58:10.413929200(LocalDateTime)
2025-06-17 00:58:10.414 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.414 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 22(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 78(Integer), 686(Integer), 713(Integer), 2025-06-17T00:58:10.414926900(LocalDateTime), 2025-06-17T00:58:10.414926900(LocalDateTime)
2025-06-17 00:58:10.416 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.416 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 22.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 79(Integer), 690(Integer), 700(Integer), 2025-06-17T00:58:10.416713200(LocalDateTime), 2025-06-17T00:58:10.416713200(LocalDateTime)
2025-06-17 00:58:10.417 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.417 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 22.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 80(Integer), 701(Integer), 713(Integer), 2025-06-17T00:58:10.417593600(LocalDateTime), 2025-06-17T00:58:10.417593600(LocalDateTime)
2025-06-17 00:58:10.417 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.418 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 23(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 81(Integer), 714(Integer), 762(Integer), 2025-06-17T00:58:10.417593600(LocalDateTime), 2025-06-17T00:58:10.418592100(LocalDateTime)
2025-06-17 00:58:10.418 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.418 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 23.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 82(Integer), 718(Integer), 738(Integer), 2025-06-17T00:58:10.418592100(LocalDateTime), 2025-06-17T00:58:10.418592100(LocalDateTime)
2025-06-17 00:58:10.419 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.419 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 23.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 83(Integer), 722(Integer), 730(Integer), 2025-06-17T00:58:10.419592200(LocalDateTime), 2025-06-17T00:58:10.419592200(LocalDateTime)
2025-06-17 00:58:10.419 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.420 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 23.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 84(Integer), 731(Integer), 738(Integer), 2025-06-17T00:58:10.419592200(LocalDateTime), 2025-06-17T00:58:10.420591200(LocalDateTime)
2025-06-17 00:58:10.420 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.421 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 23.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 85(Integer), 739(Integer), 762(Integer), 2025-06-17T00:58:10.420591200(LocalDateTime), 2025-06-17T00:58:10.420591200(LocalDateTime)
2025-06-17 00:58:10.422 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.423 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 24(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 86(Integer), 763(Integer), 783(Integer), 2025-06-17T00:58:10.422590300(LocalDateTime), 2025-06-17T00:58:10.423590900(LocalDateTime)
2025-06-17 00:58:10.423 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.425 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 24.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 87(Integer), 767(Integer), 775(Integer), 2025-06-17T00:58:10.425100700(LocalDateTime), 2025-06-17T00:58:10.425100700(LocalDateTime)
2025-06-17 00:58:10.425 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.425 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 24.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 88(Integer), 776(Integer), 783(Integer), 2025-06-17T00:58:10.425100700(LocalDateTime), 2025-06-17T00:58:10.425100700(LocalDateTime)
2025-06-17 00:58:10.425 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.425 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 25(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 89(Integer), 784(Integer), 811(Integer), 2025-06-17T00:58:10.425100700(LocalDateTime), 2025-06-17T00:58:10.425100700(LocalDateTime)
2025-06-17 00:58:10.426 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.426 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 25.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 90(Integer), 788(Integer), 798(Integer), 2025-06-17T00:58:10.426641200(LocalDateTime), 2025-06-17T00:58:10.426641200(LocalDateTime)
2025-06-17 00:58:10.426 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.427 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 25.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 91(Integer), 799(Integer), 811(Integer), 2025-06-17T00:58:10.426641200(LocalDateTime), 2025-06-17T00:58:10.426641200(LocalDateTime)
2025-06-17 00:58:10.427 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.428 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 26(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 92(Integer), 812(Integer), 860(Integer), 2025-06-17T00:58:10.427653200(LocalDateTime), 2025-06-17T00:58:10.427653200(LocalDateTime)
2025-06-17 00:58:10.428 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.429 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 26.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 93(Integer), 816(Integer), 836(Integer), 2025-06-17T00:58:10.428655300(LocalDateTime), 2025-06-17T00:58:10.428655300(LocalDateTime)
2025-06-17 00:58:10.429 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.430 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 26.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 94(Integer), 820(Integer), 828(Integer), 2025-06-17T00:58:10.429657700(LocalDateTime), 2025-06-17T00:58:10.430656(LocalDateTime)
2025-06-17 00:58:10.430 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.431 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 26.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 95(Integer), 829(Integer), 836(Integer), 2025-06-17T00:58:10.430656(LocalDateTime), 2025-06-17T00:58:10.431652800(LocalDateTime)
2025-06-17 00:58:10.431 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.431 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 26.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 96(Integer), 837(Integer), 860(Integer), 2025-06-17T00:58:10.431652800(LocalDateTime), 2025-06-17T00:58:10.431652800(LocalDateTime)
2025-06-17 00:58:10.432 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.432 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 27(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 97(Integer), 861(Integer), 881(Integer), 2025-06-17T00:58:10.432652400(LocalDateTime), 2025-06-17T00:58:10.432652400(LocalDateTime)
2025-06-17 00:58:10.432 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.432 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 27.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 98(Integer), 865(Integer), 873(Integer), 2025-06-17T00:58:10.432652400(LocalDateTime), 2025-06-17T00:58:10.432652400(LocalDateTime)
2025-06-17 00:58:10.433 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.435 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 27.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 99(Integer), 874(Integer), 881(Integer), 2025-06-17T00:58:10.433650600(LocalDateTime), 2025-06-17T00:58:10.433650600(LocalDateTime)
2025-06-17 00:58:10.435 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.436 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 28(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 100(Integer), 882(Integer), 909(Integer), 2025-06-17T00:58:10.435158200(LocalDateTime), 2025-06-17T00:58:10.435158200(LocalDateTime)
2025-06-17 00:58:10.436 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.437 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 28.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 101(Integer), 886(Integer), 896(Integer), 2025-06-17T00:58:10.436706100(LocalDateTime), 2025-06-17T00:58:10.437718800(LocalDateTime)
2025-06-17 00:58:10.437 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.438 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 28.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 102(Integer), 897(Integer), 909(Integer), 2025-06-17T00:58:10.438721300(LocalDateTime), 2025-06-17T00:58:10.438721300(LocalDateTime)
2025-06-17 00:58:10.438 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.438 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 29(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 103(Integer), 910(Integer), 958(Integer), 2025-06-17T00:58:10.438721300(LocalDateTime), 2025-06-17T00:58:10.438721300(LocalDateTime)
2025-06-17 00:58:10.439 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.439 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 29.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 104(Integer), 914(Integer), 934(Integer), 2025-06-17T00:58:10.439716500(LocalDateTime), 2025-06-17T00:58:10.439716500(LocalDateTime)
2025-06-17 00:58:10.440 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.441 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 29.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 105(Integer), 918(Integer), 926(Integer), 2025-06-17T00:58:10.441715200(LocalDateTime), 2025-06-17T00:58:10.441715200(LocalDateTime)
2025-06-17 00:58:10.442 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.443 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 29.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 106(Integer), 927(Integer), 934(Integer), 2025-06-17T00:58:10.442715400(LocalDateTime), 2025-06-17T00:58:10.442715400(LocalDateTime)
2025-06-17 00:58:10.443 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.445 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 29.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 107(Integer), 935(Integer), 958(Integer), 2025-06-17T00:58:10.443717200(LocalDateTime), 2025-06-17T00:58:10.443717200(LocalDateTime)
2025-06-17 00:58:10.445 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.445 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 30(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 108(Integer), 959(Integer), 979(Integer), 2025-06-17T00:58:10.445224800(LocalDateTime), 2025-06-17T00:58:10.445224800(LocalDateTime)
2025-06-17 00:58:10.446 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.446 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 30.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 109(Integer), 963(Integer), 971(Integer), 2025-06-17T00:58:10.446237100(LocalDateTime), 2025-06-17T00:58:10.446237100(LocalDateTime)
2025-06-17 00:58:10.446 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.446 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 30.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 110(Integer), 972(Integer), 979(Integer), 2025-06-17T00:58:10.446746(LocalDateTime), 2025-06-17T00:58:10.446746(LocalDateTime)
2025-06-17 00:58:10.447 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.447 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 31(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 111(Integer), 980(Integer), 1007(Integer), 2025-06-17T00:58:10.447758400(LocalDateTime), 2025-06-17T00:58:10.447758400(LocalDateTime)
2025-06-17 00:58:10.448 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.448 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 31.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 112(Integer), 984(Integer), 994(Integer), 2025-06-17T00:58:10.448774(LocalDateTime), 2025-06-17T00:58:10.448774(LocalDateTime)
2025-06-17 00:58:10.449 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.449 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 31.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 113(Integer), 995(Integer), 1007(Integer), 2025-06-17T00:58:10.449768400(LocalDateTime), 2025-06-17T00:58:10.449768400(LocalDateTime)
2025-06-17 00:58:10.450 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.450 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 32(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 114(Integer), 1008(Integer), 1056(Integer), 2025-06-17T00:58:10.450768600(LocalDateTime), 2025-06-17T00:58:10.450768600(LocalDateTime)
2025-06-17 00:58:10.450 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.451 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 32.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 115(Integer), 1012(Integer), 1032(Integer), 2025-06-17T00:58:10.450768600(LocalDateTime), 2025-06-17T00:58:10.450768600(LocalDateTime)
2025-06-17 00:58:10.451 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.451 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 32.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 116(Integer), 1016(Integer), 1024(Integer), 2025-06-17T00:58:10.451770200(LocalDateTime), 2025-06-17T00:58:10.451770200(LocalDateTime)
2025-06-17 00:58:10.451 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.451 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 32.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 117(Integer), 1025(Integer), 1032(Integer), 2025-06-17T00:58:10.451770200(LocalDateTime), 2025-06-17T00:58:10.451770200(LocalDateTime)
2025-06-17 00:58:10.451 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.453 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 32.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 118(Integer), 1033(Integer), 1056(Integer), 2025-06-17T00:58:10.451770200(LocalDateTime), 2025-06-17T00:58:10.451770200(LocalDateTime)
2025-06-17 00:58:10.453 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.453 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 33(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 119(Integer), 1057(Integer), 1077(Integer), 2025-06-17T00:58:10.453286600(LocalDateTime), 2025-06-17T00:58:10.453286600(LocalDateTime)
2025-06-17 00:58:10.453 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.454 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 33.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 120(Integer), 1061(Integer), 1069(Integer), 2025-06-17T00:58:10.453286600(LocalDateTime), 2025-06-17T00:58:10.453286600(LocalDateTime)
2025-06-17 00:58:10.454 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.454 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 33.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 121(Integer), 1070(Integer), 1077(Integer), 2025-06-17T00:58:10.454298400(LocalDateTime), 2025-06-17T00:58:10.454298400(LocalDateTime)
2025-06-17 00:58:10.454 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.454 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 34(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 122(Integer), 1078(Integer), 1105(Integer), 2025-06-17T00:58:10.454298400(LocalDateTime), 2025-06-17T00:58:10.454298400(LocalDateTime)
2025-06-17 00:58:10.455 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.455 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 34.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 123(Integer), 1082(Integer), 1092(Integer), 2025-06-17T00:58:10.455297600(LocalDateTime), 2025-06-17T00:58:10.455297600(LocalDateTime)
2025-06-17 00:58:10.455 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.455 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 34.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 124(Integer), 1093(Integer), 1105(Integer), 2025-06-17T00:58:10.455297600(LocalDateTime), 2025-06-17T00:58:10.455297600(LocalDateTime)
2025-06-17 00:58:10.455 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.456 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 35(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 125(Integer), 1106(Integer), 1154(Integer), 2025-06-17T00:58:10.456247300(LocalDateTime), 2025-06-17T00:58:10.456247300(LocalDateTime)
2025-06-17 00:58:10.456 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.456 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 35.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 126(Integer), 1110(Integer), 1130(Integer), 2025-06-17T00:58:10.456247300(LocalDateTime), 2025-06-17T00:58:10.456247300(LocalDateTime)
2025-06-17 00:58:10.457 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.457 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 35.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 127(Integer), 1114(Integer), 1122(Integer), 2025-06-17T00:58:10.457256600(LocalDateTime), 2025-06-17T00:58:10.457256600(LocalDateTime)
2025-06-17 00:58:10.457 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.457 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 35.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 128(Integer), 1123(Integer), 1130(Integer), 2025-06-17T00:58:10.457256600(LocalDateTime), 2025-06-17T00:58:10.457256600(LocalDateTime)
2025-06-17 00:58:10.458 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.458 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 35.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 129(Integer), 1131(Integer), 1154(Integer), 2025-06-17T00:58:10.458260600(LocalDateTime), 2025-06-17T00:58:10.458260600(LocalDateTime)
2025-06-17 00:58:10.459 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.459 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 36(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 130(Integer), 1155(Integer), 1175(Integer), 2025-06-17T00:58:10.459259(LocalDateTime), 2025-06-17T00:58:10.459259(LocalDateTime)
2025-06-17 00:58:10.460 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.460 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 36.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 131(Integer), 1159(Integer), 1167(Integer), 2025-06-17T00:58:10.460263100(LocalDateTime), 2025-06-17T00:58:10.460263100(LocalDateTime)
2025-06-17 00:58:10.460 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.460 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 36.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 132(Integer), 1168(Integer), 1175(Integer), 2025-06-17T00:58:10.460263100(LocalDateTime), 2025-06-17T00:58:10.460263100(LocalDateTime)
2025-06-17 00:58:10.460 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.461 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 37(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 133(Integer), 1176(Integer), 1203(Integer), 2025-06-17T00:58:10.460263100(LocalDateTime), 2025-06-17T00:58:10.461265(LocalDateTime)
2025-06-17 00:58:10.461 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.461 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 37.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 134(Integer), 1180(Integer), 1190(Integer), 2025-06-17T00:58:10.461265(LocalDateTime), 2025-06-17T00:58:10.461265(LocalDateTime)
2025-06-17 00:58:10.462 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.462 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 37.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 135(Integer), 1191(Integer), 1203(Integer), 2025-06-17T00:58:10.462260300(LocalDateTime), 2025-06-17T00:58:10.462260300(LocalDateTime)
2025-06-17 00:58:10.463 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.463 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 38(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 136(Integer), 1204(Integer), 1252(Integer), 2025-06-17T00:58:10.463263400(LocalDateTime), 2025-06-17T00:58:10.463263400(LocalDateTime)
2025-06-17 00:58:10.463 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.464 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 38.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 137(Integer), 1208(Integer), 1228(Integer), 2025-06-17T00:58:10.463263400(LocalDateTime), 2025-06-17T00:58:10.463263400(LocalDateTime)
2025-06-17 00:58:10.464 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.464 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 38.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 138(Integer), 1212(Integer), 1220(Integer), 2025-06-17T00:58:10.464261500(LocalDateTime), 2025-06-17T00:58:10.464261500(LocalDateTime)
2025-06-17 00:58:10.464 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.464 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 38.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 139(Integer), 1221(Integer), 1228(Integer), 2025-06-17T00:58:10.464261500(LocalDateTime), 2025-06-17T00:58:10.464261500(LocalDateTime)
2025-06-17 00:58:10.464 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.465 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 38.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 140(Integer), 1229(Integer), 1252(Integer), 2025-06-17T00:58:10.465261600(LocalDateTime), 2025-06-17T00:58:10.465261600(LocalDateTime)
2025-06-17 00:58:10.466 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.466 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 39(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 141(Integer), 1253(Integer), 1273(Integer), 2025-06-17T00:58:10.466441700(LocalDateTime), 2025-06-17T00:58:10.466441700(LocalDateTime)
2025-06-17 00:58:10.467 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.468 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 39.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 142(Integer), 1257(Integer), 1265(Integer), 2025-06-17T00:58:10.467457900(LocalDateTime), 2025-06-17T00:58:10.467457900(LocalDateTime)
2025-06-17 00:58:10.469 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.470 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 39.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 143(Integer), 1266(Integer), 1273(Integer), 2025-06-17T00:58:10.469457(LocalDateTime), 2025-06-17T00:58:10.469457(LocalDateTime)
2025-06-17 00:58:10.470 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.471 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 40(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 144(Integer), 1274(Integer), 1301(Integer), 2025-06-17T00:58:10.471457500(LocalDateTime), 2025-06-17T00:58:10.471457500(LocalDateTime)
2025-06-17 00:58:10.471 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.472 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 40.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 145(Integer), 1278(Integer), 1288(Integer), 2025-06-17T00:58:10.472453600(LocalDateTime), 2025-06-17T00:58:10.472453600(LocalDateTime)
2025-06-17 00:58:10.472 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.473 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 40.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 146(Integer), 1289(Integer), 1301(Integer), 2025-06-17T00:58:10.472453600(LocalDateTime), 2025-06-17T00:58:10.472453600(LocalDateTime)
2025-06-17 00:58:10.473 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.473 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 41(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 147(Integer), 1302(Integer), 1350(Integer), 2025-06-17T00:58:10.473452200(LocalDateTime), 2025-06-17T00:58:10.473452200(LocalDateTime)
2025-06-17 00:58:10.473 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.474 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 41.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 148(Integer), 1306(Integer), 1326(Integer), 2025-06-17T00:58:10.473452200(LocalDateTime), 2025-06-17T00:58:10.473452200(LocalDateTime)
2025-06-17 00:58:10.474 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.476 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 41.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 149(Integer), 1310(Integer), 1318(Integer), 2025-06-17T00:58:10.474964800(LocalDateTime), 2025-06-17T00:58:10.474964800(LocalDateTime)
2025-06-17 00:58:10.476 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.477 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 41.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 150(Integer), 1319(Integer), 1326(Integer), 2025-06-17T00:58:10.476522800(LocalDateTime), 2025-06-17T00:58:10.477536300(LocalDateTime)
2025-06-17 00:58:10.478 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.478 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 41.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 151(Integer), 1327(Integer), 1350(Integer), 2025-06-17T00:58:10.478537800(LocalDateTime), 2025-06-17T00:58:10.478537800(LocalDateTime)
2025-06-17 00:58:10.479 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.479 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 42(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 152(Integer), 1351(Integer), 1371(Integer), 2025-06-17T00:58:10.479542(LocalDateTime), 2025-06-17T00:58:10.479542(LocalDateTime)
2025-06-17 00:58:10.480 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.481 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 42.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 153(Integer), 1355(Integer), 1363(Integer), 2025-06-17T00:58:10.480537900(LocalDateTime), 2025-06-17T00:58:10.480537900(LocalDateTime)
2025-06-17 00:58:10.481 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.482 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 42.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 154(Integer), 1364(Integer), 1371(Integer), 2025-06-17T00:58:10.481536900(LocalDateTime), 2025-06-17T00:58:10.481536900(LocalDateTime)
2025-06-17 00:58:10.482 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.482 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 43(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 155(Integer), 1372(Integer), 1399(Integer), 2025-06-17T00:58:10.482535600(LocalDateTime), 2025-06-17T00:58:10.482535600(LocalDateTime)
2025-06-17 00:58:10.482 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.482 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 43.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 156(Integer), 1376(Integer), 1386(Integer), 2025-06-17T00:58:10.482535600(LocalDateTime), 2025-06-17T00:58:10.482535600(LocalDateTime)
2025-06-17 00:58:10.483 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.483 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 43.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 157(Integer), 1387(Integer), 1399(Integer), 2025-06-17T00:58:10.483537900(LocalDateTime), 2025-06-17T00:58:10.483537900(LocalDateTime)
2025-06-17 00:58:10.483 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.485 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 44(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 158(Integer), 1400(Integer), 1448(Integer), 2025-06-17T00:58:10.483537900(LocalDateTime), 2025-06-17T00:58:10.483537900(LocalDateTime)
2025-06-17 00:58:10.485 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.486 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 44.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 159(Integer), 1404(Integer), 1424(Integer), 2025-06-17T00:58:10.485112900(LocalDateTime), 2025-06-17T00:58:10.485112900(LocalDateTime)
2025-06-17 00:58:10.486 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.487 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 44.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 160(Integer), 1408(Integer), 1416(Integer), 2025-06-17T00:58:10.487637900(LocalDateTime), 2025-06-17T00:58:10.487637900(LocalDateTime)
2025-06-17 00:58:10.488 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.488 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 44.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 161(Integer), 1417(Integer), 1424(Integer), 2025-06-17T00:58:10.488637900(LocalDateTime), 2025-06-17T00:58:10.488637900(LocalDateTime)
2025-06-17 00:58:10.489 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.490 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 44.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 162(Integer), 1425(Integer), 1448(Integer), 2025-06-17T00:58:10.489638700(LocalDateTime), 2025-06-17T00:58:10.489638700(LocalDateTime)
2025-06-17 00:58:10.490 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.491 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 45(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 163(Integer), 1449(Integer), 1469(Integer), 2025-06-17T00:58:10.490636400(LocalDateTime), 2025-06-17T00:58:10.490636400(LocalDateTime)
2025-06-17 00:58:10.491 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.492 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 45.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 164(Integer), 1453(Integer), 1461(Integer), 2025-06-17T00:58:10.491635(LocalDateTime), 2025-06-17T00:58:10.491635(LocalDateTime)
2025-06-17 00:58:10.492 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.493 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 45.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 165(Integer), 1462(Integer), 1469(Integer), 2025-06-17T00:58:10.492637100(LocalDateTime), 2025-06-17T00:58:10.492637100(LocalDateTime)
2025-06-17 00:58:10.493 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.494 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 46(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 166(Integer), 1470(Integer), 1497(Integer), 2025-06-17T00:58:10.494930300(LocalDateTime), 2025-06-17T00:58:10.494930300(LocalDateTime)
2025-06-17 00:58:10.496 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.497 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 46.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 167(Integer), 1474(Integer), 1484(Integer), 2025-06-17T00:58:10.496473800(LocalDateTime), 2025-06-17T00:58:10.496473800(LocalDateTime)
2025-06-17 00:58:10.497 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.498 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 46.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 168(Integer), 1485(Integer), 1497(Integer), 2025-06-17T00:58:10.497486100(LocalDateTime), 2025-06-17T00:58:10.497486100(LocalDateTime)
2025-06-17 00:58:10.498 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.500 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 47(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 169(Integer), 1498(Integer), 1546(Integer), 2025-06-17T00:58:10.499513900(LocalDateTime), 2025-06-17T00:58:10.499513900(LocalDateTime)
2025-06-17 00:58:10.508 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.508 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 47.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 170(Integer), 1502(Integer), 1522(Integer), 2025-06-17T00:58:10.508579300(LocalDateTime), 2025-06-17T00:58:10.508579300(LocalDateTime)
2025-06-17 00:58:10.509 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.509 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 47.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 171(Integer), 1506(Integer), 1514(Integer), 2025-06-17T00:58:10.509584100(LocalDateTime), 2025-06-17T00:58:10.509584100(LocalDateTime)
2025-06-17 00:58:10.509 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.510 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 47.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 172(Integer), 1515(Integer), 1522(Integer), 2025-06-17T00:58:10.509584100(LocalDateTime), 2025-06-17T00:58:10.509584100(LocalDateTime)
2025-06-17 00:58:10.510 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.510 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 47.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 173(Integer), 1523(Integer), 1546(Integer), 2025-06-17T00:58:10.510579900(LocalDateTime), 2025-06-17T00:58:10.510579900(LocalDateTime)
2025-06-17 00:58:10.511 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.511 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 48(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 174(Integer), 1547(Integer), 1567(Integer), 2025-06-17T00:58:10.511580500(LocalDateTime), 2025-06-17T00:58:10.511580500(LocalDateTime)
2025-06-17 00:58:10.511 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.512 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 48.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 175(Integer), 1551(Integer), 1559(Integer), 2025-06-17T00:58:10.512579700(LocalDateTime), 2025-06-17T00:58:10.512579700(LocalDateTime)
2025-06-17 00:58:10.512 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.512 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 48.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 176(Integer), 1560(Integer), 1567(Integer), 2025-06-17T00:58:10.512579700(LocalDateTime), 2025-06-17T00:58:10.512579700(LocalDateTime)
2025-06-17 00:58:10.512 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.513 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 49(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 177(Integer), 1568(Integer), 1595(Integer), 2025-06-17T00:58:10.512579700(LocalDateTime), 2025-06-17T00:58:10.512579700(LocalDateTime)
2025-06-17 00:58:10.513 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.513 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 49.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 178(Integer), 1572(Integer), 1582(Integer), 2025-06-17T00:58:10.513580800(LocalDateTime), 2025-06-17T00:58:10.513580800(LocalDateTime)
2025-06-17 00:58:10.513 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.513 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 49.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 179(Integer), 1583(Integer), 1595(Integer), 2025-06-17T00:58:10.513580800(LocalDateTime), 2025-06-17T00:58:10.513580800(LocalDateTime)
2025-06-17 00:58:10.513 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.513 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 50(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 180(Integer), 1596(Integer), 1644(Integer), 2025-06-17T00:58:10.513580800(LocalDateTime), 2025-06-17T00:58:10.513580800(LocalDateTime)
2025-06-17 00:58:10.513 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.515 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 50.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 181(Integer), 1600(Integer), 1620(Integer), 2025-06-17T00:58:10.513580800(LocalDateTime), 2025-06-17T00:58:10.513580800(LocalDateTime)
2025-06-17 00:58:10.515 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.515 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 50.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 182(Integer), 1604(Integer), 1612(Integer), 2025-06-17T00:58:10.515089100(LocalDateTime), 2025-06-17T00:58:10.515089100(LocalDateTime)
2025-06-17 00:58:10.515 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.515 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 50.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 183(Integer), 1613(Integer), 1620(Integer), 2025-06-17T00:58:10.515089100(LocalDateTime), 2025-06-17T00:58:10.515089100(LocalDateTime)
2025-06-17 00:58:10.515 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.515 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 50.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 184(Integer), 1621(Integer), 1644(Integer), 2025-06-17T00:58:10.515089100(LocalDateTime), 2025-06-17T00:58:10.515089100(LocalDateTime)
2025-06-17 00:58:10.515 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.515 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 51(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 185(Integer), 1645(Integer), 1665(Integer), 2025-06-17T00:58:10.515089100(LocalDateTime), 2025-06-17T00:58:10.515089100(LocalDateTime)
2025-06-17 00:58:10.516 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.516 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 51.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 186(Integer), 1649(Integer), 1657(Integer), 2025-06-17T00:58:10.516628800(LocalDateTime), 2025-06-17T00:58:10.516628800(LocalDateTime)
2025-06-17 00:58:10.516 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.516 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 51.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 187(Integer), 1658(Integer), 1665(Integer), 2025-06-17T00:58:10.516628800(LocalDateTime), 2025-06-17T00:58:10.516628800(LocalDateTime)
2025-06-17 00:58:10.516 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.517 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 52(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 188(Integer), 1666(Integer), 1693(Integer), 2025-06-17T00:58:10.516628800(LocalDateTime), 2025-06-17T00:58:10.516628800(LocalDateTime)
2025-06-17 00:58:10.517 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.517 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 52.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 189(Integer), 1670(Integer), 1680(Integer), 2025-06-17T00:58:10.517638900(LocalDateTime), 2025-06-17T00:58:10.517638900(LocalDateTime)
2025-06-17 00:58:10.517 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.517 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 52.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 190(Integer), 1681(Integer), 1693(Integer), 2025-06-17T00:58:10.517638900(LocalDateTime), 2025-06-17T00:58:10.517638900(LocalDateTime)
2025-06-17 00:58:10.518 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.518 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 53(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 191(Integer), 1694(Integer), 1742(Integer), 2025-06-17T00:58:10.518639(LocalDateTime), 2025-06-17T00:58:10.518639(LocalDateTime)
2025-06-17 00:58:10.518 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.518 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 53.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 192(Integer), 1698(Integer), 1718(Integer), 2025-06-17T00:58:10.518639(LocalDateTime), 2025-06-17T00:58:10.518639(LocalDateTime)
2025-06-17 00:58:10.519 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.519 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 53.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 193(Integer), 1702(Integer), 1710(Integer), 2025-06-17T00:58:10.519642300(LocalDateTime), 2025-06-17T00:58:10.519642300(LocalDateTime)
2025-06-17 00:58:10.519 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.520 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 53.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 194(Integer), 1711(Integer), 1718(Integer), 2025-06-17T00:58:10.519642300(LocalDateTime), 2025-06-17T00:58:10.519642300(LocalDateTime)
2025-06-17 00:58:10.520 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.521 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 53.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 195(Integer), 1719(Integer), 1742(Integer), 2025-06-17T00:58:10.520642300(LocalDateTime), 2025-06-17T00:58:10.520642300(LocalDateTime)
2025-06-17 00:58:10.521 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.521 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 54(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 196(Integer), 1743(Integer), 1763(Integer), 2025-06-17T00:58:10.521641800(LocalDateTime), 2025-06-17T00:58:10.521641800(LocalDateTime)
2025-06-17 00:58:10.521 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.522 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 54.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 197(Integer), 1747(Integer), 1755(Integer), 2025-06-17T00:58:10.522641700(LocalDateTime), 2025-06-17T00:58:10.522641700(LocalDateTime)
2025-06-17 00:58:10.522 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.523 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 54.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 198(Integer), 1756(Integer), 1763(Integer), 2025-06-17T00:58:10.522641700(LocalDateTime), 2025-06-17T00:58:10.523640900(LocalDateTime)
2025-06-17 00:58:10.523 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.523 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 55(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 199(Integer), 1764(Integer), 1791(Integer), 2025-06-17T00:58:10.523640900(LocalDateTime), 2025-06-17T00:58:10.523640900(LocalDateTime)
2025-06-17 00:58:10.523 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.525 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 55.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 200(Integer), 1768(Integer), 1778(Integer), 2025-06-17T00:58:10.523640900(LocalDateTime), 2025-06-17T00:58:10.523640900(LocalDateTime)
2025-06-17 00:58:10.525 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.526 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 55.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 201(Integer), 1779(Integer), 1791(Integer), 2025-06-17T00:58:10.525834300(LocalDateTime), 2025-06-17T00:58:10.525834300(LocalDateTime)
2025-06-17 00:58:10.526 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.527 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 56(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 202(Integer), 1792(Integer), 1840(Integer), 2025-06-17T00:58:10.526373700(LocalDateTime), 2025-06-17T00:58:10.526373700(LocalDateTime)
2025-06-17 00:58:10.527 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.527 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 56.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 203(Integer), 1796(Integer), 1816(Integer), 2025-06-17T00:58:10.527393700(LocalDateTime), 2025-06-17T00:58:10.527393700(LocalDateTime)
2025-06-17 00:58:10.528 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.528 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 56.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 204(Integer), 1800(Integer), 1808(Integer), 2025-06-17T00:58:10.528386700(LocalDateTime), 2025-06-17T00:58:10.528386700(LocalDateTime)
2025-06-17 00:58:10.528 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.529 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 56.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 205(Integer), 1809(Integer), 1816(Integer), 2025-06-17T00:58:10.529386200(LocalDateTime), 2025-06-17T00:58:10.529386200(LocalDateTime)
2025-06-17 00:58:10.530 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.530 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 56.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 206(Integer), 1817(Integer), 1840(Integer), 2025-06-17T00:58:10.530388500(LocalDateTime), 2025-06-17T00:58:10.530388500(LocalDateTime)
2025-06-17 00:58:10.531 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.531 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 57(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 207(Integer), 1841(Integer), 1861(Integer), 2025-06-17T00:58:10.531390100(LocalDateTime), 2025-06-17T00:58:10.531390100(LocalDateTime)
2025-06-17 00:58:10.531 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.532 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 57.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 208(Integer), 1845(Integer), 1853(Integer), 2025-06-17T00:58:10.531390100(LocalDateTime), 2025-06-17T00:58:10.532385400(LocalDateTime)
2025-06-17 00:58:10.533 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.533 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 57.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 209(Integer), 1854(Integer), 1861(Integer), 2025-06-17T00:58:10.533386400(LocalDateTime), 2025-06-17T00:58:10.533386400(LocalDateTime)
2025-06-17 00:58:10.534 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.534 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 58(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 210(Integer), 1862(Integer), 1889(Integer), 2025-06-17T00:58:10.534384900(LocalDateTime), 2025-06-17T00:58:10.534384900(LocalDateTime)
2025-06-17 00:58:10.535 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.535 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 58.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 211(Integer), 1866(Integer), 1876(Integer), 2025-06-17T00:58:10.535385900(LocalDateTime), 2025-06-17T00:58:10.535385900(LocalDateTime)
2025-06-17 00:58:10.535 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.536 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 58.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 212(Integer), 1877(Integer), 1889(Integer), 2025-06-17T00:58:10.535385900(LocalDateTime), 2025-06-17T00:58:10.535385900(LocalDateTime)
2025-06-17 00:58:10.536 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.536 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 59(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 213(Integer), 1890(Integer), 1938(Integer), 2025-06-17T00:58:10.536488300(LocalDateTime), 2025-06-17T00:58:10.536488300(LocalDateTime)
2025-06-17 00:58:10.536 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.537 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 59.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 214(Integer), 1894(Integer), 1914(Integer), 2025-06-17T00:58:10.536488300(LocalDateTime), 2025-06-17T00:58:10.536488300(LocalDateTime)
2025-06-17 00:58:10.537 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.537 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 59.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 215(Integer), 1898(Integer), 1906(Integer), 2025-06-17T00:58:10.537501300(LocalDateTime), 2025-06-17T00:58:10.537501300(LocalDateTime)
2025-06-17 00:58:10.538 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.538 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 59.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 216(Integer), 1907(Integer), 1914(Integer), 2025-06-17T00:58:10.538282800(LocalDateTime), 2025-06-17T00:58:10.538282800(LocalDateTime)
2025-06-17 00:58:10.538 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.539 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 59.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 217(Integer), 1915(Integer), 1938(Integer), 2025-06-17T00:58:10.538877200(LocalDateTime), 2025-06-17T00:58:10.538877200(LocalDateTime)
2025-06-17 00:58:10.539 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.539 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 60(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 218(Integer), 1939(Integer), 1959(Integer), 2025-06-17T00:58:10.539938600(LocalDateTime), 2025-06-17T00:58:10.539938600(LocalDateTime)
2025-06-17 00:58:10.540 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.540 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 60.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 219(Integer), 1943(Integer), 1951(Integer), 2025-06-17T00:58:10.540691400(LocalDateTime), 2025-06-17T00:58:10.540691400(LocalDateTime)
2025-06-17 00:58:10.541 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.541 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 60.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 220(Integer), 1952(Integer), 1959(Integer), 2025-06-17T00:58:10.541201300(LocalDateTime), 2025-06-17T00:58:10.541201300(LocalDateTime)
2025-06-17 00:58:10.541 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.542 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 61(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 221(Integer), 1960(Integer), 1987(Integer), 2025-06-17T00:58:10.541682900(LocalDateTime), 2025-06-17T00:58:10.541682900(LocalDateTime)
2025-06-17 00:58:10.542 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.542 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 61.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 222(Integer), 1964(Integer), 1974(Integer), 2025-06-17T00:58:10.542414900(LocalDateTime), 2025-06-17T00:58:10.542414900(LocalDateTime)
2025-06-17 00:58:10.542 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.542 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 61.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 223(Integer), 1975(Integer), 1987(Integer), 2025-06-17T00:58:10.542925100(LocalDateTime), 2025-06-17T00:58:10.542925100(LocalDateTime)
2025-06-17 00:58:10.543 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.544 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 62(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 224(Integer), 1988(Integer), 2036(Integer), 2025-06-17T00:58:10.543535(LocalDateTime), 2025-06-17T00:58:10.543535(LocalDateTime)
2025-06-17 00:58:10.544 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.544 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 62.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 225(Integer), 1992(Integer), 2012(Integer), 2025-06-17T00:58:10.544370800(LocalDateTime), 2025-06-17T00:58:10.544370800(LocalDateTime)
2025-06-17 00:58:10.545 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.545 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 62.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 226(Integer), 1996(Integer), 2004(Integer), 2025-06-17T00:58:10.545405800(LocalDateTime), 2025-06-17T00:58:10.545405800(LocalDateTime)
2025-06-17 00:58:10.546 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.546 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 62.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 227(Integer), 2005(Integer), 2012(Integer), 2025-06-17T00:58:10.546201400(LocalDateTime), 2025-06-17T00:58:10.546201400(LocalDateTime)
2025-06-17 00:58:10.546 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.547 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 62.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 228(Integer), 2013(Integer), 2036(Integer), 2025-06-17T00:58:10.546733500(LocalDateTime), 2025-06-17T00:58:10.546733500(LocalDateTime)
2025-06-17 00:58:10.547 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.548 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 63(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 229(Integer), 2037(Integer), 2057(Integer), 2025-06-17T00:58:10.547934500(LocalDateTime), 2025-06-17T00:58:10.547934500(LocalDateTime)
2025-06-17 00:58:10.549 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.549 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 63.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 230(Integer), 2041(Integer), 2049(Integer), 2025-06-17T00:58:10.549003300(LocalDateTime), 2025-06-17T00:58:10.549003300(LocalDateTime)
2025-06-17 00:58:10.549 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.549 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 63.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 231(Integer), 2050(Integer), 2057(Integer), 2025-06-17T00:58:10.549552700(LocalDateTime), 2025-06-17T00:58:10.549552700(LocalDateTime)
2025-06-17 00:58:10.549 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.549 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 64(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 232(Integer), 2058(Integer), 2085(Integer), 2025-06-17T00:58:10.549872300(LocalDateTime), 2025-06-17T00:58:10.549872300(LocalDateTime)
2025-06-17 00:58:10.550 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.550 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 64.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 233(Integer), 2062(Integer), 2072(Integer), 2025-06-17T00:58:10.550383100(LocalDateTime), 2025-06-17T00:58:10.550932800(LocalDateTime)
2025-06-17 00:58:10.551 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.552 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 64.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 234(Integer), 2073(Integer), 2085(Integer), 2025-06-17T00:58:10.551481400(LocalDateTime), 2025-06-17T00:58:10.552068(LocalDateTime)
2025-06-17 00:58:10.552 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.553 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 65(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 235(Integer), 2086(Integer), 2134(Integer), 2025-06-17T00:58:10.552581200(LocalDateTime), 2025-06-17T00:58:10.552581200(LocalDateTime)
2025-06-17 00:58:10.553 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.553 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 65.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 236(Integer), 2090(Integer), 2110(Integer), 2025-06-17T00:58:10.553678700(LocalDateTime), 2025-06-17T00:58:10.553678700(LocalDateTime)
2025-06-17 00:58:10.554 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.554 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 65.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 237(Integer), 2094(Integer), 2102(Integer), 2025-06-17T00:58:10.554332100(LocalDateTime), 2025-06-17T00:58:10.554332100(LocalDateTime)
2025-06-17 00:58:10.554 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.555 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 65.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 238(Integer), 2103(Integer), 2110(Integer), 2025-06-17T00:58:10.554839800(LocalDateTime), 2025-06-17T00:58:10.554839800(LocalDateTime)
2025-06-17 00:58:10.555 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.556 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 65.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 239(Integer), 2111(Integer), 2134(Integer), 2025-06-17T00:58:10.555687500(LocalDateTime), 2025-06-17T00:58:10.555687500(LocalDateTime)
2025-06-17 00:58:10.556 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.557 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 66(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 240(Integer), 2135(Integer), 2155(Integer), 2025-06-17T00:58:10.556724(LocalDateTime), 2025-06-17T00:58:10.556724(LocalDateTime)
2025-06-17 00:58:10.557 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.558 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 66.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 241(Integer), 2139(Integer), 2147(Integer), 2025-06-17T00:58:10.558088400(LocalDateTime), 2025-06-17T00:58:10.558088400(LocalDateTime)
2025-06-17 00:58:10.558 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.558 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 66.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 242(Integer), 2148(Integer), 2155(Integer), 2025-06-17T00:58:10.558088400(LocalDateTime), 2025-06-17T00:58:10.558088400(LocalDateTime)
2025-06-17 00:58:10.558 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.559 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 67(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 243(Integer), 2156(Integer), 2183(Integer), 2025-06-17T00:58:10.558883(LocalDateTime), 2025-06-17T00:58:10.558883(LocalDateTime)
2025-06-17 00:58:10.559 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.559 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 67.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 244(Integer), 2160(Integer), 2170(Integer), 2025-06-17T00:58:10.559943100(LocalDateTime), 2025-06-17T00:58:10.559943100(LocalDateTime)
2025-06-17 00:58:10.560 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.561 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 67.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 245(Integer), 2171(Integer), 2183(Integer), 2025-06-17T00:58:10.560498500(LocalDateTime), 2025-06-17T00:58:10.560498500(LocalDateTime)
2025-06-17 00:58:10.561 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.561 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 68(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 246(Integer), 2184(Integer), 2232(Integer), 2025-06-17T00:58:10.561051800(LocalDateTime), 2025-06-17T00:58:10.561051800(LocalDateTime)
2025-06-17 00:58:10.561 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.562 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 68.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 247(Integer), 2188(Integer), 2208(Integer), 2025-06-17T00:58:10.561643200(LocalDateTime), 2025-06-17T00:58:10.561643200(LocalDateTime)
2025-06-17 00:58:10.562 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.562 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 68.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 248(Integer), 2192(Integer), 2200(Integer), 2025-06-17T00:58:10.562152900(LocalDateTime), 2025-06-17T00:58:10.562152900(LocalDateTime)
2025-06-17 00:58:10.562 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.563 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 68.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 249(Integer), 2201(Integer), 2208(Integer), 2025-06-17T00:58:10.562692500(LocalDateTime), 2025-06-17T00:58:10.562692500(LocalDateTime)
2025-06-17 00:58:10.563 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.564 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 68.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 250(Integer), 2209(Integer), 2232(Integer), 2025-06-17T00:58:10.563871(LocalDateTime), 2025-06-17T00:58:10.563871(LocalDateTime)
2025-06-17 00:58:10.564 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.564 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 69(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 251(Integer), 2233(Integer), 2253(Integer), 2025-06-17T00:58:10.564904400(LocalDateTime), 2025-06-17T00:58:10.564904400(LocalDateTime)
2025-06-17 00:58:10.565 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.565 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 69.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 252(Integer), 2237(Integer), 2245(Integer), 2025-06-17T00:58:10.565450900(LocalDateTime), 2025-06-17T00:58:10.565450900(LocalDateTime)
2025-06-17 00:58:10.565 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.566 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 69.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 253(Integer), 2246(Integer), 2253(Integer), 2025-06-17T00:58:10.565993300(LocalDateTime), 2025-06-17T00:58:10.565993300(LocalDateTime)
2025-06-17 00:58:10.566 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.567 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 70(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 254(Integer), 2254(Integer), 2281(Integer), 2025-06-17T00:58:10.567067800(LocalDateTime), 2025-06-17T00:58:10.567067800(LocalDateTime)
2025-06-17 00:58:10.567 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.568 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 70.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 255(Integer), 2258(Integer), 2268(Integer), 2025-06-17T00:58:10.567610700(LocalDateTime), 2025-06-17T00:58:10.567610700(LocalDateTime)
2025-06-17 00:58:10.569 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.569 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 70.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 256(Integer), 2269(Integer), 2281(Integer), 2025-06-17T00:58:10.569320900(LocalDateTime), 2025-06-17T00:58:10.569320900(LocalDateTime)
2025-06-17 00:58:10.570 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.570 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 71(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 257(Integer), 2282(Integer), 2330(Integer), 2025-06-17T00:58:10.570528600(LocalDateTime), 2025-06-17T00:58:10.570528600(LocalDateTime)
2025-06-17 00:58:10.571 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.571 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 71.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 258(Integer), 2286(Integer), 2306(Integer), 2025-06-17T00:58:10.571374600(LocalDateTime), 2025-06-17T00:58:10.571374600(LocalDateTime)
2025-06-17 00:58:10.572 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.572 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 71.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 259(Integer), 2290(Integer), 2298(Integer), 2025-06-17T00:58:10.572439300(LocalDateTime), 2025-06-17T00:58:10.572439300(LocalDateTime)
2025-06-17 00:58:10.572 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.573 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 71.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 260(Integer), 2299(Integer), 2306(Integer), 2025-06-17T00:58:10.572974500(LocalDateTime), 2025-06-17T00:58:10.572974500(LocalDateTime)
2025-06-17 00:58:10.574 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.574 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 71.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 261(Integer), 2307(Integer), 2330(Integer), 2025-06-17T00:58:10.574056100(LocalDateTime), 2025-06-17T00:58:10.574056100(LocalDateTime)
2025-06-17 00:58:10.574 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.574 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 72(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 262(Integer), 2331(Integer), 2351(Integer), 2025-06-17T00:58:10.574594500(LocalDateTime), 2025-06-17T00:58:10.574594500(LocalDateTime)
2025-06-17 00:58:10.575 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.575 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 72.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 263(Integer), 2335(Integer), 2343(Integer), 2025-06-17T00:58:10.575121100(LocalDateTime), 2025-06-17T00:58:10.575121100(LocalDateTime)
2025-06-17 00:58:10.575 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.575 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 72.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 264(Integer), 2344(Integer), 2351(Integer), 2025-06-17T00:58:10.575690300(LocalDateTime), 2025-06-17T00:58:10.575690300(LocalDateTime)
2025-06-17 00:58:10.575 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.575 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 73(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 265(Integer), 2352(Integer), 2379(Integer), 2025-06-17T00:58:10.575690300(LocalDateTime), 2025-06-17T00:58:10.575690300(LocalDateTime)
2025-06-17 00:58:10.576 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.576 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 73.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 266(Integer), 2356(Integer), 2366(Integer), 2025-06-17T00:58:10.576701500(LocalDateTime), 2025-06-17T00:58:10.576701500(LocalDateTime)
2025-06-17 00:58:10.577 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.577 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 73.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 267(Integer), 2367(Integer), 2379(Integer), 2025-06-17T00:58:10.577210100(LocalDateTime), 2025-06-17T00:58:10.577210100(LocalDateTime)
2025-06-17 00:58:10.577 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.578 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 74(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 268(Integer), 2380(Integer), 2428(Integer), 2025-06-17T00:58:10.577553900(LocalDateTime), 2025-06-17T00:58:10.577553900(LocalDateTime)
2025-06-17 00:58:10.578 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.578 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 74.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 269(Integer), 2384(Integer), 2404(Integer), 2025-06-17T00:58:10.578241700(LocalDateTime), 2025-06-17T00:58:10.578241700(LocalDateTime)
2025-06-17 00:58:10.578 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.578 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 74.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 270(Integer), 2388(Integer), 2396(Integer), 2025-06-17T00:58:10.578750600(LocalDateTime), 2025-06-17T00:58:10.578750600(LocalDateTime)
2025-06-17 00:58:10.578 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.579 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 74.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 271(Integer), 2397(Integer), 2404(Integer), 2025-06-17T00:58:10.579519700(LocalDateTime), 2025-06-17T00:58:10.579519700(LocalDateTime)
2025-06-17 00:58:10.579 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.580 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 74.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 272(Integer), 2405(Integer), 2428(Integer), 2025-06-17T00:58:10.580031500(LocalDateTime), 2025-06-17T00:58:10.580108800(LocalDateTime)
2025-06-17 00:58:10.580 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.580 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 75(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 273(Integer), 2429(Integer), 2449(Integer), 2025-06-17T00:58:10.580620500(LocalDateTime), 2025-06-17T00:58:10.580620500(LocalDateTime)
2025-06-17 00:58:10.580 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.581 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 75.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 274(Integer), 2433(Integer), 2441(Integer), 2025-06-17T00:58:10.580825200(LocalDateTime), 2025-06-17T00:58:10.581333600(LocalDateTime)
2025-06-17 00:58:10.581 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.581 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 75.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 275(Integer), 2442(Integer), 2449(Integer), 2025-06-17T00:58:10.581412500(LocalDateTime), 2025-06-17T00:58:10.581412500(LocalDateTime)
2025-06-17 00:58:10.581 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.581 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 76(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 276(Integer), 2450(Integer), 2477(Integer), 2025-06-17T00:58:10.581920200(LocalDateTime), 2025-06-17T00:58:10.581920200(LocalDateTime)
2025-06-17 00:58:10.582 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.583 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 76.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 277(Integer), 2454(Integer), 2464(Integer), 2025-06-17T00:58:10.583021300(LocalDateTime), 2025-06-17T00:58:10.583021300(LocalDateTime)
2025-06-17 00:58:10.583 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.583 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 76.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 278(Integer), 2465(Integer), 2477(Integer), 2025-06-17T00:58:10.583528700(LocalDateTime), 2025-06-17T00:58:10.583528700(LocalDateTime)
2025-06-17 00:58:10.583 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.583 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 77(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 279(Integer), 2478(Integer), 2526(Integer), 2025-06-17T00:58:10.583528700(LocalDateTime), 2025-06-17T00:58:10.583528700(LocalDateTime)
2025-06-17 00:58:10.583 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.583 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 77.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 280(Integer), 2482(Integer), 2502(Integer), 2025-06-17T00:58:10.583528700(LocalDateTime), 2025-06-17T00:58:10.583528700(LocalDateTime)
2025-06-17 00:58:10.583 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.585 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 77.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 281(Integer), 2486(Integer), 2494(Integer), 2025-06-17T00:58:10.583528700(LocalDateTime), 2025-06-17T00:58:10.583528700(LocalDateTime)
2025-06-17 00:58:10.585 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.585 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 77.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 282(Integer), 2495(Integer), 2502(Integer), 2025-06-17T00:58:10.585234100(LocalDateTime), 2025-06-17T00:58:10.585234100(LocalDateTime)
2025-06-17 00:58:10.585 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.586 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 77.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 283(Integer), 2503(Integer), 2526(Integer), 2025-06-17T00:58:10.585887900(LocalDateTime), 2025-06-17T00:58:10.585887900(LocalDateTime)
2025-06-17 00:58:10.586 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.586 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 78(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 284(Integer), 2527(Integer), 2547(Integer), 2025-06-17T00:58:10.586395800(LocalDateTime), 2025-06-17T00:58:10.586395800(LocalDateTime)
2025-06-17 00:58:10.586 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.587 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 78.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 285(Integer), 2531(Integer), 2539(Integer), 2025-06-17T00:58:10.586395800(LocalDateTime), 2025-06-17T00:58:10.586395800(LocalDateTime)
2025-06-17 00:58:10.587 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.587 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 78.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 286(Integer), 2540(Integer), 2547(Integer), 2025-06-17T00:58:10.587403900(LocalDateTime), 2025-06-17T00:58:10.587403900(LocalDateTime)
2025-06-17 00:58:10.587 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.587 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 79(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 287(Integer), 2548(Integer), 2575(Integer), 2025-06-17T00:58:10.587403900(LocalDateTime), 2025-06-17T00:58:10.587403900(LocalDateTime)
2025-06-17 00:58:10.588 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.588 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 79.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 288(Integer), 2552(Integer), 2562(Integer), 2025-06-17T00:58:10.588463200(LocalDateTime), 2025-06-17T00:58:10.588463200(LocalDateTime)
2025-06-17 00:58:10.588 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.588 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 79.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 289(Integer), 2563(Integer), 2575(Integer), 2025-06-17T00:58:10.588463200(LocalDateTime), 2025-06-17T00:58:10.588463200(LocalDateTime)
2025-06-17 00:58:10.588 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.589 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 80(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 290(Integer), 2576(Integer), 2624(Integer), 2025-06-17T00:58:10.588463200(LocalDateTime), 2025-06-17T00:58:10.588463200(LocalDateTime)
2025-06-17 00:58:10.589 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.589 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 80.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 291(Integer), 2580(Integer), 2600(Integer), 2025-06-17T00:58:10.589854100(LocalDateTime), 2025-06-17T00:58:10.589854100(LocalDateTime)
2025-06-17 00:58:10.589 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.589 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 80.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 292(Integer), 2584(Integer), 2592(Integer), 2025-06-17T00:58:10.589854100(LocalDateTime), 2025-06-17T00:58:10.589854100(LocalDateTime)
2025-06-17 00:58:10.590 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.590 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 80.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 293(Integer), 2593(Integer), 2600(Integer), 2025-06-17T00:58:10.590863(LocalDateTime), 2025-06-17T00:58:10.590863(LocalDateTime)
2025-06-17 00:58:10.590 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.590 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 80.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 294(Integer), 2601(Integer), 2624(Integer), 2025-06-17T00:58:10.590863(LocalDateTime), 2025-06-17T00:58:10.590863(LocalDateTime)
2025-06-17 00:58:10.590 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.592 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 81(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 295(Integer), 2625(Integer), 2645(Integer), 2025-06-17T00:58:10.590863(LocalDateTime), 2025-06-17T00:58:10.590863(LocalDateTime)
2025-06-17 00:58:10.592 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.592 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 81.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 296(Integer), 2629(Integer), 2637(Integer), 2025-06-17T00:58:10.592068200(LocalDateTime), 2025-06-17T00:58:10.592068200(LocalDateTime)
2025-06-17 00:58:10.592 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.592 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 81.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 297(Integer), 2638(Integer), 2645(Integer), 2025-06-17T00:58:10.592068200(LocalDateTime), 2025-06-17T00:58:10.592068200(LocalDateTime)
2025-06-17 00:58:10.593 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.593 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 82(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 298(Integer), 2646(Integer), 2673(Integer), 2025-06-17T00:58:10.593079500(LocalDateTime), 2025-06-17T00:58:10.593079500(LocalDateTime)
2025-06-17 00:58:10.593 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.593 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 82.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 299(Integer), 2650(Integer), 2660(Integer), 2025-06-17T00:58:10.593079500(LocalDateTime), 2025-06-17T00:58:10.593079500(LocalDateTime)
2025-06-17 00:58:10.594 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.594 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 82.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 300(Integer), 2661(Integer), 2673(Integer), 2025-06-17T00:58:10.594078700(LocalDateTime), 2025-06-17T00:58:10.594078700(LocalDateTime)
2025-06-17 00:58:10.594 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.594 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 83(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 301(Integer), 2674(Integer), 2722(Integer), 2025-06-17T00:58:10.594078700(LocalDateTime), 2025-06-17T00:58:10.594078700(LocalDateTime)
2025-06-17 00:58:10.595 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.595 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 83.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 302(Integer), 2678(Integer), 2698(Integer), 2025-06-17T00:58:10.595081(LocalDateTime), 2025-06-17T00:58:10.595081(LocalDateTime)
2025-06-17 00:58:10.595 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.596 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 83.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 303(Integer), 2682(Integer), 2690(Integer), 2025-06-17T00:58:10.595594300(LocalDateTime), 2025-06-17T00:58:10.595594300(LocalDateTime)
2025-06-17 00:58:10.596 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.596 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 83.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 304(Integer), 2691(Integer), 2698(Integer), 2025-06-17T00:58:10.596606800(LocalDateTime), 2025-06-17T00:58:10.596606800(LocalDateTime)
2025-06-17 00:58:10.596 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.597 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 83.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 305(Integer), 2699(Integer), 2722(Integer), 2025-06-17T00:58:10.596606800(LocalDateTime), 2025-06-17T00:58:10.596606800(LocalDateTime)
2025-06-17 00:58:10.597 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.597 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 84(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 306(Integer), 2723(Integer), 2743(Integer), 2025-06-17T00:58:10.597620(LocalDateTime), 2025-06-17T00:58:10.597620(LocalDateTime)
2025-06-17 00:58:10.598 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.598 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 84.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 307(Integer), 2727(Integer), 2735(Integer), 2025-06-17T00:58:10.598630(LocalDateTime), 2025-06-17T00:58:10.598630(LocalDateTime)
2025-06-17 00:58:10.598 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.598 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 84.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 308(Integer), 2736(Integer), 2743(Integer), 2025-06-17T00:58:10.598630(LocalDateTime), 2025-06-17T00:58:10.598630(LocalDateTime)
2025-06-17 00:58:10.598 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.599 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 85(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 309(Integer), 2744(Integer), 2771(Integer), 2025-06-17T00:58:10.598630(LocalDateTime), 2025-06-17T00:58:10.598630(LocalDateTime)
2025-06-17 00:58:10.599 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.599 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 85.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 310(Integer), 2748(Integer), 2758(Integer), 2025-06-17T00:58:10.599630500(LocalDateTime), 2025-06-17T00:58:10.599630500(LocalDateTime)
2025-06-17 00:58:10.600 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.600 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 85.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 311(Integer), 2759(Integer), 2771(Integer), 2025-06-17T00:58:10.600382300(LocalDateTime), 2025-06-17T00:58:10.600382300(LocalDateTime)
2025-06-17 00:58:10.600 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.601 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 86(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 312(Integer), 2772(Integer), 2820(Integer), 2025-06-17T00:58:10.600892700(LocalDateTime), 2025-06-17T00:58:10.601066100(LocalDateTime)
2025-06-17 00:58:10.601 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.601 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 86.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 313(Integer), 2776(Integer), 2796(Integer), 2025-06-17T00:58:10.601066100(LocalDateTime), 2025-06-17T00:58:10.601066100(LocalDateTime)
2025-06-17 00:58:10.601 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.601 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 86.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 314(Integer), 2780(Integer), 2788(Integer), 2025-06-17T00:58:10.601907600(LocalDateTime), 2025-06-17T00:58:10.601907600(LocalDateTime)
2025-06-17 00:58:10.601 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.602 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 86.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 315(Integer), 2789(Integer), 2796(Integer), 2025-06-17T00:58:10.601907600(LocalDateTime), 2025-06-17T00:58:10.601907600(LocalDateTime)
2025-06-17 00:58:10.602 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.602 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 86.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 316(Integer), 2797(Integer), 2820(Integer), 2025-06-17T00:58:10.602906100(LocalDateTime), 2025-06-17T00:58:10.602906100(LocalDateTime)
2025-06-17 00:58:10.602 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.602 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 87(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 317(Integer), 2821(Integer), 2841(Integer), 2025-06-17T00:58:10.602906100(LocalDateTime), 2025-06-17T00:58:10.602906100(LocalDateTime)
2025-06-17 00:58:10.603 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.604 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 87.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 318(Integer), 2825(Integer), 2833(Integer), 2025-06-17T00:58:10.603905500(LocalDateTime), 2025-06-17T00:58:10.603905500(LocalDateTime)
2025-06-17 00:58:10.604 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.605 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 87.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 319(Integer), 2834(Integer), 2841(Integer), 2025-06-17T00:58:10.605418500(LocalDateTime), 2025-06-17T00:58:10.605418500(LocalDateTime)
2025-06-17 00:58:10.606 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.608 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 88(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 320(Integer), 2842(Integer), 2869(Integer), 2025-06-17T00:58:10.607439700(LocalDateTime), 2025-06-17T00:58:10.607439700(LocalDateTime)
2025-06-17 00:58:10.609 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.609 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 88.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 321(Integer), 2846(Integer), 2856(Integer), 2025-06-17T00:58:10.609448(LocalDateTime), 2025-06-17T00:58:10.609448(LocalDateTime)
2025-06-17 00:58:10.610 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.610 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 88.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 322(Integer), 2857(Integer), 2869(Integer), 2025-06-17T00:58:10.610448700(LocalDateTime), 2025-06-17T00:58:10.610448700(LocalDateTime)
2025-06-17 00:58:10.610 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.611 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 89(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 323(Integer), 2870(Integer), 2918(Integer), 2025-06-17T00:58:10.610825(LocalDateTime), 2025-06-17T00:58:10.610825(LocalDateTime)
2025-06-17 00:58:10.611 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.612 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 89.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 324(Integer), 2874(Integer), 2894(Integer), 2025-06-17T00:58:10.611500900(LocalDateTime), 2025-06-17T00:58:10.611500900(LocalDateTime)
2025-06-17 00:58:10.612 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.613 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 89.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 325(Integer), 2878(Integer), 2886(Integer), 2025-06-17T00:58:10.612727900(LocalDateTime), 2025-06-17T00:58:10.612727900(LocalDateTime)
2025-06-17 00:58:10.613 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.613 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 89.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 326(Integer), 2887(Integer), 2894(Integer), 2025-06-17T00:58:10.613294900(LocalDateTime), 2025-06-17T00:58:10.613294900(LocalDateTime)
2025-06-17 00:58:10.613 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.613 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 89.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 327(Integer), 2895(Integer), 2918(Integer), 2025-06-17T00:58:10.613802700(LocalDateTime), 2025-06-17T00:58:10.613802700(LocalDateTime)
2025-06-17 00:58:10.613 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.614 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 90(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 328(Integer), 2919(Integer), 2939(Integer), 2025-06-17T00:58:10.613802700(LocalDateTime), 2025-06-17T00:58:10.613802700(LocalDateTime)
2025-06-17 00:58:10.614 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.614 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 90.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 329(Integer), 2923(Integer), 2931(Integer), 2025-06-17T00:58:10.614880800(LocalDateTime), 2025-06-17T00:58:10.614880800(LocalDateTime)
2025-06-17 00:58:10.615 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.615 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 90.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 330(Integer), 2932(Integer), 2939(Integer), 2025-06-17T00:58:10.615440100(LocalDateTime), 2025-06-17T00:58:10.615440100(LocalDateTime)
2025-06-17 00:58:10.615 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.615 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 91(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 331(Integer), 2940(Integer), 2967(Integer), 2025-06-17T00:58:10.615996400(LocalDateTime), 2025-06-17T00:58:10.615996400(LocalDateTime)
2025-06-17 00:58:10.615 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.616 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 91.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 332(Integer), 2944(Integer), 2954(Integer), 2025-06-17T00:58:10.615996400(LocalDateTime), 2025-06-17T00:58:10.615996400(LocalDateTime)
2025-06-17 00:58:10.616 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.617 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 91.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 333(Integer), 2955(Integer), 2967(Integer), 2025-06-17T00:58:10.617271500(LocalDateTime), 2025-06-17T00:58:10.617271500(LocalDateTime)
2025-06-17 00:58:10.617 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.617 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 92(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 334(Integer), 2968(Integer), 3016(Integer), 2025-06-17T00:58:10.617818500(LocalDateTime), 2025-06-17T00:58:10.617818500(LocalDateTime)
2025-06-17 00:58:10.618 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.618 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 92.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 335(Integer), 2972(Integer), 2992(Integer), 2025-06-17T00:58:10.618370300(LocalDateTime), 2025-06-17T00:58:10.618370300(LocalDateTime)
2025-06-17 00:58:10.618 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.618 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 92.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 336(Integer), 2976(Integer), 2984(Integer), 2025-06-17T00:58:10.618967300(LocalDateTime), 2025-06-17T00:58:10.618967300(LocalDateTime)
2025-06-17 00:58:10.619 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.619 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 92.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 337(Integer), 2985(Integer), 2992(Integer), 2025-06-17T00:58:10.619478(LocalDateTime), 2025-06-17T00:58:10.619478(LocalDateTime)
2025-06-17 00:58:10.619 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.619 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 92.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 338(Integer), 2993(Integer), 3016(Integer), 2025-06-17T00:58:10.619478(LocalDateTime), 2025-06-17T00:58:10.619478(LocalDateTime)
2025-06-17 00:58:10.619 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.619 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 93(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 339(Integer), 3017(Integer), 3037(Integer), 2025-06-17T00:58:10.619478(LocalDateTime), 2025-06-17T00:58:10.619478(LocalDateTime)
2025-06-17 00:58:10.619 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.619 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 93.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 340(Integer), 3021(Integer), 3029(Integer), 2025-06-17T00:58:10.619478(LocalDateTime), 2025-06-17T00:58:10.619478(LocalDateTime)
2025-06-17 00:58:10.620 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.620 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 93.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 341(Integer), 3030(Integer), 3037(Integer), 2025-06-17T00:58:10.620492100(LocalDateTime), 2025-06-17T00:58:10.620492100(LocalDateTime)
2025-06-17 00:58:10.620 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.620 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 94(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 342(Integer), 3038(Integer), 3065(Integer), 2025-06-17T00:58:10.620492100(LocalDateTime), 2025-06-17T00:58:10.620492100(LocalDateTime)
2025-06-17 00:58:10.621 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.621 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 94.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 343(Integer), 3042(Integer), 3052(Integer), 2025-06-17T00:58:10.621002700(LocalDateTime), 2025-06-17T00:58:10.621002700(LocalDateTime)
2025-06-17 00:58:10.621 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.621 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 94.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 344(Integer), 3053(Integer), 3065(Integer), 2025-06-17T00:58:10.621002700(LocalDateTime), 2025-06-17T00:58:10.621002700(LocalDateTime)
2025-06-17 00:58:10.621 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.621 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 95(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 345(Integer), 3066(Integer), 3114(Integer), 2025-06-17T00:58:10.621002700(LocalDateTime), 2025-06-17T00:58:10.621002700(LocalDateTime)
2025-06-17 00:58:10.621 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.621 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 95.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 346(Integer), 3070(Integer), 3090(Integer), 2025-06-17T00:58:10.621002700(LocalDateTime), 2025-06-17T00:58:10.621002700(LocalDateTime)
2025-06-17 00:58:10.622 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.622 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 95.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 347(Integer), 3074(Integer), 3082(Integer), 2025-06-17T00:58:10.622013100(LocalDateTime), 2025-06-17T00:58:10.622013100(LocalDateTime)
2025-06-17 00:58:10.622 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.622 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 95.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 348(Integer), 3083(Integer), 3090(Integer), 2025-06-17T00:58:10.622013100(LocalDateTime), 2025-06-17T00:58:10.622013100(LocalDateTime)
2025-06-17 00:58:10.622 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.622 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 95.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 349(Integer), 3091(Integer), 3114(Integer), 2025-06-17T00:58:10.622013100(LocalDateTime), 2025-06-17T00:58:10.622013100(LocalDateTime)
2025-06-17 00:58:10.622 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.622 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 96(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 350(Integer), 3115(Integer), 3135(Integer), 2025-06-17T00:58:10.622013100(LocalDateTime), 2025-06-17T00:58:10.622013100(LocalDateTime)
2025-06-17 00:58:10.622 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.622 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 96.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 351(Integer), 3119(Integer), 3127(Integer), 2025-06-17T00:58:10.622013100(LocalDateTime), 2025-06-17T00:58:10.622013100(LocalDateTime)
2025-06-17 00:58:10.622 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.623 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 96.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 352(Integer), 3128(Integer), 3135(Integer), 2025-06-17T00:58:10.623024600(LocalDateTime), 2025-06-17T00:58:10.623024600(LocalDateTime)
2025-06-17 00:58:10.623 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.623 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 97(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 353(Integer), 3136(Integer), 3163(Integer), 2025-06-17T00:58:10.623024600(LocalDateTime), 2025-06-17T00:58:10.623024600(LocalDateTime)
2025-06-17 00:58:10.623 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.623 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 97.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 354(Integer), 3140(Integer), 3150(Integer), 2025-06-17T00:58:10.623024600(LocalDateTime), 2025-06-17T00:58:10.623024600(LocalDateTime)
2025-06-17 00:58:10.623 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.623 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 97.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 355(Integer), 3151(Integer), 3163(Integer), 2025-06-17T00:58:10.623024600(LocalDateTime), 2025-06-17T00:58:10.623024600(LocalDateTime)
2025-06-17 00:58:10.623 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.623 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 98(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 356(Integer), 3164(Integer), 3212(Integer), 2025-06-17T00:58:10.623024600(LocalDateTime), 2025-06-17T00:58:10.623024600(LocalDateTime)
2025-06-17 00:58:10.624 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.624 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 98.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 357(Integer), 3168(Integer), 3188(Integer), 2025-06-17T00:58:10.624030600(LocalDateTime), 2025-06-17T00:58:10.624030600(LocalDateTime)
2025-06-17 00:58:10.624 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.624 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 98.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 358(Integer), 3172(Integer), 3180(Integer), 2025-06-17T00:58:10.624030600(LocalDateTime), 2025-06-17T00:58:10.624030600(LocalDateTime)
2025-06-17 00:58:10.624 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.624 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 98.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 359(Integer), 3181(Integer), 3188(Integer), 2025-06-17T00:58:10.624030600(LocalDateTime), 2025-06-17T00:58:10.624030600(LocalDateTime)
2025-06-17 00:58:10.624 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.625 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 98.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 360(Integer), 3189(Integer), 3212(Integer), 2025-06-17T00:58:10.624030600(LocalDateTime), 2025-06-17T00:58:10.624030600(LocalDateTime)
2025-06-17 00:58:10.625 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.625 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 99(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 361(Integer), 3213(Integer), 3233(Integer), 2025-06-17T00:58:10.625027300(LocalDateTime), 2025-06-17T00:58:10.625027300(LocalDateTime)
2025-06-17 00:58:10.625 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.625 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 99.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 362(Integer), 3217(Integer), 3225(Integer), 2025-06-17T00:58:10.625027300(LocalDateTime), 2025-06-17T00:58:10.625027300(LocalDateTime)
2025-06-17 00:58:10.625 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.625 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 99.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 363(Integer), 3226(Integer), 3233(Integer), 2025-06-17T00:58:10.625027300(LocalDateTime), 2025-06-17T00:58:10.625027300(LocalDateTime)
2025-06-17 00:58:10.625 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.626 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 100(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 364(Integer), 3234(Integer), 3261(Integer), 2025-06-17T00:58:10.625027300(LocalDateTime), 2025-06-17T00:58:10.626336900(LocalDateTime)
2025-06-17 00:58:10.626 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.626 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 100.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 365(Integer), 3238(Integer), 3248(Integer), 2025-06-17T00:58:10.626336900(LocalDateTime), 2025-06-17T00:58:10.626336900(LocalDateTime)
2025-06-17 00:58:10.626 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.627 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 100.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 366(Integer), 3249(Integer), 3261(Integer), 2025-06-17T00:58:10.626336900(LocalDateTime), 2025-06-17T00:58:10.626336900(LocalDateTime)
2025-06-17 00:58:10.627 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.627 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 101(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 367(Integer), 3262(Integer), 3310(Integer), 2025-06-17T00:58:10.627284500(LocalDateTime), 2025-06-17T00:58:10.627284500(LocalDateTime)
2025-06-17 00:58:10.627 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.627 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 101.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 368(Integer), 3266(Integer), 3286(Integer), 2025-06-17T00:58:10.627284500(LocalDateTime), 2025-06-17T00:58:10.627284500(LocalDateTime)
2025-06-17 00:58:10.627 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.628 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 101.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 369(Integer), 3270(Integer), 3278(Integer), 2025-06-17T00:58:10.627284500(LocalDateTime), 2025-06-17T00:58:10.627284500(LocalDateTime)
2025-06-17 00:58:10.628 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.628 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 101.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 370(Integer), 3279(Integer), 3286(Integer), 2025-06-17T00:58:10.628297(LocalDateTime), 2025-06-17T00:58:10.628297(LocalDateTime)
2025-06-17 00:58:10.628 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.628 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 101.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 371(Integer), 3287(Integer), 3310(Integer), 2025-06-17T00:58:10.628297(LocalDateTime), 2025-06-17T00:58:10.628297(LocalDateTime)
2025-06-17 00:58:10.629 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.629 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 102(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 372(Integer), 3311(Integer), 3331(Integer), 2025-06-17T00:58:10.629311100(LocalDateTime), 2025-06-17T00:58:10.629311100(LocalDateTime)
2025-06-17 00:58:10.629 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.629 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 102.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 373(Integer), 3315(Integer), 3323(Integer), 2025-06-17T00:58:10.629311100(LocalDateTime), 2025-06-17T00:58:10.629311100(LocalDateTime)
2025-06-17 00:58:10.629 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.629 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 102.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 374(Integer), 3324(Integer), 3331(Integer), 2025-06-17T00:58:10.629311100(LocalDateTime), 2025-06-17T00:58:10.629311100(LocalDateTime)
2025-06-17 00:58:10.630 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.630 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 103(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 375(Integer), 3332(Integer), 3359(Integer), 2025-06-17T00:58:10.630310500(LocalDateTime), 2025-06-17T00:58:10.630310500(LocalDateTime)
2025-06-17 00:58:10.630 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.630 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 103.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 376(Integer), 3336(Integer), 3346(Integer), 2025-06-17T00:58:10.630310500(LocalDateTime), 2025-06-17T00:58:10.630310500(LocalDateTime)
2025-06-17 00:58:10.630 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.630 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 103.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 377(Integer), 3347(Integer), 3359(Integer), 2025-06-17T00:58:10.630310500(LocalDateTime), 2025-06-17T00:58:10.630310500(LocalDateTime)
2025-06-17 00:58:10.631 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.631 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 104(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 378(Integer), 3360(Integer), 3408(Integer), 2025-06-17T00:58:10.631310300(LocalDateTime), 2025-06-17T00:58:10.631310300(LocalDateTime)
2025-06-17 00:58:10.631 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.631 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 104.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 379(Integer), 3364(Integer), 3384(Integer), 2025-06-17T00:58:10.631310300(LocalDateTime), 2025-06-17T00:58:10.631310300(LocalDateTime)
2025-06-17 00:58:10.631 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.631 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 104.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 380(Integer), 3368(Integer), 3376(Integer), 2025-06-17T00:58:10.631310300(LocalDateTime), 2025-06-17T00:58:10.631310300(LocalDateTime)
2025-06-17 00:58:10.632 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.633 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 104.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 381(Integer), 3377(Integer), 3384(Integer), 2025-06-17T00:58:10.632632200(LocalDateTime), 2025-06-17T00:58:10.632632200(LocalDateTime)
2025-06-17 00:58:10.633 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.633 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 104.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 382(Integer), 3385(Integer), 3408(Integer), 2025-06-17T00:58:10.633144400(LocalDateTime), 2025-06-17T00:58:10.633144400(LocalDateTime)
2025-06-17 00:58:10.633 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.633 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 105(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 383(Integer), 3409(Integer), 3429(Integer), 2025-06-17T00:58:10.633144400(LocalDateTime), 2025-06-17T00:58:10.633144400(LocalDateTime)
2025-06-17 00:58:10.633 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.633 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 105.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 384(Integer), 3413(Integer), 3421(Integer), 2025-06-17T00:58:10.633144400(LocalDateTime), 2025-06-17T00:58:10.633144400(LocalDateTime)
2025-06-17 00:58:10.634 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.634 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 105.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 385(Integer), 3422(Integer), 3429(Integer), 2025-06-17T00:58:10.634156800(LocalDateTime), 2025-06-17T00:58:10.634156800(LocalDateTime)
2025-06-17 00:58:10.635 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.635 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 106(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 386(Integer), 3430(Integer), 3457(Integer), 2025-06-17T00:58:10.635160700(LocalDateTime), 2025-06-17T00:58:10.635160700(LocalDateTime)
2025-06-17 00:58:10.635 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.635 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 106.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 387(Integer), 3434(Integer), 3444(Integer), 2025-06-17T00:58:10.635160700(LocalDateTime), 2025-06-17T00:58:10.635160700(LocalDateTime)
2025-06-17 00:58:10.635 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.636 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 106.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 388(Integer), 3445(Integer), 3457(Integer), 2025-06-17T00:58:10.635160700(LocalDateTime), 2025-06-17T00:58:10.635160700(LocalDateTime)
2025-06-17 00:58:10.636 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.636 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 107(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 389(Integer), 3458(Integer), 3506(Integer), 2025-06-17T00:58:10.636310800(LocalDateTime), 2025-06-17T00:58:10.636310800(LocalDateTime)
2025-06-17 00:58:10.636 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.637 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 107.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 390(Integer), 3462(Integer), 3482(Integer), 2025-06-17T00:58:10.636310800(LocalDateTime), 2025-06-17T00:58:10.636310800(LocalDateTime)
2025-06-17 00:58:10.637 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.637 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 107.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 391(Integer), 3466(Integer), 3474(Integer), 2025-06-17T00:58:10.637276(LocalDateTime), 2025-06-17T00:58:10.637276(LocalDateTime)
2025-06-17 00:58:10.637 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.637 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 107.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 392(Integer), 3475(Integer), 3482(Integer), 2025-06-17T00:58:10.637276(LocalDateTime), 2025-06-17T00:58:10.637276(LocalDateTime)
2025-06-17 00:58:10.637 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.637 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 107.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 393(Integer), 3483(Integer), 3506(Integer), 2025-06-17T00:58:10.637276(LocalDateTime), 2025-06-17T00:58:10.637276(LocalDateTime)
2025-06-17 00:58:10.637 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.637 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 108(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 394(Integer), 3507(Integer), 3527(Integer), 2025-06-17T00:58:10.637276(LocalDateTime), 2025-06-17T00:58:10.637276(LocalDateTime)
2025-06-17 00:58:10.637 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.638 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 108.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 395(Integer), 3511(Integer), 3519(Integer), 2025-06-17T00:58:10.637276(LocalDateTime), 2025-06-17T00:58:10.637276(LocalDateTime)
2025-06-17 00:58:10.638 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.639 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 108.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 396(Integer), 3520(Integer), 3527(Integer), 2025-06-17T00:58:10.638285100(LocalDateTime), 2025-06-17T00:58:10.638285100(LocalDateTime)
2025-06-17 00:58:10.640 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.640 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 109(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 397(Integer), 3528(Integer), 3555(Integer), 2025-06-17T00:58:10.640271800(LocalDateTime), 2025-06-17T00:58:10.640271800(LocalDateTime)
2025-06-17 00:58:10.640 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.641 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 109.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 398(Integer), 3532(Integer), 3542(Integer), 2025-06-17T00:58:10.641268300(LocalDateTime), 2025-06-17T00:58:10.641268300(LocalDateTime)
2025-06-17 00:58:10.642 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.642 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 109.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 399(Integer), 3543(Integer), 3555(Integer), 2025-06-17T00:58:10.642268600(LocalDateTime), 2025-06-17T00:58:10.642268600(LocalDateTime)
2025-06-17 00:58:10.643 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.643 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 110(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 400(Integer), 3556(Integer), 3604(Integer), 2025-06-17T00:58:10.643272100(LocalDateTime), 2025-06-17T00:58:10.643272100(LocalDateTime)
2025-06-17 00:58:10.644 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.644 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 110.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 401(Integer), 3560(Integer), 3580(Integer), 2025-06-17T00:58:10.644270500(LocalDateTime), 2025-06-17T00:58:10.644270500(LocalDateTime)
2025-06-17 00:58:10.644 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.645 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 110.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 402(Integer), 3564(Integer), 3572(Integer), 2025-06-17T00:58:10.644270500(LocalDateTime), 2025-06-17T00:58:10.645273100(LocalDateTime)
2025-06-17 00:58:10.645 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.645 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 110.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 403(Integer), 3573(Integer), 3580(Integer), 2025-06-17T00:58:10.645783200(LocalDateTime), 2025-06-17T00:58:10.645783200(LocalDateTime)
2025-06-17 00:58:10.646 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.646 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 110.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 404(Integer), 3581(Integer), 3604(Integer), 2025-06-17T00:58:10.646294(LocalDateTime), 2025-06-17T00:58:10.646294(LocalDateTime)
2025-06-17 00:58:10.646 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.647 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 111(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 405(Integer), 3605(Integer), 3625(Integer), 2025-06-17T00:58:10.647307900(LocalDateTime), 2025-06-17T00:58:10.647307900(LocalDateTime)
2025-06-17 00:58:10.647 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.647 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 111.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 406(Integer), 3609(Integer), 3617(Integer), 2025-06-17T00:58:10.647307900(LocalDateTime), 2025-06-17T00:58:10.647307900(LocalDateTime)
2025-06-17 00:58:10.647 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.648 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 111.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 407(Integer), 3618(Integer), 3625(Integer), 2025-06-17T00:58:10.647307900(LocalDateTime), 2025-06-17T00:58:10.647307900(LocalDateTime)
2025-06-17 00:58:10.648 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.649 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 112(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 408(Integer), 3626(Integer), 3653(Integer), 2025-06-17T00:58:10.648306200(LocalDateTime), 2025-06-17T00:58:10.648306200(LocalDateTime)
2025-06-17 00:58:10.649 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.649 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 112.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 409(Integer), 3630(Integer), 3640(Integer), 2025-06-17T00:58:10.649317(LocalDateTime), 2025-06-17T00:58:10.649317(LocalDateTime)
2025-06-17 00:58:10.650 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.650 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 112.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 410(Integer), 3641(Integer), 3653(Integer), 2025-06-17T00:58:10.650316800(LocalDateTime), 2025-06-17T00:58:10.650316800(LocalDateTime)
2025-06-17 00:58:10.650 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.651 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 113(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 411(Integer), 3654(Integer), 3702(Integer), 2025-06-17T00:58:10.650316800(LocalDateTime), 2025-06-17T00:58:10.651316800(LocalDateTime)
2025-06-17 00:58:10.651 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.652 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 113.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 412(Integer), 3658(Integer), 3678(Integer), 2025-06-17T00:58:10.651316800(LocalDateTime), 2025-06-17T00:58:10.652315800(LocalDateTime)
2025-06-17 00:58:10.652 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.652 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 113.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 413(Integer), 3662(Integer), 3670(Integer), 2025-06-17T00:58:10.652315800(LocalDateTime), 2025-06-17T00:58:10.652315800(LocalDateTime)
2025-06-17 00:58:10.653 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.653 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 113.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 414(Integer), 3671(Integer), 3678(Integer), 2025-06-17T00:58:10.653316100(LocalDateTime), 2025-06-17T00:58:10.653316100(LocalDateTime)
2025-06-17 00:58:10.653 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.653 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 113.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 415(Integer), 3679(Integer), 3702(Integer), 2025-06-17T00:58:10.653316100(LocalDateTime), 2025-06-17T00:58:10.653316100(LocalDateTime)
2025-06-17 00:58:10.653 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.653 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 114(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 416(Integer), 3703(Integer), 3723(Integer), 2025-06-17T00:58:10.653316100(LocalDateTime), 2025-06-17T00:58:10.653316100(LocalDateTime)
2025-06-17 00:58:10.654 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.654 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 114.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 417(Integer), 3707(Integer), 3715(Integer), 2025-06-17T00:58:10.654493100(LocalDateTime), 2025-06-17T00:58:10.654493100(LocalDateTime)
2025-06-17 00:58:10.655 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.655 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 114.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 418(Integer), 3716(Integer), 3723(Integer), 2025-06-17T00:58:10.655004500(LocalDateTime), 2025-06-17T00:58:10.655004500(LocalDateTime)
2025-06-17 00:58:10.655 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.655 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 115(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 419(Integer), 3724(Integer), 3751(Integer), 2025-06-17T00:58:10.655004500(LocalDateTime), 2025-06-17T00:58:10.655004500(LocalDateTime)
2025-06-17 00:58:10.655 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.655 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 115.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 420(Integer), 3728(Integer), 3738(Integer), 2025-06-17T00:58:10.655004500(LocalDateTime), 2025-06-17T00:58:10.655004500(LocalDateTime)
2025-06-17 00:58:10.655 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.655 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 115.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 421(Integer), 3739(Integer), 3751(Integer), 2025-06-17T00:58:10.655004500(LocalDateTime), 2025-06-17T00:58:10.655004500(LocalDateTime)
2025-06-17 00:58:10.656 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.656 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 116(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 422(Integer), 3752(Integer), 3800(Integer), 2025-06-17T00:58:10.656559200(LocalDateTime), 2025-06-17T00:58:10.656559200(LocalDateTime)
2025-06-17 00:58:10.656 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.656 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 116.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 423(Integer), 3756(Integer), 3776(Integer), 2025-06-17T00:58:10.656559200(LocalDateTime), 2025-06-17T00:58:10.656559200(LocalDateTime)
2025-06-17 00:58:10.656 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.657 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 116.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 424(Integer), 3760(Integer), 3768(Integer), 2025-06-17T00:58:10.656559200(LocalDateTime), 2025-06-17T00:58:10.656559200(LocalDateTime)
2025-06-17 00:58:10.657 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.657 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 116.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 425(Integer), 3769(Integer), 3776(Integer), 2025-06-17T00:58:10.657584800(LocalDateTime), 2025-06-17T00:58:10.657584800(LocalDateTime)
2025-06-17 00:58:10.657 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.657 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 116.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 426(Integer), 3777(Integer), 3800(Integer), 2025-06-17T00:58:10.657584800(LocalDateTime), 2025-06-17T00:58:10.657584800(LocalDateTime)
2025-06-17 00:58:10.657 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.658 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 117(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 427(Integer), 3801(Integer), 3821(Integer), 2025-06-17T00:58:10.657584800(LocalDateTime), 2025-06-17T00:58:10.657584800(LocalDateTime)
2025-06-17 00:58:10.658 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.658 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 117.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 428(Integer), 3805(Integer), 3813(Integer), 2025-06-17T00:58:10.658568800(LocalDateTime), 2025-06-17T00:58:10.658568800(LocalDateTime)
2025-06-17 00:58:10.658 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.658 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 117.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 429(Integer), 3814(Integer), 3821(Integer), 2025-06-17T00:58:10.658568800(LocalDateTime), 2025-06-17T00:58:10.658568800(LocalDateTime)
2025-06-17 00:58:10.658 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.658 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 118(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 430(Integer), 3822(Integer), 3849(Integer), 2025-06-17T00:58:10.658568800(LocalDateTime), 2025-06-17T00:58:10.658568800(LocalDateTime)
2025-06-17 00:58:10.659 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.659 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 118.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 431(Integer), 3826(Integer), 3836(Integer), 2025-06-17T00:58:10.659569500(LocalDateTime), 2025-06-17T00:58:10.659569500(LocalDateTime)
2025-06-17 00:58:10.659 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.659 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 118.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 432(Integer), 3837(Integer), 3849(Integer), 2025-06-17T00:58:10.659569500(LocalDateTime), 2025-06-17T00:58:10.659569500(LocalDateTime)
2025-06-17 00:58:10.659 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.659 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 119(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 433(Integer), 3850(Integer), 3898(Integer), 2025-06-17T00:58:10.659569500(LocalDateTime), 2025-06-17T00:58:10.659569500(LocalDateTime)
2025-06-17 00:58:10.659 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.660 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 119.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 434(Integer), 3854(Integer), 3874(Integer), 2025-06-17T00:58:10.659569500(LocalDateTime), 2025-06-17T00:58:10.659569500(LocalDateTime)
2025-06-17 00:58:10.660 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.660 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 119.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 435(Integer), 3858(Integer), 3866(Integer), 2025-06-17T00:58:10.660574200(LocalDateTime), 2025-06-17T00:58:10.660574200(LocalDateTime)
2025-06-17 00:58:10.660 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.661 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 119.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 436(Integer), 3867(Integer), 3874(Integer), 2025-06-17T00:58:10.660574200(LocalDateTime), 2025-06-17T00:58:10.660574200(LocalDateTime)
2025-06-17 00:58:10.661 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.661 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 119.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 437(Integer), 3875(Integer), 3898(Integer), 2025-06-17T00:58:10.661573700(LocalDateTime), 2025-06-17T00:58:10.661573700(LocalDateTime)
2025-06-17 00:58:10.662 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.662 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 120(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 438(Integer), 3899(Integer), 3919(Integer), 2025-06-17T00:58:10.662569400(LocalDateTime), 2025-06-17T00:58:10.662569400(LocalDateTime)
2025-06-17 00:58:10.663 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.663 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 120.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 439(Integer), 3903(Integer), 3911(Integer), 2025-06-17T00:58:10.663570400(LocalDateTime), 2025-06-17T00:58:10.663570400(LocalDateTime)
2025-06-17 00:58:10.663 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.665 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 120.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 440(Integer), 3912(Integer), 3919(Integer), 2025-06-17T00:58:10.663570400(LocalDateTime), 2025-06-17T00:58:10.663570400(LocalDateTime)
2025-06-17 00:58:10.665 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.665 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 121(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 441(Integer), 3920(Integer), 3947(Integer), 2025-06-17T00:58:10.665138400(LocalDateTime), 2025-06-17T00:58:10.665138400(LocalDateTime)
2025-06-17 00:58:10.665 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.665 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 121.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 442(Integer), 3924(Integer), 3934(Integer), 2025-06-17T00:58:10.665138400(LocalDateTime), 2025-06-17T00:58:10.665138400(LocalDateTime)
2025-06-17 00:58:10.665 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.665 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 121.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 443(Integer), 3935(Integer), 3947(Integer), 2025-06-17T00:58:10.665138400(LocalDateTime), 2025-06-17T00:58:10.665138400(LocalDateTime)
2025-06-17 00:58:10.665 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.665 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 122(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 444(Integer), 3948(Integer), 3996(Integer), 2025-06-17T00:58:10.665138400(LocalDateTime), 2025-06-17T00:58:10.665138400(LocalDateTime)
2025-06-17 00:58:10.666 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.666 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 122.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 445(Integer), 3952(Integer), 3972(Integer), 2025-06-17T00:58:10.666652400(LocalDateTime), 2025-06-17T00:58:10.666652400(LocalDateTime)
2025-06-17 00:58:10.666 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.666 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 122.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 446(Integer), 3956(Integer), 3964(Integer), 2025-06-17T00:58:10.666652400(LocalDateTime), 2025-06-17T00:58:10.666652400(LocalDateTime)
2025-06-17 00:58:10.667 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.667 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 122.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 447(Integer), 3965(Integer), 3972(Integer), 2025-06-17T00:58:10.667669300(LocalDateTime), 2025-06-17T00:58:10.667669300(LocalDateTime)
2025-06-17 00:58:10.667 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.667 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 122.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 448(Integer), 3973(Integer), 3996(Integer), 2025-06-17T00:58:10.667669300(LocalDateTime), 2025-06-17T00:58:10.667669300(LocalDateTime)
2025-06-17 00:58:10.667 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.667 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 123(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 449(Integer), 3997(Integer), 4017(Integer), 2025-06-17T00:58:10.667669300(LocalDateTime), 2025-06-17T00:58:10.667669300(LocalDateTime)
2025-06-17 00:58:10.667 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.667 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 123.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 450(Integer), 4001(Integer), 4009(Integer), 2025-06-17T00:58:10.667669300(LocalDateTime), 2025-06-17T00:58:10.667669300(LocalDateTime)
2025-06-17 00:58:10.669 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.669 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 123.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 451(Integer), 4010(Integer), 4017(Integer), 2025-06-17T00:58:10.669178900(LocalDateTime), 2025-06-17T00:58:10.669178900(LocalDateTime)
2025-06-17 00:58:10.669 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.670 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 124(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 452(Integer), 4018(Integer), 4045(Integer), 2025-06-17T00:58:10.669178900(LocalDateTime), 2025-06-17T00:58:10.669178900(LocalDateTime)
2025-06-17 00:58:10.670 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.670 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 124.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 453(Integer), 4022(Integer), 4032(Integer), 2025-06-17T00:58:10.670194700(LocalDateTime), 2025-06-17T00:58:10.670194700(LocalDateTime)
2025-06-17 00:58:10.671 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.672 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 124.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 454(Integer), 4033(Integer), 4045(Integer), 2025-06-17T00:58:10.671189400(LocalDateTime), 2025-06-17T00:58:10.671189400(LocalDateTime)
2025-06-17 00:58:10.672 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.673 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 125(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 455(Integer), 4046(Integer), 4094(Integer), 2025-06-17T00:58:10.672188600(LocalDateTime), 2025-06-17T00:58:10.672188600(LocalDateTime)
2025-06-17 00:58:10.673 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.673 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 125.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 456(Integer), 4050(Integer), 4070(Integer), 2025-06-17T00:58:10.673192300(LocalDateTime), 2025-06-17T00:58:10.673192300(LocalDateTime)
2025-06-17 00:58:10.674 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.674 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 125.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 457(Integer), 4054(Integer), 4062(Integer), 2025-06-17T00:58:10.674191700(LocalDateTime), 2025-06-17T00:58:10.674191700(LocalDateTime)
2025-06-17 00:58:10.674 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.675 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 125.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 458(Integer), 4063(Integer), 4070(Integer), 2025-06-17T00:58:10.674191700(LocalDateTime), 2025-06-17T00:58:10.674191700(LocalDateTime)
2025-06-17 00:58:10.675 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.675 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 125.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 459(Integer), 4071(Integer), 4094(Integer), 2025-06-17T00:58:10.675702100(LocalDateTime), 2025-06-17T00:58:10.675702100(LocalDateTime)
2025-06-17 00:58:10.675 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.675 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 126(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 460(Integer), 4095(Integer), 4115(Integer), 2025-06-17T00:58:10.675702100(LocalDateTime), 2025-06-17T00:58:10.675702100(LocalDateTime)
2025-06-17 00:58:10.676 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.676 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 126.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 461(Integer), 4099(Integer), 4107(Integer), 2025-06-17T00:58:10.676712900(LocalDateTime), 2025-06-17T00:58:10.676712900(LocalDateTime)
2025-06-17 00:58:10.676 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.676 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 126.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 462(Integer), 4108(Integer), 4115(Integer), 2025-06-17T00:58:10.676712900(LocalDateTime), 2025-06-17T00:58:10.676712900(LocalDateTime)
2025-06-17 00:58:10.677 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.677 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 127(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 463(Integer), 4116(Integer), 4143(Integer), 2025-06-17T00:58:10.677725700(LocalDateTime), 2025-06-17T00:58:10.677725700(LocalDateTime)
2025-06-17 00:58:10.677 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.678 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 127.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 464(Integer), 4120(Integer), 4130(Integer), 2025-06-17T00:58:10.677725700(LocalDateTime), 2025-06-17T00:58:10.677725700(LocalDateTime)
2025-06-17 00:58:10.679 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.679 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 127.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 465(Integer), 4131(Integer), 4143(Integer), 2025-06-17T00:58:10.679727500(LocalDateTime), 2025-06-17T00:58:10.679727500(LocalDateTime)
2025-06-17 00:58:10.680 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.680 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 128(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 466(Integer), 4144(Integer), 4192(Integer), 2025-06-17T00:58:10.680808100(LocalDateTime), 2025-06-17T00:58:10.680808100(LocalDateTime)
2025-06-17 00:58:10.681 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.681 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 128.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 467(Integer), 4148(Integer), 4168(Integer), 2025-06-17T00:58:10.681807800(LocalDateTime), 2025-06-17T00:58:10.681807800(LocalDateTime)
2025-06-17 00:58:10.681 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.681 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 128.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 468(Integer), 4152(Integer), 4160(Integer), 2025-06-17T00:58:10.681807800(LocalDateTime), 2025-06-17T00:58:10.681807800(LocalDateTime)
2025-06-17 00:58:10.682 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.682 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 128.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 469(Integer), 4161(Integer), 4168(Integer), 2025-06-17T00:58:10.682806400(LocalDateTime), 2025-06-17T00:58:10.682806400(LocalDateTime)
2025-06-17 00:58:10.682 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.683 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 128.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 470(Integer), 4169(Integer), 4192(Integer), 2025-06-17T00:58:10.682806400(LocalDateTime), 2025-06-17T00:58:10.682806400(LocalDateTime)
2025-06-17 00:58:10.683 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.683 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 129(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 471(Integer), 4193(Integer), 4213(Integer), 2025-06-17T00:58:10.683806500(LocalDateTime), 2025-06-17T00:58:10.683806500(LocalDateTime)
2025-06-17 00:58:10.683 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.683 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 129.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 472(Integer), 4197(Integer), 4205(Integer), 2025-06-17T00:58:10.683806500(LocalDateTime), 2025-06-17T00:58:10.683806500(LocalDateTime)
2025-06-17 00:58:10.683 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.685 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 129.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 473(Integer), 4206(Integer), 4213(Integer), 2025-06-17T00:58:10.683806500(LocalDateTime), 2025-06-17T00:58:10.683806500(LocalDateTime)
2025-06-17 00:58:10.685 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.685 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 130(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 474(Integer), 4214(Integer), 4241(Integer), 2025-06-17T00:58:10.685367(LocalDateTime), 2025-06-17T00:58:10.685367(LocalDateTime)
2025-06-17 00:58:10.686 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.686 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 130.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 475(Integer), 4218(Integer), 4228(Integer), 2025-06-17T00:58:10.686329300(LocalDateTime), 2025-06-17T00:58:10.686329300(LocalDateTime)
2025-06-17 00:58:10.686 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.686 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 130.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 476(Integer), 4229(Integer), 4241(Integer), 2025-06-17T00:58:10.686329300(LocalDateTime), 2025-06-17T00:58:10.686329300(LocalDateTime)
2025-06-17 00:58:10.687 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.687 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 131(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 477(Integer), 4242(Integer), 4290(Integer), 2025-06-17T00:58:10.687593900(LocalDateTime), 2025-06-17T00:58:10.687593900(LocalDateTime)
2025-06-17 00:58:10.687 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.688 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 131.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 478(Integer), 4246(Integer), 4266(Integer), 2025-06-17T00:58:10.688596800(LocalDateTime), 2025-06-17T00:58:10.688596800(LocalDateTime)
2025-06-17 00:58:10.688 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.689 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 131.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 479(Integer), 4250(Integer), 4258(Integer), 2025-06-17T00:58:10.688596800(LocalDateTime), 2025-06-17T00:58:10.688596800(LocalDateTime)
2025-06-17 00:58:10.689 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.689 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 131.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 480(Integer), 4259(Integer), 4266(Integer), 2025-06-17T00:58:10.689594800(LocalDateTime), 2025-06-17T00:58:10.689594800(LocalDateTime)
2025-06-17 00:58:10.690 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.690 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 131.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 481(Integer), 4267(Integer), 4290(Integer), 2025-06-17T00:58:10.690592100(LocalDateTime), 2025-06-17T00:58:10.690592100(LocalDateTime)
2025-06-17 00:58:10.691 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.691 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 132(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 482(Integer), 4291(Integer), 4311(Integer), 2025-06-17T00:58:10.691592(LocalDateTime), 2025-06-17T00:58:10.691592(LocalDateTime)
2025-06-17 00:58:10.691 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.691 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 132.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 483(Integer), 4295(Integer), 4303(Integer), 2025-06-17T00:58:10.691592(LocalDateTime), 2025-06-17T00:58:10.691592(LocalDateTime)
2025-06-17 00:58:10.691 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.692 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 132.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 484(Integer), 4304(Integer), 4311(Integer), 2025-06-17T00:58:10.692594400(LocalDateTime), 2025-06-17T00:58:10.692594400(LocalDateTime)
2025-06-17 00:58:10.692 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.692 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 133(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 485(Integer), 4312(Integer), 4339(Integer), 2025-06-17T00:58:10.692594400(LocalDateTime), 2025-06-17T00:58:10.692594400(LocalDateTime)
2025-06-17 00:58:10.692 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.693 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 133.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 486(Integer), 4316(Integer), 4326(Integer), 2025-06-17T00:58:10.692594400(LocalDateTime), 2025-06-17T00:58:10.692594400(LocalDateTime)
2025-06-17 00:58:10.693 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.693 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 133.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 487(Integer), 4327(Integer), 4339(Integer), 2025-06-17T00:58:10.693594100(LocalDateTime), 2025-06-17T00:58:10.693594100(LocalDateTime)
2025-06-17 00:58:10.693 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.693 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 134(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 488(Integer), 4340(Integer), 4388(Integer), 2025-06-17T00:58:10.693594100(LocalDateTime), 2025-06-17T00:58:10.693594100(LocalDateTime)
2025-06-17 00:58:10.693 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.693 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 134.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 489(Integer), 4344(Integer), 4364(Integer), 2025-06-17T00:58:10.693594100(LocalDateTime), 2025-06-17T00:58:10.693594100(LocalDateTime)
2025-06-17 00:58:10.693 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.693 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 134.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 490(Integer), 4348(Integer), 4356(Integer), 2025-06-17T00:58:10.693594100(LocalDateTime), 2025-06-17T00:58:10.693594100(LocalDateTime)
2025-06-17 00:58:10.693 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.695 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 134.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 491(Integer), 4357(Integer), 4364(Integer), 2025-06-17T00:58:10.693594100(LocalDateTime), 2025-06-17T00:58:10.693594100(LocalDateTime)
2025-06-17 00:58:10.695 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.695 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 134.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 492(Integer), 4365(Integer), 4388(Integer), 2025-06-17T00:58:10.695231400(LocalDateTime), 2025-06-17T00:58:10.695231400(LocalDateTime)
2025-06-17 00:58:10.696 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.696 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 135(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 493(Integer), 4389(Integer), 4409(Integer), 2025-06-17T00:58:10.696663200(LocalDateTime), 2025-06-17T00:58:10.696663200(LocalDateTime)
2025-06-17 00:58:10.696 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.696 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 135.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 494(Integer), 4393(Integer), 4401(Integer), 2025-06-17T00:58:10.696663200(LocalDateTime), 2025-06-17T00:58:10.696663200(LocalDateTime)
2025-06-17 00:58:10.697 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.697 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 135.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 495(Integer), 4402(Integer), 4409(Integer), 2025-06-17T00:58:10.697679100(LocalDateTime), 2025-06-17T00:58:10.697679100(LocalDateTime)
2025-06-17 00:58:10.697 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.697 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 136(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 496(Integer), 4410(Integer), 4437(Integer), 2025-06-17T00:58:10.697679100(LocalDateTime), 2025-06-17T00:58:10.697679100(LocalDateTime)
2025-06-17 00:58:10.697 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.698 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 136.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 497(Integer), 4414(Integer), 4424(Integer), 2025-06-17T00:58:10.697679100(LocalDateTime), 2025-06-17T00:58:10.697679100(LocalDateTime)
2025-06-17 00:58:10.698 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.698 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 136.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 498(Integer), 4425(Integer), 4437(Integer), 2025-06-17T00:58:10.698676300(LocalDateTime), 2025-06-17T00:58:10.698676300(LocalDateTime)
2025-06-17 00:58:10.698 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.699 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 137(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 499(Integer), 4438(Integer), 4486(Integer), 2025-06-17T00:58:10.698676300(LocalDateTime), 2025-06-17T00:58:10.698676300(LocalDateTime)
2025-06-17 00:58:10.700 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.701 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 137.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 500(Integer), 4442(Integer), 4462(Integer), 2025-06-17T00:58:10.701675400(LocalDateTime), 2025-06-17T00:58:10.701675400(LocalDateTime)
2025-06-17 00:58:10.703 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.703 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 137.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 501(Integer), 4446(Integer), 4454(Integer), 2025-06-17T00:58:10.703676700(LocalDateTime), 2025-06-17T00:58:10.703676700(LocalDateTime)
2025-06-17 00:58:10.703 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.703 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 137.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 502(Integer), 4455(Integer), 4462(Integer), 2025-06-17T00:58:10.703676700(LocalDateTime), 2025-06-17T00:58:10.703676700(LocalDateTime)
2025-06-17 00:58:10.703 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.703 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 137.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 503(Integer), 4463(Integer), 4486(Integer), 2025-06-17T00:58:10.703676700(LocalDateTime), 2025-06-17T00:58:10.703676700(LocalDateTime)
2025-06-17 00:58:10.705 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.705 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 138(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 504(Integer), 4487(Integer), 4507(Integer), 2025-06-17T00:58:10.705190300(LocalDateTime), 2025-06-17T00:58:10.705190300(LocalDateTime)
2025-06-17 00:58:10.705 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.705 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 138.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 505(Integer), 4491(Integer), 4499(Integer), 2025-06-17T00:58:10.705190300(LocalDateTime), 2025-06-17T00:58:10.705190300(LocalDateTime)
2025-06-17 00:58:10.705 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.705 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 138.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 506(Integer), 4500(Integer), 4507(Integer), 2025-06-17T00:58:10.705190300(LocalDateTime), 2025-06-17T00:58:10.705190300(LocalDateTime)
2025-06-17 00:58:10.705 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.705 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 139(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 507(Integer), 4508(Integer), 4535(Integer), 2025-06-17T00:58:10.705190300(LocalDateTime), 2025-06-17T00:58:10.705190300(LocalDateTime)
2025-06-17 00:58:10.705 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.706 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 139.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 508(Integer), 4512(Integer), 4522(Integer), 2025-06-17T00:58:10.706738500(LocalDateTime), 2025-06-17T00:58:10.706738500(LocalDateTime)
2025-06-17 00:58:10.706 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.706 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 139.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 509(Integer), 4523(Integer), 4535(Integer), 2025-06-17T00:58:10.706738500(LocalDateTime), 2025-06-17T00:58:10.706738500(LocalDateTime)
2025-06-17 00:58:10.706 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.707 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 140(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 510(Integer), 4536(Integer), 4584(Integer), 2025-06-17T00:58:10.706738500(LocalDateTime), 2025-06-17T00:58:10.706738500(LocalDateTime)
2025-06-17 00:58:10.707 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.707 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 140.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 511(Integer), 4540(Integer), 4560(Integer), 2025-06-17T00:58:10.707751300(LocalDateTime), 2025-06-17T00:58:10.707751300(LocalDateTime)
2025-06-17 00:58:10.707 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.707 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 140.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 512(Integer), 4544(Integer), 4552(Integer), 2025-06-17T00:58:10.707751300(LocalDateTime), 2025-06-17T00:58:10.707751300(LocalDateTime)
2025-06-17 00:58:10.707 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.708 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 140.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 513(Integer), 4553(Integer), 4560(Integer), 2025-06-17T00:58:10.707751300(LocalDateTime), 2025-06-17T00:58:10.707751300(LocalDateTime)
2025-06-17 00:58:10.708 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.708 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 140.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 514(Integer), 4561(Integer), 4584(Integer), 2025-06-17T00:58:10.708751400(LocalDateTime), 2025-06-17T00:58:10.708751400(LocalDateTime)
2025-06-17 00:58:10.708 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.708 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 141(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 515(Integer), 4585(Integer), 4605(Integer), 2025-06-17T00:58:10.708751400(LocalDateTime), 2025-06-17T00:58:10.708751400(LocalDateTime)
2025-06-17 00:58:10.708 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.708 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 141.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 516(Integer), 4589(Integer), 4597(Integer), 2025-06-17T00:58:10.708751400(LocalDateTime), 2025-06-17T00:58:10.708751400(LocalDateTime)
2025-06-17 00:58:10.709 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.709 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 141.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 517(Integer), 4598(Integer), 4605(Integer), 2025-06-17T00:58:10.709749800(LocalDateTime), 2025-06-17T00:58:10.709749800(LocalDateTime)
2025-06-17 00:58:10.709 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.709 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 142(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 518(Integer), 4606(Integer), 4633(Integer), 2025-06-17T00:58:10.709749800(LocalDateTime), 2025-06-17T00:58:10.709749800(LocalDateTime)
2025-06-17 00:58:10.709 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.709 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 142.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 519(Integer), 4610(Integer), 4620(Integer), 2025-06-17T00:58:10.709749800(LocalDateTime), 2025-06-17T00:58:10.709749800(LocalDateTime)
2025-06-17 00:58:10.709 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.709 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 142.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 520(Integer), 4621(Integer), 4633(Integer), 2025-06-17T00:58:10.709749800(LocalDateTime), 2025-06-17T00:58:10.709749800(LocalDateTime)
2025-06-17 00:58:10.710 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.710 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 143(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 521(Integer), 4634(Integer), 4682(Integer), 2025-06-17T00:58:10.710750600(LocalDateTime), 2025-06-17T00:58:10.710750600(LocalDateTime)
2025-06-17 00:58:10.710 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.710 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 143.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 522(Integer), 4638(Integer), 4658(Integer), 2025-06-17T00:58:10.710750600(LocalDateTime), 2025-06-17T00:58:10.710750600(LocalDateTime)
2025-06-17 00:58:10.711 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.711 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 143.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 523(Integer), 4642(Integer), 4650(Integer), 2025-06-17T00:58:10.711751400(LocalDateTime), 2025-06-17T00:58:10.711751400(LocalDateTime)
2025-06-17 00:58:10.711 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.711 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 143.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 524(Integer), 4651(Integer), 4658(Integer), 2025-06-17T00:58:10.711751400(LocalDateTime), 2025-06-17T00:58:10.711751400(LocalDateTime)
2025-06-17 00:58:10.712 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.712 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 143.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 525(Integer), 4659(Integer), 4682(Integer), 2025-06-17T00:58:10.712750400(LocalDateTime), 2025-06-17T00:58:10.712750400(LocalDateTime)
2025-06-17 00:58:10.712 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.713 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 144(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 526(Integer), 4683(Integer), 4703(Integer), 2025-06-17T00:58:10.712750400(LocalDateTime), 2025-06-17T00:58:10.712750400(LocalDateTime)
2025-06-17 00:58:10.713 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.713 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 144.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 527(Integer), 4687(Integer), 4695(Integer), 2025-06-17T00:58:10.713750200(LocalDateTime), 2025-06-17T00:58:10.713750200(LocalDateTime)
2025-06-17 00:58:10.715 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.715 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 144.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 528(Integer), 4696(Integer), 4703(Integer), 2025-06-17T00:58:10.715262400(LocalDateTime), 2025-06-17T00:58:10.715262400(LocalDateTime)
2025-06-17 00:58:10.716 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.716 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 145(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 529(Integer), 4704(Integer), 4731(Integer), 2025-06-17T00:58:10.716282200(LocalDateTime), 2025-06-17T00:58:10.716282200(LocalDateTime)
2025-06-17 00:58:10.716 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.716 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 145.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 530(Integer), 4708(Integer), 4718(Integer), 2025-06-17T00:58:10.716801(LocalDateTime), 2025-06-17T00:58:10.716801(LocalDateTime)
2025-06-17 00:58:10.717 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.717 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 145.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 531(Integer), 4719(Integer), 4731(Integer), 2025-06-17T00:58:10.717818(LocalDateTime), 2025-06-17T00:58:10.717818(LocalDateTime)
2025-06-17 00:58:10.718 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.718 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 146(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 532(Integer), 4732(Integer), 4780(Integer), 2025-06-17T00:58:10.718822600(LocalDateTime), 2025-06-17T00:58:10.718822600(LocalDateTime)
2025-06-17 00:58:10.719 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.720 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 146.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 533(Integer), 4736(Integer), 4756(Integer), 2025-06-17T00:58:10.719818300(LocalDateTime), 2025-06-17T00:58:10.719818300(LocalDateTime)
2025-06-17 00:58:10.720 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.720 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 146.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 534(Integer), 4740(Integer), 4748(Integer), 2025-06-17T00:58:10.720811900(LocalDateTime), 2025-06-17T00:58:10.720811900(LocalDateTime)
2025-06-17 00:58:10.721 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.730 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 146.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 535(Integer), 4749(Integer), 4756(Integer), 2025-06-17T00:58:10.721814(LocalDateTime), 2025-06-17T00:58:10.721814(LocalDateTime)
2025-06-17 00:58:10.730 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.730 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 146.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 536(Integer), 4757(Integer), 4780(Integer), 2025-06-17T00:58:10.730410600(LocalDateTime), 2025-06-17T00:58:10.730410600(LocalDateTime)
2025-06-17 00:58:10.730 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.730 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 147(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 537(Integer), 4781(Integer), 4801(Integer), 2025-06-17T00:58:10.730410600(LocalDateTime), 2025-06-17T00:58:10.730410600(LocalDateTime)
2025-06-17 00:58:10.730 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.730 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 147.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 538(Integer), 4785(Integer), 4793(Integer), 2025-06-17T00:58:10.730410600(LocalDateTime), 2025-06-17T00:58:10.730410600(LocalDateTime)
2025-06-17 00:58:10.731 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.731 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 147.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 539(Integer), 4794(Integer), 4801(Integer), 2025-06-17T00:58:10.731413(LocalDateTime), 2025-06-17T00:58:10.731413(LocalDateTime)
2025-06-17 00:58:10.731 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.731 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 148(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 540(Integer), 4802(Integer), 4829(Integer), 2025-06-17T00:58:10.731413(LocalDateTime), 2025-06-17T00:58:10.731413(LocalDateTime)
2025-06-17 00:58:10.731 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.731 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 148.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 541(Integer), 4806(Integer), 4816(Integer), 2025-06-17T00:58:10.731413(LocalDateTime), 2025-06-17T00:58:10.731413(LocalDateTime)
2025-06-17 00:58:10.731 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.731 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 148.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 542(Integer), 4817(Integer), 4829(Integer), 2025-06-17T00:58:10.731413(LocalDateTime), 2025-06-17T00:58:10.731413(LocalDateTime)
2025-06-17 00:58:10.731 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.732 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 149(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 543(Integer), 4830(Integer), 4878(Integer), 2025-06-17T00:58:10.731413(LocalDateTime), 2025-06-17T00:58:10.731413(LocalDateTime)
2025-06-17 00:58:10.732 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.732 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 149.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 544(Integer), 4834(Integer), 4854(Integer), 2025-06-17T00:58:10.732407900(LocalDateTime), 2025-06-17T00:58:10.732407900(LocalDateTime)
2025-06-17 00:58:10.732 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.732 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 149.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 545(Integer), 4838(Integer), 4846(Integer), 2025-06-17T00:58:10.732407900(LocalDateTime), 2025-06-17T00:58:10.732407900(LocalDateTime)
2025-06-17 00:58:10.732 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.732 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 149.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 546(Integer), 4847(Integer), 4854(Integer), 2025-06-17T00:58:10.732407900(LocalDateTime), 2025-06-17T00:58:10.732407900(LocalDateTime)
2025-06-17 00:58:10.732 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.732 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 149.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 547(Integer), 4855(Integer), 4878(Integer), 2025-06-17T00:58:10.732407900(LocalDateTime), 2025-06-17T00:58:10.732407900(LocalDateTime)
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 150(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 548(Integer), 4879(Integer), 4899(Integer), 2025-06-17T00:58:10.733407900(LocalDateTime), 2025-06-17T00:58:10.733407900(LocalDateTime)
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 150.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 549(Integer), 4883(Integer), 4891(Integer), 2025-06-17T00:58:10.733407900(LocalDateTime), 2025-06-17T00:58:10.733407900(LocalDateTime)
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 150.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 550(Integer), 4892(Integer), 4899(Integer), 2025-06-17T00:58:10.733407900(LocalDateTime), 2025-06-17T00:58:10.733407900(LocalDateTime)
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 151(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 551(Integer), 4900(Integer), 4927(Integer), 2025-06-17T00:58:10.733407900(LocalDateTime), 2025-06-17T00:58:10.733407900(LocalDateTime)
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 151.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 552(Integer), 4904(Integer), 4914(Integer), 2025-06-17T00:58:10.733407900(LocalDateTime), 2025-06-17T00:58:10.733407900(LocalDateTime)
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 151.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 553(Integer), 4915(Integer), 4927(Integer), 2025-06-17T00:58:10.733407900(LocalDateTime), 2025-06-17T00:58:10.733407900(LocalDateTime)
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 152(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 554(Integer), 4928(Integer), 4976(Integer), 2025-06-17T00:58:10.733407900(LocalDateTime), 2025-06-17T00:58:10.733407900(LocalDateTime)
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 152.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 555(Integer), 4932(Integer), 4952(Integer), 2025-06-17T00:58:10.733407900(LocalDateTime), 2025-06-17T00:58:10.733407900(LocalDateTime)
2025-06-17 00:58:10.733 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 152.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 556(Integer), 4936(Integer), 4944(Integer), 2025-06-17T00:58:10.734924(LocalDateTime), 2025-06-17T00:58:10.734924(LocalDateTime)
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 152.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 557(Integer), 4945(Integer), 4952(Integer), 2025-06-17T00:58:10.734982(LocalDateTime), 2025-06-17T00:58:10.734982(LocalDateTime)
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 152.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 558(Integer), 4953(Integer), 4976(Integer), 2025-06-17T00:58:10.734982(LocalDateTime), 2025-06-17T00:58:10.734982(LocalDateTime)
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 153(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 559(Integer), 4977(Integer), 4997(Integer), 2025-06-17T00:58:10.734982(LocalDateTime), 2025-06-17T00:58:10.734982(LocalDateTime)
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 153.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 560(Integer), 4981(Integer), 4989(Integer), 2025-06-17T00:58:10.734982(LocalDateTime), 2025-06-17T00:58:10.734982(LocalDateTime)
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 153.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 561(Integer), 4990(Integer), 4997(Integer), 2025-06-17T00:58:10.734982(LocalDateTime), 2025-06-17T00:58:10.734982(LocalDateTime)
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 154(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 562(Integer), 4998(Integer), 5025(Integer), 2025-06-17T00:58:10.734982(LocalDateTime), 2025-06-17T00:58:10.734982(LocalDateTime)
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 154.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 563(Integer), 5002(Integer), 5012(Integer), 2025-06-17T00:58:10.734982(LocalDateTime), 2025-06-17T00:58:10.734982(LocalDateTime)
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 154.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 564(Integer), 5013(Integer), 5025(Integer), 2025-06-17T00:58:10.734982(LocalDateTime), 2025-06-17T00:58:10.734982(LocalDateTime)
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.734 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 155(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 565(Integer), 5026(Integer), 5074(Integer), 2025-06-17T00:58:10.734982(LocalDateTime), 2025-06-17T00:58:10.734982(LocalDateTime)
2025-06-17 00:58:10.736 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.736 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 155.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 566(Integer), 5030(Integer), 5050(Integer), 2025-06-17T00:58:10.736551(LocalDateTime), 2025-06-17T00:58:10.736551(LocalDateTime)
2025-06-17 00:58:10.736 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.736 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 155.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 567(Integer), 5034(Integer), 5042(Integer), 2025-06-17T00:58:10.736551(LocalDateTime), 2025-06-17T00:58:10.736551(LocalDateTime)
2025-06-17 00:58:10.736 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.736 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 155.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 568(Integer), 5043(Integer), 5050(Integer), 2025-06-17T00:58:10.736551(LocalDateTime), 2025-06-17T00:58:10.736551(LocalDateTime)
2025-06-17 00:58:10.737 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.737 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 155.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 569(Integer), 5051(Integer), 5074(Integer), 2025-06-17T00:58:10.737507(LocalDateTime), 2025-06-17T00:58:10.737507(LocalDateTime)
2025-06-17 00:58:10.737 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.737 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 156(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 570(Integer), 5075(Integer), 5095(Integer), 2025-06-17T00:58:10.737507(LocalDateTime), 2025-06-17T00:58:10.737507(LocalDateTime)
2025-06-17 00:58:10.737 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.737 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 156.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 571(Integer), 5079(Integer), 5087(Integer), 2025-06-17T00:58:10.737507(LocalDateTime), 2025-06-17T00:58:10.737507(LocalDateTime)
2025-06-17 00:58:10.737 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.737 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 156.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 572(Integer), 5088(Integer), 5095(Integer), 2025-06-17T00:58:10.737507(LocalDateTime), 2025-06-17T00:58:10.737507(LocalDateTime)
2025-06-17 00:58:10.737 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.737 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 157(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 573(Integer), 5096(Integer), 5123(Integer), 2025-06-17T00:58:10.737507(LocalDateTime), 2025-06-17T00:58:10.737507(LocalDateTime)
2025-06-17 00:58:10.738 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.738 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 157.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 574(Integer), 5100(Integer), 5110(Integer), 2025-06-17T00:58:10.738523500(LocalDateTime), 2025-06-17T00:58:10.738523500(LocalDateTime)
2025-06-17 00:58:10.738 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.738 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 157.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 575(Integer), 5111(Integer), 5123(Integer), 2025-06-17T00:58:10.738523500(LocalDateTime), 2025-06-17T00:58:10.738523500(LocalDateTime)
2025-06-17 00:58:10.738 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.738 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 158(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 576(Integer), 5124(Integer), 5172(Integer), 2025-06-17T00:58:10.738523500(LocalDateTime), 2025-06-17T00:58:10.738523500(LocalDateTime)
2025-06-17 00:58:10.738 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.738 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 158.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 577(Integer), 5128(Integer), 5148(Integer), 2025-06-17T00:58:10.738523500(LocalDateTime), 2025-06-17T00:58:10.738523500(LocalDateTime)
2025-06-17 00:58:10.738 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.739 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 158.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 578(Integer), 5132(Integer), 5140(Integer), 2025-06-17T00:58:10.738523500(LocalDateTime), 2025-06-17T00:58:10.738523500(LocalDateTime)
2025-06-17 00:58:10.739 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.739 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 158.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 579(Integer), 5141(Integer), 5148(Integer), 2025-06-17T00:58:10.739524700(LocalDateTime), 2025-06-17T00:58:10.739524700(LocalDateTime)
2025-06-17 00:58:10.739 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.739 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 158.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 580(Integer), 5149(Integer), 5172(Integer), 2025-06-17T00:58:10.739524700(LocalDateTime), 2025-06-17T00:58:10.739524700(LocalDateTime)
2025-06-17 00:58:10.739 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.739 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 159(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 581(Integer), 5173(Integer), 5193(Integer), 2025-06-17T00:58:10.739524700(LocalDateTime), 2025-06-17T00:58:10.739524700(LocalDateTime)
2025-06-17 00:58:10.739 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.739 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 159.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 582(Integer), 5177(Integer), 5185(Integer), 2025-06-17T00:58:10.739524700(LocalDateTime), 2025-06-17T00:58:10.739524700(LocalDateTime)
2025-06-17 00:58:10.739 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.739 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 159.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 583(Integer), 5186(Integer), 5193(Integer), 2025-06-17T00:58:10.739524700(LocalDateTime), 2025-06-17T00:58:10.739524700(LocalDateTime)
2025-06-17 00:58:10.740 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.740 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 160(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 584(Integer), 5194(Integer), 5221(Integer), 2025-06-17T00:58:10.740519200(LocalDateTime), 2025-06-17T00:58:10.740519200(LocalDateTime)
2025-06-17 00:58:10.740 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.740 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 160.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 585(Integer), 5198(Integer), 5208(Integer), 2025-06-17T00:58:10.740519200(LocalDateTime), 2025-06-17T00:58:10.740519200(LocalDateTime)
2025-06-17 00:58:10.740 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.740 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 160.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 586(Integer), 5209(Integer), 5221(Integer), 2025-06-17T00:58:10.740519200(LocalDateTime), 2025-06-17T00:58:10.740519200(LocalDateTime)
2025-06-17 00:58:10.740 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.740 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 161(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 587(Integer), 5222(Integer), 5270(Integer), 2025-06-17T00:58:10.740519200(LocalDateTime), 2025-06-17T00:58:10.740519200(LocalDateTime)
2025-06-17 00:58:10.740 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.740 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 161.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 588(Integer), 5226(Integer), 5246(Integer), 2025-06-17T00:58:10.740519200(LocalDateTime), 2025-06-17T00:58:10.740519200(LocalDateTime)
2025-06-17 00:58:10.741 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.741 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 161.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 589(Integer), 5230(Integer), 5238(Integer), 2025-06-17T00:58:10.741521600(LocalDateTime), 2025-06-17T00:58:10.741521600(LocalDateTime)
2025-06-17 00:58:10.741 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.741 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 161.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 590(Integer), 5239(Integer), 5246(Integer), 2025-06-17T00:58:10.741521600(LocalDateTime), 2025-06-17T00:58:10.741521600(LocalDateTime)
2025-06-17 00:58:10.741 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.741 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 161.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 591(Integer), 5247(Integer), 5270(Integer), 2025-06-17T00:58:10.741521600(LocalDateTime), 2025-06-17T00:58:10.741521600(LocalDateTime)
2025-06-17 00:58:10.741 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.741 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 162(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 592(Integer), 5271(Integer), 5291(Integer), 2025-06-17T00:58:10.741521600(LocalDateTime), 2025-06-17T00:58:10.741521600(LocalDateTime)
2025-06-17 00:58:10.742 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.742 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 162.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 593(Integer), 5275(Integer), 5283(Integer), 2025-06-17T00:58:10.742519300(LocalDateTime), 2025-06-17T00:58:10.742519300(LocalDateTime)
2025-06-17 00:58:10.742 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.742 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 162.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 594(Integer), 5284(Integer), 5291(Integer), 2025-06-17T00:58:10.742519300(LocalDateTime), 2025-06-17T00:58:10.742519300(LocalDateTime)
2025-06-17 00:58:10.742 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.742 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 163(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 595(Integer), 5292(Integer), 5319(Integer), 2025-06-17T00:58:10.742519300(LocalDateTime), 2025-06-17T00:58:10.742519300(LocalDateTime)
2025-06-17 00:58:10.742 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.743 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 163.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 596(Integer), 5296(Integer), 5306(Integer), 2025-06-17T00:58:10.743522100(LocalDateTime), 2025-06-17T00:58:10.743522100(LocalDateTime)
2025-06-17 00:58:10.743 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.743 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 163.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 597(Integer), 5307(Integer), 5319(Integer), 2025-06-17T00:58:10.743522100(LocalDateTime), 2025-06-17T00:58:10.743522100(LocalDateTime)
2025-06-17 00:58:10.743 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.743 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 164(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 598(Integer), 5320(Integer), 5368(Integer), 2025-06-17T00:58:10.743522100(LocalDateTime), 2025-06-17T00:58:10.743522100(LocalDateTime)
2025-06-17 00:58:10.743 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.743 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 164.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 599(Integer), 5324(Integer), 5344(Integer), 2025-06-17T00:58:10.743522100(LocalDateTime), 2025-06-17T00:58:10.743522100(LocalDateTime)
2025-06-17 00:58:10.743 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.743 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 164.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 600(Integer), 5328(Integer), 5336(Integer), 2025-06-17T00:58:10.743522100(LocalDateTime), 2025-06-17T00:58:10.743522100(LocalDateTime)
2025-06-17 00:58:10.743 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.743 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 164.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 601(Integer), 5337(Integer), 5344(Integer), 2025-06-17T00:58:10.743522100(LocalDateTime), 2025-06-17T00:58:10.743522100(LocalDateTime)
2025-06-17 00:58:10.745 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.745 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 164.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 602(Integer), 5345(Integer), 5368(Integer), 2025-06-17T00:58:10.745085100(LocalDateTime), 2025-06-17T00:58:10.745085100(LocalDateTime)
2025-06-17 00:58:10.745 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.745 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 165(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 603(Integer), 5369(Integer), 5389(Integer), 2025-06-17T00:58:10.745085100(LocalDateTime), 2025-06-17T00:58:10.745085100(LocalDateTime)
2025-06-17 00:58:10.745 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.745 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 165.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 604(Integer), 5373(Integer), 5381(Integer), 2025-06-17T00:58:10.745085100(LocalDateTime), 2025-06-17T00:58:10.745085100(LocalDateTime)
2025-06-17 00:58:10.746 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.746 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 165.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 605(Integer), 5382(Integer), 5389(Integer), 2025-06-17T00:58:10.746597100(LocalDateTime), 2025-06-17T00:58:10.746597100(LocalDateTime)
2025-06-17 00:58:10.746 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.747 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 166(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 606(Integer), 5390(Integer), 5417(Integer), 2025-06-17T00:58:10.746597100(LocalDateTime), 2025-06-17T00:58:10.746597100(LocalDateTime)
2025-06-17 00:58:10.747 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.747 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 166.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 607(Integer), 5394(Integer), 5404(Integer), 2025-06-17T00:58:10.747610700(LocalDateTime), 2025-06-17T00:58:10.747610700(LocalDateTime)
2025-06-17 00:58:10.747 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.747 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 166.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 608(Integer), 5405(Integer), 5417(Integer), 2025-06-17T00:58:10.747610700(LocalDateTime), 2025-06-17T00:58:10.747610700(LocalDateTime)
2025-06-17 00:58:10.747 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.748 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 167(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 609(Integer), 5418(Integer), 5466(Integer), 2025-06-17T00:58:10.747610700(LocalDateTime), 2025-06-17T00:58:10.747610700(LocalDateTime)
2025-06-17 00:58:10.748 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.748 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 167.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 610(Integer), 5422(Integer), 5442(Integer), 2025-06-17T00:58:10.748609400(LocalDateTime), 2025-06-17T00:58:10.748609400(LocalDateTime)
2025-06-17 00:58:10.748 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.748 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 167.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 611(Integer), 5426(Integer), 5434(Integer), 2025-06-17T00:58:10.748609400(LocalDateTime), 2025-06-17T00:58:10.748609400(LocalDateTime)
2025-06-17 00:58:10.748 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.748 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 167.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 612(Integer), 5435(Integer), 5442(Integer), 2025-06-17T00:58:10.748609400(LocalDateTime), 2025-06-17T00:58:10.748609400(LocalDateTime)
2025-06-17 00:58:10.748 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.748 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 167.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 613(Integer), 5443(Integer), 5466(Integer), 2025-06-17T00:58:10.748609400(LocalDateTime), 2025-06-17T00:58:10.748609400(LocalDateTime)
2025-06-17 00:58:10.749 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.749 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 168(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 614(Integer), 5467(Integer), 5487(Integer), 2025-06-17T00:58:10.749612200(LocalDateTime), 2025-06-17T00:58:10.749612200(LocalDateTime)
2025-06-17 00:58:10.749 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.749 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 168.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 615(Integer), 5471(Integer), 5479(Integer), 2025-06-17T00:58:10.749612200(LocalDateTime), 2025-06-17T00:58:10.749612200(LocalDateTime)
2025-06-17 00:58:10.749 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.749 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 168.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 616(Integer), 5480(Integer), 5487(Integer), 2025-06-17T00:58:10.749612200(LocalDateTime), 2025-06-17T00:58:10.749612200(LocalDateTime)
2025-06-17 00:58:10.749 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.750 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 169(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
## 1.1 什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
## 1.2 AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 617(Integer), 5488(Integer), 5515(Integer), 2025-06-17T00:58:10.749612200(LocalDateTime), 2025-06-17T00:58:10.750610900(LocalDateTime)
2025-06-17 00:58:10.750 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.750 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 169.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 618(Integer), 5492(Integer), 5502(Integer), 2025-06-17T00:58:10.750610900(LocalDateTime), 2025-06-17T00:58:10.750610900(LocalDateTime)
2025-06-17 00:58:10.750 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.750 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 169.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 619(Integer), 5503(Integer), 5515(Integer), 2025-06-17T00:58:10.750610900(LocalDateTime), 2025-06-17T00:58:10.750610900(LocalDateTime)
2025-06-17 00:58:10.750 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.750 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 170(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 2.1 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
## 2.2 神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 620(Integer), 5516(Integer), 5564(Integer), 2025-06-17T00:58:10.750610900(LocalDateTime), 2025-06-17T00:58:10.750610900(LocalDateTime)
2025-06-17 00:58:10.750 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.751 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 170.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 621(Integer), 5520(Integer), 5540(Integer), 2025-06-17T00:58:10.750610900(LocalDateTime), 2025-06-17T00:58:10.750610900(LocalDateTime)
2025-06-17 00:58:10.751 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.751 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 170.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 622(Integer), 5524(Integer), 5532(Integer), 2025-06-17T00:58:10.751610(LocalDateTime), 2025-06-17T00:58:10.751610(LocalDateTime)
2025-06-17 00:58:10.751 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.751 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 170.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 623(Integer), 5533(Integer), 5540(Integer), 2025-06-17T00:58:10.751610(LocalDateTime), 2025-06-17T00:58:10.751610(LocalDateTime)
2025-06-17 00:58:10.751 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.751 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 170.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 624(Integer), 5541(Integer), 5564(Integer), 2025-06-17T00:58:10.751610(LocalDateTime), 2025-06-17T00:58:10.751610(LocalDateTime)
2025-06-17 00:58:10.751 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.752 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 171(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 3.1 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 625(Integer), 5565(Integer), 5585(Integer), 2025-06-17T00:58:10.751610(LocalDateTime), 2025-06-17T00:58:10.751610(LocalDateTime)
2025-06-17 00:58:10.752 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.752 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 171.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 626(Integer), 5569(Integer), 5577(Integer), 2025-06-17T00:58:10.752611300(LocalDateTime), 2025-06-17T00:58:10.752611300(LocalDateTime)
2025-06-17 00:58:10.752 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 00:58:10.752 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 171.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 627(Integer), 5578(Integer), 5585(Integer), 2025-06-17T00:58:10.752611300(LocalDateTime), 2025-06-17T00:58:10.752611300(LocalDateTime)
2025-06-17 00:58:11.492 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.492 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==>  Preparing: UPDATE chapters SET course_id=?, parent_id=?, chapter_key=?, level=?, title=?, content=?, sort_order=?, line_start=?, line_end=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 00:58:11.492 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 188(Integer), 1.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T00:58:10.337524800(LocalDateTime), 2025-06-17T00:58:10.337524800(LocalDateTime), 189(Long)
2025-06-17 00:58:11.493 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.493 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 188(Integer), 1.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T00:58:10.340524900(LocalDateTime), 2025-06-17T00:58:10.340524900(LocalDateTime), 190(Long)
2025-06-17 00:58:11.493 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.493 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 191(Integer), 2.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T00:58:10.342525600(LocalDateTime), 2025-06-17T00:58:10.342525600(LocalDateTime), 192(Long)
2025-06-17 00:58:11.493 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.494 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 192(Integer), 2.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T00:58:10.346583900(LocalDateTime), 2025-06-17T00:58:10.346583900(LocalDateTime), 193(Long)
2025-06-17 00:58:11.494 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.494 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 192(Integer), 2.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T00:58:10.349594(LocalDateTime), 2025-06-17T00:58:10.349594(LocalDateTime), 194(Long)
2025-06-17 00:58:11.495 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.495 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 191(Integer), 2.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T00:58:10.350596300(LocalDateTime), 2025-06-17T00:58:10.350596300(LocalDateTime), 195(Long)
2025-06-17 00:58:11.495 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.495 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 196(Integer), 3.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T00:58:10.355114400(LocalDateTime), 2025-06-17T00:58:10.355114400(LocalDateTime), 197(Long)
2025-06-17 00:58:11.495 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.495 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 196(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T00:58:10.356639400(LocalDateTime), 2025-06-17T00:58:10.356639400(LocalDateTime), 198(Long)
2025-06-17 00:58:11.495 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.496 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 199(Integer), 4.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 13(Integer), 102(Integer), 112(Integer), 2025-06-17T00:58:10.358653100(LocalDateTime), 2025-06-17T00:58:10.358653100(LocalDateTime), 200(Long)
2025-06-17 00:58:11.496 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.496 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 199(Integer), 4.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 14(Integer), 113(Integer), 125(Integer), 2025-06-17T00:58:10.359652200(LocalDateTime), 2025-06-17T00:58:10.359652200(LocalDateTime), 201(Long)
2025-06-17 00:58:11.496 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.496 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 202(Integer), 5.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 16(Integer), 130(Integer), 150(Integer), 2025-06-17T00:58:10.362650400(LocalDateTime), 2025-06-17T00:58:10.362650400(LocalDateTime), 203(Long)
2025-06-17 00:58:11.496 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.497 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 203(Integer), 5.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 17(Integer), 134(Integer), 142(Integer), 2025-06-17T00:58:10.363650(LocalDateTime), 2025-06-17T00:58:10.363650(LocalDateTime), 204(Long)
2025-06-17 00:58:11.497 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.497 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 203(Integer), 5.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 18(Integer), 143(Integer), 150(Integer), 2025-06-17T00:58:10.365214100(LocalDateTime), 2025-06-17T00:58:10.365214100(LocalDateTime), 205(Long)
2025-06-17 00:58:11.497 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.497 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 202(Integer), 5.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 19(Integer), 151(Integer), 174(Integer), 2025-06-17T00:58:10.365214100(LocalDateTime), 2025-06-17T00:58:10.365214100(LocalDateTime), 206(Long)
2025-06-17 00:58:11.497 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.498 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 207(Integer), 6.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 21(Integer), 179(Integer), 187(Integer), 2025-06-17T00:58:10.366725200(LocalDateTime), 2025-06-17T00:58:10.366725200(LocalDateTime), 208(Long)
2025-06-17 00:58:11.498 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.498 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 207(Integer), 6.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 22(Integer), 188(Integer), 195(Integer), 2025-06-17T00:58:10.367743400(LocalDateTime), 2025-06-17T00:58:10.367743400(LocalDateTime), 209(Long)
2025-06-17 00:58:11.498 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.498 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 210(Integer), 7.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 24(Integer), 200(Integer), 210(Integer), 2025-06-17T00:58:10.369742100(LocalDateTime), 2025-06-17T00:58:10.369742100(LocalDateTime), 211(Long)
2025-06-17 00:58:11.499 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.499 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 210(Integer), 7.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 25(Integer), 211(Integer), 223(Integer), 2025-06-17T00:58:10.371740900(LocalDateTime), 2025-06-17T00:58:10.371740900(LocalDateTime), 212(Long)
2025-06-17 00:58:11.499 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.499 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 213(Integer), 8.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 27(Integer), 228(Integer), 248(Integer), 2025-06-17T00:58:10.373739300(LocalDateTime), 2025-06-17T00:58:10.373739300(LocalDateTime), 214(Long)
2025-06-17 00:58:11.499 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.499 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 214(Integer), 8.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 28(Integer), 232(Integer), 240(Integer), 2025-06-17T00:58:10.375251800(LocalDateTime), 2025-06-17T00:58:10.375251800(LocalDateTime), 215(Long)
2025-06-17 00:58:11.500 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.500 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 214(Integer), 8.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 29(Integer), 241(Integer), 248(Integer), 2025-06-17T00:58:10.375251800(LocalDateTime), 2025-06-17T00:58:10.375251800(LocalDateTime), 216(Long)
2025-06-17 00:58:11.500 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.500 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 213(Integer), 8.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 30(Integer), 249(Integer), 272(Integer), 2025-06-17T00:58:10.376266500(LocalDateTime), 2025-06-17T00:58:10.376266500(LocalDateTime), 217(Long)
2025-06-17 00:58:11.500 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.500 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 218(Integer), 9.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 32(Integer), 277(Integer), 285(Integer), 2025-06-17T00:58:10.376780900(LocalDateTime), 2025-06-17T00:58:10.376780900(LocalDateTime), 219(Long)
2025-06-17 00:58:11.501 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.501 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 218(Integer), 9.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 33(Integer), 286(Integer), 293(Integer), 2025-06-17T00:58:10.377795400(LocalDateTime), 2025-06-17T00:58:10.377795400(LocalDateTime), 220(Long)
2025-06-17 00:58:11.501 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.501 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 221(Integer), 10.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 35(Integer), 298(Integer), 308(Integer), 2025-06-17T00:58:10.378793200(LocalDateTime), 2025-06-17T00:58:10.378793200(LocalDateTime), 222(Long)
2025-06-17 00:58:11.501 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.501 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 221(Integer), 10.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 36(Integer), 309(Integer), 321(Integer), 2025-06-17T00:58:10.379792900(LocalDateTime), 2025-06-17T00:58:10.379792900(LocalDateTime), 223(Long)
2025-06-17 00:58:11.501 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.501 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 224(Integer), 11.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 38(Integer), 326(Integer), 346(Integer), 2025-06-17T00:58:10.380794400(LocalDateTime), 2025-06-17T00:58:10.380794400(LocalDateTime), 225(Long)
2025-06-17 00:58:11.502 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.502 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 225(Integer), 11.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 39(Integer), 330(Integer), 338(Integer), 2025-06-17T00:58:10.380794400(LocalDateTime), 2025-06-17T00:58:10.380794400(LocalDateTime), 226(Long)
2025-06-17 00:58:11.502 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.502 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 225(Integer), 11.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 40(Integer), 339(Integer), 346(Integer), 2025-06-17T00:58:10.381790600(LocalDateTime), 2025-06-17T00:58:10.381790600(LocalDateTime), 227(Long)
2025-06-17 00:58:11.502 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.502 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 224(Integer), 11.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 41(Integer), 347(Integer), 370(Integer), 2025-06-17T00:58:10.381790600(LocalDateTime), 2025-06-17T00:58:10.381790600(LocalDateTime), 228(Long)
2025-06-17 00:58:11.502 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.502 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 229(Integer), 12.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 43(Integer), 375(Integer), 383(Integer), 2025-06-17T00:58:10.383790300(LocalDateTime), 2025-06-17T00:58:10.383790300(LocalDateTime), 230(Long)
2025-06-17 00:58:11.502 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.503 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 229(Integer), 12.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 44(Integer), 384(Integer), 391(Integer), 2025-06-17T00:58:10.385419300(LocalDateTime), 2025-06-17T00:58:10.385419300(LocalDateTime), 231(Long)
2025-06-17 00:58:11.503 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.503 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 232(Integer), 13.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 46(Integer), 396(Integer), 406(Integer), 2025-06-17T00:58:10.389823400(LocalDateTime), 2025-06-17T00:58:10.389823400(LocalDateTime), 233(Long)
2025-06-17 00:58:11.503 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.503 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 232(Integer), 13.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 47(Integer), 407(Integer), 419(Integer), 2025-06-17T00:58:10.390827500(LocalDateTime), 2025-06-17T00:58:10.390827500(LocalDateTime), 234(Long)
2025-06-17 00:58:11.503 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.503 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 235(Integer), 14.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 49(Integer), 424(Integer), 444(Integer), 2025-06-17T00:58:10.393825500(LocalDateTime), 2025-06-17T00:58:10.393825500(LocalDateTime), 236(Long)
2025-06-17 00:58:11.503 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.503 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 236(Integer), 14.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 50(Integer), 428(Integer), 436(Integer), 2025-06-17T00:58:10.393825500(LocalDateTime), 2025-06-17T00:58:10.393825500(LocalDateTime), 237(Long)
2025-06-17 00:58:11.503 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.503 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 236(Integer), 14.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 51(Integer), 437(Integer), 444(Integer), 2025-06-17T00:58:10.395334600(LocalDateTime), 2025-06-17T00:58:10.395334600(LocalDateTime), 238(Long)
2025-06-17 00:58:11.503 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.503 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 235(Integer), 14.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 52(Integer), 445(Integer), 468(Integer), 2025-06-17T00:58:10.396347100(LocalDateTime), 2025-06-17T00:58:10.396347100(LocalDateTime), 239(Long)
2025-06-17 00:58:11.503 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.503 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 240(Integer), 15.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 54(Integer), 473(Integer), 481(Integer), 2025-06-17T00:58:10.397875(LocalDateTime), 2025-06-17T00:58:10.397875(LocalDateTime), 241(Long)
2025-06-17 00:58:11.503 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 240(Integer), 15.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 55(Integer), 482(Integer), 489(Integer), 2025-06-17T00:58:10.397875(LocalDateTime), 2025-06-17T00:58:10.397875(LocalDateTime), 242(Long)
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 243(Integer), 16.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 57(Integer), 494(Integer), 504(Integer), 2025-06-17T00:58:10.398870500(LocalDateTime), 2025-06-17T00:58:10.398870500(LocalDateTime), 244(Long)
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 243(Integer), 16.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 58(Integer), 505(Integer), 517(Integer), 2025-06-17T00:58:10.398870500(LocalDateTime), 2025-06-17T00:58:10.398870500(LocalDateTime), 245(Long)
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 246(Integer), 17.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 60(Integer), 522(Integer), 542(Integer), 2025-06-17T00:58:10.399870200(LocalDateTime), 2025-06-17T00:58:10.399870200(LocalDateTime), 247(Long)
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 247(Integer), 17.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 61(Integer), 526(Integer), 534(Integer), 2025-06-17T00:58:10.400868100(LocalDateTime), 2025-06-17T00:58:10.400868100(LocalDateTime), 248(Long)
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 247(Integer), 17.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 62(Integer), 535(Integer), 542(Integer), 2025-06-17T00:58:10.401865900(LocalDateTime), 2025-06-17T00:58:10.401865900(LocalDateTime), 249(Long)
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 246(Integer), 17.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 63(Integer), 543(Integer), 566(Integer), 2025-06-17T00:58:10.401865900(LocalDateTime), 2025-06-17T00:58:10.401865900(LocalDateTime), 250(Long)
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 251(Integer), 18.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 65(Integer), 571(Integer), 579(Integer), 2025-06-17T00:58:10.403867400(LocalDateTime), 2025-06-17T00:58:10.403867400(LocalDateTime), 252(Long)
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.504 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 251(Integer), 18.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 66(Integer), 580(Integer), 587(Integer), 2025-06-17T00:58:10.403867400(LocalDateTime), 2025-06-17T00:58:10.403867400(LocalDateTime), 253(Long)
2025-06-17 00:58:11.506 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.506 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 254(Integer), 19.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 68(Integer), 592(Integer), 602(Integer), 2025-06-17T00:58:10.405379400(LocalDateTime), 2025-06-17T00:58:10.405379400(LocalDateTime), 255(Long)
2025-06-17 00:58:11.506 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.506 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 254(Integer), 19.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 69(Integer), 603(Integer), 615(Integer), 2025-06-17T00:58:10.405379400(LocalDateTime), 2025-06-17T00:58:10.405379400(LocalDateTime), 256(Long)
2025-06-17 00:58:11.506 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.506 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 257(Integer), 20.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 71(Integer), 620(Integer), 640(Integer), 2025-06-17T00:58:10.406901800(LocalDateTime), 2025-06-17T00:58:10.406901800(LocalDateTime), 258(Long)
2025-06-17 00:58:11.506 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.506 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 258(Integer), 20.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 72(Integer), 624(Integer), 632(Integer), 2025-06-17T00:58:10.406901800(LocalDateTime), 2025-06-17T00:58:10.406901800(LocalDateTime), 259(Long)
2025-06-17 00:58:11.506 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.506 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 258(Integer), 20.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 73(Integer), 633(Integer), 640(Integer), 2025-06-17T00:58:10.407916200(LocalDateTime), 2025-06-17T00:58:10.407916200(LocalDateTime), 260(Long)
2025-06-17 00:58:11.506 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.507 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 257(Integer), 20.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 74(Integer), 641(Integer), 664(Integer), 2025-06-17T00:58:10.409929400(LocalDateTime), 2025-06-17T00:58:10.409929400(LocalDateTime), 261(Long)
2025-06-17 00:58:11.507 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.507 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 262(Integer), 21.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 76(Integer), 669(Integer), 677(Integer), 2025-06-17T00:58:10.412929700(LocalDateTime), 2025-06-17T00:58:10.412929700(LocalDateTime), 263(Long)
2025-06-17 00:58:11.507 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.507 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 262(Integer), 21.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 77(Integer), 678(Integer), 685(Integer), 2025-06-17T00:58:10.413929200(LocalDateTime), 2025-06-17T00:58:10.413929200(LocalDateTime), 264(Long)
2025-06-17 00:58:11.507 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.507 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 265(Integer), 22.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 79(Integer), 690(Integer), 700(Integer), 2025-06-17T00:58:10.416713200(LocalDateTime), 2025-06-17T00:58:10.416713200(LocalDateTime), 266(Long)
2025-06-17 00:58:11.507 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.507 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 265(Integer), 22.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 80(Integer), 701(Integer), 713(Integer), 2025-06-17T00:58:10.417593600(LocalDateTime), 2025-06-17T00:58:10.417593600(LocalDateTime), 267(Long)
2025-06-17 00:58:11.507 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.507 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 268(Integer), 23.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 82(Integer), 718(Integer), 738(Integer), 2025-06-17T00:58:10.418592100(LocalDateTime), 2025-06-17T00:58:10.418592100(LocalDateTime), 269(Long)
2025-06-17 00:58:11.508 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.508 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 269(Integer), 23.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 83(Integer), 722(Integer), 730(Integer), 2025-06-17T00:58:10.419592200(LocalDateTime), 2025-06-17T00:58:10.419592200(LocalDateTime), 270(Long)
2025-06-17 00:58:11.508 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.508 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 269(Integer), 23.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 84(Integer), 731(Integer), 738(Integer), 2025-06-17T00:58:10.419592200(LocalDateTime), 2025-06-17T00:58:10.420591200(LocalDateTime), 271(Long)
2025-06-17 00:58:11.508 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.508 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 268(Integer), 23.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 85(Integer), 739(Integer), 762(Integer), 2025-06-17T00:58:10.420591200(LocalDateTime), 2025-06-17T00:58:10.420591200(LocalDateTime), 272(Long)
2025-06-17 00:58:11.508 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.508 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 273(Integer), 24.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 87(Integer), 767(Integer), 775(Integer), 2025-06-17T00:58:10.425100700(LocalDateTime), 2025-06-17T00:58:10.425100700(LocalDateTime), 274(Long)
2025-06-17 00:58:11.508 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.508 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 273(Integer), 24.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 88(Integer), 776(Integer), 783(Integer), 2025-06-17T00:58:10.425100700(LocalDateTime), 2025-06-17T00:58:10.425100700(LocalDateTime), 275(Long)
2025-06-17 00:58:11.509 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.509 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 276(Integer), 25.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 90(Integer), 788(Integer), 798(Integer), 2025-06-17T00:58:10.426641200(LocalDateTime), 2025-06-17T00:58:10.426641200(LocalDateTime), 277(Long)
2025-06-17 00:58:11.509 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.509 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 276(Integer), 25.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 91(Integer), 799(Integer), 811(Integer), 2025-06-17T00:58:10.426641200(LocalDateTime), 2025-06-17T00:58:10.426641200(LocalDateTime), 278(Long)
2025-06-17 00:58:11.509 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.509 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 279(Integer), 26.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 93(Integer), 816(Integer), 836(Integer), 2025-06-17T00:58:10.428655300(LocalDateTime), 2025-06-17T00:58:10.428655300(LocalDateTime), 280(Long)
2025-06-17 00:58:11.509 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.509 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 280(Integer), 26.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 94(Integer), 820(Integer), 828(Integer), 2025-06-17T00:58:10.429657700(LocalDateTime), 2025-06-17T00:58:10.430656(LocalDateTime), 281(Long)
2025-06-17 00:58:11.509 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.509 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 280(Integer), 26.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 95(Integer), 829(Integer), 836(Integer), 2025-06-17T00:58:10.430656(LocalDateTime), 2025-06-17T00:58:10.431652800(LocalDateTime), 282(Long)
2025-06-17 00:58:11.509 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.509 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 279(Integer), 26.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 96(Integer), 837(Integer), 860(Integer), 2025-06-17T00:58:10.431652800(LocalDateTime), 2025-06-17T00:58:10.431652800(LocalDateTime), 283(Long)
2025-06-17 00:58:11.510 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.510 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 284(Integer), 27.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 98(Integer), 865(Integer), 873(Integer), 2025-06-17T00:58:10.432652400(LocalDateTime), 2025-06-17T00:58:10.432652400(LocalDateTime), 285(Long)
2025-06-17 00:58:11.510 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.510 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 284(Integer), 27.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 99(Integer), 874(Integer), 881(Integer), 2025-06-17T00:58:10.433650600(LocalDateTime), 2025-06-17T00:58:10.433650600(LocalDateTime), 286(Long)
2025-06-17 00:58:11.510 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.510 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 287(Integer), 28.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 101(Integer), 886(Integer), 896(Integer), 2025-06-17T00:58:10.436706100(LocalDateTime), 2025-06-17T00:58:10.437718800(LocalDateTime), 288(Long)
2025-06-17 00:58:11.510 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.510 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 287(Integer), 28.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 102(Integer), 897(Integer), 909(Integer), 2025-06-17T00:58:10.438721300(LocalDateTime), 2025-06-17T00:58:10.438721300(LocalDateTime), 289(Long)
2025-06-17 00:58:11.510 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.510 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 290(Integer), 29.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 104(Integer), 914(Integer), 934(Integer), 2025-06-17T00:58:10.439716500(LocalDateTime), 2025-06-17T00:58:10.439716500(LocalDateTime), 291(Long)
2025-06-17 00:58:11.510 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.510 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 291(Integer), 29.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 105(Integer), 918(Integer), 926(Integer), 2025-06-17T00:58:10.441715200(LocalDateTime), 2025-06-17T00:58:10.441715200(LocalDateTime), 292(Long)
2025-06-17 00:58:11.511 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.511 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 291(Integer), 29.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 106(Integer), 927(Integer), 934(Integer), 2025-06-17T00:58:10.442715400(LocalDateTime), 2025-06-17T00:58:10.442715400(LocalDateTime), 293(Long)
2025-06-17 00:58:11.511 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.511 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 290(Integer), 29.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 107(Integer), 935(Integer), 958(Integer), 2025-06-17T00:58:10.443717200(LocalDateTime), 2025-06-17T00:58:10.443717200(LocalDateTime), 294(Long)
2025-06-17 00:58:11.511 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.511 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 295(Integer), 30.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 109(Integer), 963(Integer), 971(Integer), 2025-06-17T00:58:10.446237100(LocalDateTime), 2025-06-17T00:58:10.446237100(LocalDateTime), 296(Long)
2025-06-17 00:58:11.511 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.511 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 295(Integer), 30.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 110(Integer), 972(Integer), 979(Integer), 2025-06-17T00:58:10.446746(LocalDateTime), 2025-06-17T00:58:10.446746(LocalDateTime), 297(Long)
2025-06-17 00:58:11.512 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.512 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 298(Integer), 31.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 112(Integer), 984(Integer), 994(Integer), 2025-06-17T00:58:10.448774(LocalDateTime), 2025-06-17T00:58:10.448774(LocalDateTime), 299(Long)
2025-06-17 00:58:11.512 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.512 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 298(Integer), 31.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 113(Integer), 995(Integer), 1007(Integer), 2025-06-17T00:58:10.449768400(LocalDateTime), 2025-06-17T00:58:10.449768400(LocalDateTime), 300(Long)
2025-06-17 00:58:11.512 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.512 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 301(Integer), 32.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 115(Integer), 1012(Integer), 1032(Integer), 2025-06-17T00:58:10.450768600(LocalDateTime), 2025-06-17T00:58:10.450768600(LocalDateTime), 302(Long)
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 302(Integer), 32.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 116(Integer), 1016(Integer), 1024(Integer), 2025-06-17T00:58:10.451770200(LocalDateTime), 2025-06-17T00:58:10.451770200(LocalDateTime), 303(Long)
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 302(Integer), 32.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 117(Integer), 1025(Integer), 1032(Integer), 2025-06-17T00:58:10.451770200(LocalDateTime), 2025-06-17T00:58:10.451770200(LocalDateTime), 304(Long)
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 301(Integer), 32.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 118(Integer), 1033(Integer), 1056(Integer), 2025-06-17T00:58:10.451770200(LocalDateTime), 2025-06-17T00:58:10.451770200(LocalDateTime), 305(Long)
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 306(Integer), 33.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 120(Integer), 1061(Integer), 1069(Integer), 2025-06-17T00:58:10.453286600(LocalDateTime), 2025-06-17T00:58:10.453286600(LocalDateTime), 307(Long)
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 306(Integer), 33.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 121(Integer), 1070(Integer), 1077(Integer), 2025-06-17T00:58:10.454298400(LocalDateTime), 2025-06-17T00:58:10.454298400(LocalDateTime), 308(Long)
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 309(Integer), 34.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 123(Integer), 1082(Integer), 1092(Integer), 2025-06-17T00:58:10.455297600(LocalDateTime), 2025-06-17T00:58:10.455297600(LocalDateTime), 310(Long)
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 309(Integer), 34.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 124(Integer), 1093(Integer), 1105(Integer), 2025-06-17T00:58:10.455297600(LocalDateTime), 2025-06-17T00:58:10.455297600(LocalDateTime), 311(Long)
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 312(Integer), 35.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 126(Integer), 1110(Integer), 1130(Integer), 2025-06-17T00:58:10.456247300(LocalDateTime), 2025-06-17T00:58:10.456247300(LocalDateTime), 313(Long)
2025-06-17 00:58:11.513 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 313(Integer), 35.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 127(Integer), 1114(Integer), 1122(Integer), 2025-06-17T00:58:10.457256600(LocalDateTime), 2025-06-17T00:58:10.457256600(LocalDateTime), 314(Long)
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 313(Integer), 35.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 128(Integer), 1123(Integer), 1130(Integer), 2025-06-17T00:58:10.457256600(LocalDateTime), 2025-06-17T00:58:10.457256600(LocalDateTime), 315(Long)
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 312(Integer), 35.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 129(Integer), 1131(Integer), 1154(Integer), 2025-06-17T00:58:10.458260600(LocalDateTime), 2025-06-17T00:58:10.458260600(LocalDateTime), 316(Long)
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 317(Integer), 36.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 131(Integer), 1159(Integer), 1167(Integer), 2025-06-17T00:58:10.460263100(LocalDateTime), 2025-06-17T00:58:10.460263100(LocalDateTime), 318(Long)
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 317(Integer), 36.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 132(Integer), 1168(Integer), 1175(Integer), 2025-06-17T00:58:10.460263100(LocalDateTime), 2025-06-17T00:58:10.460263100(LocalDateTime), 319(Long)
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 320(Integer), 37.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 134(Integer), 1180(Integer), 1190(Integer), 2025-06-17T00:58:10.461265(LocalDateTime), 2025-06-17T00:58:10.461265(LocalDateTime), 321(Long)
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 320(Integer), 37.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 135(Integer), 1191(Integer), 1203(Integer), 2025-06-17T00:58:10.462260300(LocalDateTime), 2025-06-17T00:58:10.462260300(LocalDateTime), 322(Long)
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 323(Integer), 38.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 137(Integer), 1208(Integer), 1228(Integer), 2025-06-17T00:58:10.463263400(LocalDateTime), 2025-06-17T00:58:10.463263400(LocalDateTime), 324(Long)
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 324(Integer), 38.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 138(Integer), 1212(Integer), 1220(Integer), 2025-06-17T00:58:10.464261500(LocalDateTime), 2025-06-17T00:58:10.464261500(LocalDateTime), 325(Long)
2025-06-17 00:58:11.514 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.516 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 324(Integer), 38.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 139(Integer), 1221(Integer), 1228(Integer), 2025-06-17T00:58:10.464261500(LocalDateTime), 2025-06-17T00:58:10.464261500(LocalDateTime), 326(Long)
2025-06-17 00:58:11.516 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.516 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 323(Integer), 38.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 140(Integer), 1229(Integer), 1252(Integer), 2025-06-17T00:58:10.465261600(LocalDateTime), 2025-06-17T00:58:10.465261600(LocalDateTime), 327(Long)
2025-06-17 00:58:11.517 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.517 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 328(Integer), 39.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 142(Integer), 1257(Integer), 1265(Integer), 2025-06-17T00:58:10.467457900(LocalDateTime), 2025-06-17T00:58:10.467457900(LocalDateTime), 329(Long)
2025-06-17 00:58:11.517 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.517 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 328(Integer), 39.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 143(Integer), 1266(Integer), 1273(Integer), 2025-06-17T00:58:10.469457(LocalDateTime), 2025-06-17T00:58:10.469457(LocalDateTime), 330(Long)
2025-06-17 00:58:11.517 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.518 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 331(Integer), 40.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 145(Integer), 1278(Integer), 1288(Integer), 2025-06-17T00:58:10.472453600(LocalDateTime), 2025-06-17T00:58:10.472453600(LocalDateTime), 332(Long)
2025-06-17 00:58:11.518 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.518 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 331(Integer), 40.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 146(Integer), 1289(Integer), 1301(Integer), 2025-06-17T00:58:10.472453600(LocalDateTime), 2025-06-17T00:58:10.472453600(LocalDateTime), 333(Long)
2025-06-17 00:58:11.518 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.519 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 334(Integer), 41.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 148(Integer), 1306(Integer), 1326(Integer), 2025-06-17T00:58:10.473452200(LocalDateTime), 2025-06-17T00:58:10.473452200(LocalDateTime), 335(Long)
2025-06-17 00:58:11.519 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.519 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 335(Integer), 41.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 149(Integer), 1310(Integer), 1318(Integer), 2025-06-17T00:58:10.474964800(LocalDateTime), 2025-06-17T00:58:10.474964800(LocalDateTime), 336(Long)
2025-06-17 00:58:11.519 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.519 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 335(Integer), 41.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 150(Integer), 1319(Integer), 1326(Integer), 2025-06-17T00:58:10.476522800(LocalDateTime), 2025-06-17T00:58:10.477536300(LocalDateTime), 337(Long)
2025-06-17 00:58:11.519 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.520 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 334(Integer), 41.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 151(Integer), 1327(Integer), 1350(Integer), 2025-06-17T00:58:10.478537800(LocalDateTime), 2025-06-17T00:58:10.478537800(LocalDateTime), 338(Long)
2025-06-17 00:58:11.520 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.520 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 339(Integer), 42.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 153(Integer), 1355(Integer), 1363(Integer), 2025-06-17T00:58:10.480537900(LocalDateTime), 2025-06-17T00:58:10.480537900(LocalDateTime), 340(Long)
2025-06-17 00:58:11.520 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.520 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 339(Integer), 42.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 154(Integer), 1364(Integer), 1371(Integer), 2025-06-17T00:58:10.481536900(LocalDateTime), 2025-06-17T00:58:10.481536900(LocalDateTime), 341(Long)
2025-06-17 00:58:11.520 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.521 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 342(Integer), 43.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 156(Integer), 1376(Integer), 1386(Integer), 2025-06-17T00:58:10.482535600(LocalDateTime), 2025-06-17T00:58:10.482535600(LocalDateTime), 343(Long)
2025-06-17 00:58:11.521 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.521 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 342(Integer), 43.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 157(Integer), 1387(Integer), 1399(Integer), 2025-06-17T00:58:10.483537900(LocalDateTime), 2025-06-17T00:58:10.483537900(LocalDateTime), 344(Long)
2025-06-17 00:58:11.521 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.522 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 345(Integer), 44.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 159(Integer), 1404(Integer), 1424(Integer), 2025-06-17T00:58:10.485112900(LocalDateTime), 2025-06-17T00:58:10.485112900(LocalDateTime), 346(Long)
2025-06-17 00:58:11.522 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.522 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 346(Integer), 44.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 160(Integer), 1408(Integer), 1416(Integer), 2025-06-17T00:58:10.487637900(LocalDateTime), 2025-06-17T00:58:10.487637900(LocalDateTime), 347(Long)
2025-06-17 00:58:11.522 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.522 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 346(Integer), 44.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 161(Integer), 1417(Integer), 1424(Integer), 2025-06-17T00:58:10.488637900(LocalDateTime), 2025-06-17T00:58:10.488637900(LocalDateTime), 348(Long)
2025-06-17 00:58:11.522 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.522 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 345(Integer), 44.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 162(Integer), 1425(Integer), 1448(Integer), 2025-06-17T00:58:10.489638700(LocalDateTime), 2025-06-17T00:58:10.489638700(LocalDateTime), 349(Long)
2025-06-17 00:58:11.523 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.523 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 350(Integer), 45.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 164(Integer), 1453(Integer), 1461(Integer), 2025-06-17T00:58:10.491635(LocalDateTime), 2025-06-17T00:58:10.491635(LocalDateTime), 351(Long)
2025-06-17 00:58:11.523 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.523 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 350(Integer), 45.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 165(Integer), 1462(Integer), 1469(Integer), 2025-06-17T00:58:10.492637100(LocalDateTime), 2025-06-17T00:58:10.492637100(LocalDateTime), 352(Long)
2025-06-17 00:58:11.523 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.523 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 353(Integer), 46.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 167(Integer), 1474(Integer), 1484(Integer), 2025-06-17T00:58:10.496473800(LocalDateTime), 2025-06-17T00:58:10.496473800(LocalDateTime), 354(Long)
2025-06-17 00:58:11.523 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.523 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 353(Integer), 46.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 168(Integer), 1485(Integer), 1497(Integer), 2025-06-17T00:58:10.497486100(LocalDateTime), 2025-06-17T00:58:10.497486100(LocalDateTime), 355(Long)
2025-06-17 00:58:11.524 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.524 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 356(Integer), 47.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 170(Integer), 1502(Integer), 1522(Integer), 2025-06-17T00:58:10.508579300(LocalDateTime), 2025-06-17T00:58:10.508579300(LocalDateTime), 357(Long)
2025-06-17 00:58:11.524 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.524 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 357(Integer), 47.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 171(Integer), 1506(Integer), 1514(Integer), 2025-06-17T00:58:10.509584100(LocalDateTime), 2025-06-17T00:58:10.509584100(LocalDateTime), 358(Long)
2025-06-17 00:58:11.524 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.525 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 357(Integer), 47.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 172(Integer), 1515(Integer), 1522(Integer), 2025-06-17T00:58:10.509584100(LocalDateTime), 2025-06-17T00:58:10.509584100(LocalDateTime), 359(Long)
2025-06-17 00:58:11.525 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.525 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 356(Integer), 47.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 173(Integer), 1523(Integer), 1546(Integer), 2025-06-17T00:58:10.510579900(LocalDateTime), 2025-06-17T00:58:10.510579900(LocalDateTime), 360(Long)
2025-06-17 00:58:11.525 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.525 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 361(Integer), 48.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 175(Integer), 1551(Integer), 1559(Integer), 2025-06-17T00:58:10.512579700(LocalDateTime), 2025-06-17T00:58:10.512579700(LocalDateTime), 362(Long)
2025-06-17 00:58:11.525 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.525 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 361(Integer), 48.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 176(Integer), 1560(Integer), 1567(Integer), 2025-06-17T00:58:10.512579700(LocalDateTime), 2025-06-17T00:58:10.512579700(LocalDateTime), 363(Long)
2025-06-17 00:58:11.526 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.526 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 364(Integer), 49.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 178(Integer), 1572(Integer), 1582(Integer), 2025-06-17T00:58:10.513580800(LocalDateTime), 2025-06-17T00:58:10.513580800(LocalDateTime), 365(Long)
2025-06-17 00:58:11.526 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.526 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 364(Integer), 49.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 179(Integer), 1583(Integer), 1595(Integer), 2025-06-17T00:58:10.513580800(LocalDateTime), 2025-06-17T00:58:10.513580800(LocalDateTime), 366(Long)
2025-06-17 00:58:11.527 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.527 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 367(Integer), 50.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 181(Integer), 1600(Integer), 1620(Integer), 2025-06-17T00:58:10.513580800(LocalDateTime), 2025-06-17T00:58:10.513580800(LocalDateTime), 368(Long)
2025-06-17 00:58:11.527 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.527 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 368(Integer), 50.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 182(Integer), 1604(Integer), 1612(Integer), 2025-06-17T00:58:10.515089100(LocalDateTime), 2025-06-17T00:58:10.515089100(LocalDateTime), 369(Long)
2025-06-17 00:58:11.528 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.528 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 368(Integer), 50.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 183(Integer), 1613(Integer), 1620(Integer), 2025-06-17T00:58:10.515089100(LocalDateTime), 2025-06-17T00:58:10.515089100(LocalDateTime), 370(Long)
2025-06-17 00:58:11.528 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.529 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 367(Integer), 50.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 184(Integer), 1621(Integer), 1644(Integer), 2025-06-17T00:58:10.515089100(LocalDateTime), 2025-06-17T00:58:10.515089100(LocalDateTime), 371(Long)
2025-06-17 00:58:11.529 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.529 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 372(Integer), 51.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 186(Integer), 1649(Integer), 1657(Integer), 2025-06-17T00:58:10.516628800(LocalDateTime), 2025-06-17T00:58:10.516628800(LocalDateTime), 373(Long)
2025-06-17 00:58:11.529 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.530 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 372(Integer), 51.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 187(Integer), 1658(Integer), 1665(Integer), 2025-06-17T00:58:10.516628800(LocalDateTime), 2025-06-17T00:58:10.516628800(LocalDateTime), 374(Long)
2025-06-17 00:58:11.530 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.530 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 375(Integer), 52.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 189(Integer), 1670(Integer), 1680(Integer), 2025-06-17T00:58:10.517638900(LocalDateTime), 2025-06-17T00:58:10.517638900(LocalDateTime), 376(Long)
2025-06-17 00:58:11.530 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.530 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 375(Integer), 52.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 190(Integer), 1681(Integer), 1693(Integer), 2025-06-17T00:58:10.517638900(LocalDateTime), 2025-06-17T00:58:10.517638900(LocalDateTime), 377(Long)
2025-06-17 00:58:11.531 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.531 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 378(Integer), 53.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 192(Integer), 1698(Integer), 1718(Integer), 2025-06-17T00:58:10.518639(LocalDateTime), 2025-06-17T00:58:10.518639(LocalDateTime), 379(Long)
2025-06-17 00:58:11.531 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.531 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 379(Integer), 53.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 193(Integer), 1702(Integer), 1710(Integer), 2025-06-17T00:58:10.519642300(LocalDateTime), 2025-06-17T00:58:10.519642300(LocalDateTime), 380(Long)
2025-06-17 00:58:11.532 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.532 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 379(Integer), 53.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 194(Integer), 1711(Integer), 1718(Integer), 2025-06-17T00:58:10.519642300(LocalDateTime), 2025-06-17T00:58:10.519642300(LocalDateTime), 381(Long)
2025-06-17 00:58:11.532 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.532 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 378(Integer), 53.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 195(Integer), 1719(Integer), 1742(Integer), 2025-06-17T00:58:10.520642300(LocalDateTime), 2025-06-17T00:58:10.520642300(LocalDateTime), 382(Long)
2025-06-17 00:58:11.543 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.543 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 383(Integer), 54.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 197(Integer), 1747(Integer), 1755(Integer), 2025-06-17T00:58:10.522641700(LocalDateTime), 2025-06-17T00:58:10.522641700(LocalDateTime), 384(Long)
2025-06-17 00:58:11.543 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.545 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 383(Integer), 54.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 198(Integer), 1756(Integer), 1763(Integer), 2025-06-17T00:58:10.522641700(LocalDateTime), 2025-06-17T00:58:10.523640900(LocalDateTime), 385(Long)
2025-06-17 00:58:11.545 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.545 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 386(Integer), 55.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 200(Integer), 1768(Integer), 1778(Integer), 2025-06-17T00:58:10.523640900(LocalDateTime), 2025-06-17T00:58:10.523640900(LocalDateTime), 387(Long)
2025-06-17 00:58:11.545 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.545 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 386(Integer), 55.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 201(Integer), 1779(Integer), 1791(Integer), 2025-06-17T00:58:10.525834300(LocalDateTime), 2025-06-17T00:58:10.525834300(LocalDateTime), 388(Long)
2025-06-17 00:58:11.545 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.546 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 389(Integer), 56.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 203(Integer), 1796(Integer), 1816(Integer), 2025-06-17T00:58:10.527393700(LocalDateTime), 2025-06-17T00:58:10.527393700(LocalDateTime), 390(Long)
2025-06-17 00:58:11.546 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.546 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 390(Integer), 56.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 204(Integer), 1800(Integer), 1808(Integer), 2025-06-17T00:58:10.528386700(LocalDateTime), 2025-06-17T00:58:10.528386700(LocalDateTime), 391(Long)
2025-06-17 00:58:11.546 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.547 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 390(Integer), 56.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 205(Integer), 1809(Integer), 1816(Integer), 2025-06-17T00:58:10.529386200(LocalDateTime), 2025-06-17T00:58:10.529386200(LocalDateTime), 392(Long)
2025-06-17 00:58:11.548 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.548 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 389(Integer), 56.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 206(Integer), 1817(Integer), 1840(Integer), 2025-06-17T00:58:10.530388500(LocalDateTime), 2025-06-17T00:58:10.530388500(LocalDateTime), 393(Long)
2025-06-17 00:58:11.548 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.548 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 394(Integer), 57.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 208(Integer), 1845(Integer), 1853(Integer), 2025-06-17T00:58:10.531390100(LocalDateTime), 2025-06-17T00:58:10.532385400(LocalDateTime), 395(Long)
2025-06-17 00:58:11.548 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.549 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 394(Integer), 57.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 209(Integer), 1854(Integer), 1861(Integer), 2025-06-17T00:58:10.533386400(LocalDateTime), 2025-06-17T00:58:10.533386400(LocalDateTime), 396(Long)
2025-06-17 00:58:11.549 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.549 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 397(Integer), 58.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 211(Integer), 1866(Integer), 1876(Integer), 2025-06-17T00:58:10.535385900(LocalDateTime), 2025-06-17T00:58:10.535385900(LocalDateTime), 398(Long)
2025-06-17 00:58:11.549 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.549 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 397(Integer), 58.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 212(Integer), 1877(Integer), 1889(Integer), 2025-06-17T00:58:10.535385900(LocalDateTime), 2025-06-17T00:58:10.535385900(LocalDateTime), 399(Long)
2025-06-17 00:58:11.549 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.549 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 400(Integer), 59.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 214(Integer), 1894(Integer), 1914(Integer), 2025-06-17T00:58:10.536488300(LocalDateTime), 2025-06-17T00:58:10.536488300(LocalDateTime), 401(Long)
2025-06-17 00:58:11.549 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.550 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 401(Integer), 59.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 215(Integer), 1898(Integer), 1906(Integer), 2025-06-17T00:58:10.537501300(LocalDateTime), 2025-06-17T00:58:10.537501300(LocalDateTime), 402(Long)
2025-06-17 00:58:11.550 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.550 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 401(Integer), 59.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 216(Integer), 1907(Integer), 1914(Integer), 2025-06-17T00:58:10.538282800(LocalDateTime), 2025-06-17T00:58:10.538282800(LocalDateTime), 403(Long)
2025-06-17 00:58:11.550 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.550 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 400(Integer), 59.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 217(Integer), 1915(Integer), 1938(Integer), 2025-06-17T00:58:10.538877200(LocalDateTime), 2025-06-17T00:58:10.538877200(LocalDateTime), 404(Long)
2025-06-17 00:58:11.550 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.550 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 405(Integer), 60.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 219(Integer), 1943(Integer), 1951(Integer), 2025-06-17T00:58:10.540691400(LocalDateTime), 2025-06-17T00:58:10.540691400(LocalDateTime), 406(Long)
2025-06-17 00:58:11.550 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.550 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 405(Integer), 60.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 220(Integer), 1952(Integer), 1959(Integer), 2025-06-17T00:58:10.541201300(LocalDateTime), 2025-06-17T00:58:10.541201300(LocalDateTime), 407(Long)
2025-06-17 00:58:11.550 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.551 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 408(Integer), 61.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 222(Integer), 1964(Integer), 1974(Integer), 2025-06-17T00:58:10.542414900(LocalDateTime), 2025-06-17T00:58:10.542414900(LocalDateTime), 409(Long)
2025-06-17 00:58:11.551 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.551 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 408(Integer), 61.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 223(Integer), 1975(Integer), 1987(Integer), 2025-06-17T00:58:10.542925100(LocalDateTime), 2025-06-17T00:58:10.542925100(LocalDateTime), 410(Long)
2025-06-17 00:58:11.551 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.551 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 411(Integer), 62.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 225(Integer), 1992(Integer), 2012(Integer), 2025-06-17T00:58:10.544370800(LocalDateTime), 2025-06-17T00:58:10.544370800(LocalDateTime), 412(Long)
2025-06-17 00:58:11.551 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.551 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 412(Integer), 62.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 226(Integer), 1996(Integer), 2004(Integer), 2025-06-17T00:58:10.545405800(LocalDateTime), 2025-06-17T00:58:10.545405800(LocalDateTime), 413(Long)
2025-06-17 00:58:11.551 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.551 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 412(Integer), 62.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 227(Integer), 2005(Integer), 2012(Integer), 2025-06-17T00:58:10.546201400(LocalDateTime), 2025-06-17T00:58:10.546201400(LocalDateTime), 414(Long)
2025-06-17 00:58:11.552 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.552 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 411(Integer), 62.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 228(Integer), 2013(Integer), 2036(Integer), 2025-06-17T00:58:10.546733500(LocalDateTime), 2025-06-17T00:58:10.546733500(LocalDateTime), 415(Long)
2025-06-17 00:58:11.552 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.552 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 416(Integer), 63.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 230(Integer), 2041(Integer), 2049(Integer), 2025-06-17T00:58:10.549003300(LocalDateTime), 2025-06-17T00:58:10.549003300(LocalDateTime), 417(Long)
2025-06-17 00:58:11.552 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.552 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 416(Integer), 63.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 231(Integer), 2050(Integer), 2057(Integer), 2025-06-17T00:58:10.549552700(LocalDateTime), 2025-06-17T00:58:10.549552700(LocalDateTime), 418(Long)
2025-06-17 00:58:11.552 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.552 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 419(Integer), 64.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 233(Integer), 2062(Integer), 2072(Integer), 2025-06-17T00:58:10.550383100(LocalDateTime), 2025-06-17T00:58:10.550932800(LocalDateTime), 420(Long)
2025-06-17 00:58:11.552 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.552 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 419(Integer), 64.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 234(Integer), 2073(Integer), 2085(Integer), 2025-06-17T00:58:10.551481400(LocalDateTime), 2025-06-17T00:58:10.552068(LocalDateTime), 421(Long)
2025-06-17 00:58:11.553 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.553 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 422(Integer), 65.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 236(Integer), 2090(Integer), 2110(Integer), 2025-06-17T00:58:10.553678700(LocalDateTime), 2025-06-17T00:58:10.553678700(LocalDateTime), 423(Long)
2025-06-17 00:58:11.553 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.553 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 423(Integer), 65.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 237(Integer), 2094(Integer), 2102(Integer), 2025-06-17T00:58:10.554332100(LocalDateTime), 2025-06-17T00:58:10.554332100(LocalDateTime), 424(Long)
2025-06-17 00:58:11.553 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.553 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 423(Integer), 65.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 238(Integer), 2103(Integer), 2110(Integer), 2025-06-17T00:58:10.554839800(LocalDateTime), 2025-06-17T00:58:10.554839800(LocalDateTime), 425(Long)
2025-06-17 00:58:11.553 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.553 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 422(Integer), 65.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 239(Integer), 2111(Integer), 2134(Integer), 2025-06-17T00:58:10.555687500(LocalDateTime), 2025-06-17T00:58:10.555687500(LocalDateTime), 426(Long)
2025-06-17 00:58:11.553 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.553 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 427(Integer), 66.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 241(Integer), 2139(Integer), 2147(Integer), 2025-06-17T00:58:10.558088400(LocalDateTime), 2025-06-17T00:58:10.558088400(LocalDateTime), 428(Long)
2025-06-17 00:58:11.554 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.554 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 427(Integer), 66.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 242(Integer), 2148(Integer), 2155(Integer), 2025-06-17T00:58:10.558088400(LocalDateTime), 2025-06-17T00:58:10.558088400(LocalDateTime), 429(Long)
2025-06-17 00:58:11.554 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.554 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 430(Integer), 67.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 244(Integer), 2160(Integer), 2170(Integer), 2025-06-17T00:58:10.559943100(LocalDateTime), 2025-06-17T00:58:10.559943100(LocalDateTime), 431(Long)
2025-06-17 00:58:11.554 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.554 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 430(Integer), 67.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 245(Integer), 2171(Integer), 2183(Integer), 2025-06-17T00:58:10.560498500(LocalDateTime), 2025-06-17T00:58:10.560498500(LocalDateTime), 432(Long)
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 433(Integer), 68.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 247(Integer), 2188(Integer), 2208(Integer), 2025-06-17T00:58:10.561643200(LocalDateTime), 2025-06-17T00:58:10.561643200(LocalDateTime), 434(Long)
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 434(Integer), 68.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 248(Integer), 2192(Integer), 2200(Integer), 2025-06-17T00:58:10.562152900(LocalDateTime), 2025-06-17T00:58:10.562152900(LocalDateTime), 435(Long)
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 434(Integer), 68.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 249(Integer), 2201(Integer), 2208(Integer), 2025-06-17T00:58:10.562692500(LocalDateTime), 2025-06-17T00:58:10.562692500(LocalDateTime), 436(Long)
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 433(Integer), 68.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 250(Integer), 2209(Integer), 2232(Integer), 2025-06-17T00:58:10.563871(LocalDateTime), 2025-06-17T00:58:10.563871(LocalDateTime), 437(Long)
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 438(Integer), 69.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 252(Integer), 2237(Integer), 2245(Integer), 2025-06-17T00:58:10.565450900(LocalDateTime), 2025-06-17T00:58:10.565450900(LocalDateTime), 439(Long)
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 438(Integer), 69.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 253(Integer), 2246(Integer), 2253(Integer), 2025-06-17T00:58:10.565993300(LocalDateTime), 2025-06-17T00:58:10.565993300(LocalDateTime), 440(Long)
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 441(Integer), 70.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 255(Integer), 2258(Integer), 2268(Integer), 2025-06-17T00:58:10.567610700(LocalDateTime), 2025-06-17T00:58:10.567610700(LocalDateTime), 442(Long)
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 441(Integer), 70.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 256(Integer), 2269(Integer), 2281(Integer), 2025-06-17T00:58:10.569320900(LocalDateTime), 2025-06-17T00:58:10.569320900(LocalDateTime), 443(Long)
2025-06-17 00:58:11.555 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.556 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 444(Integer), 71.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 258(Integer), 2286(Integer), 2306(Integer), 2025-06-17T00:58:10.571374600(LocalDateTime), 2025-06-17T00:58:10.571374600(LocalDateTime), 445(Long)
2025-06-17 00:58:11.556 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.556 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 445(Integer), 71.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 259(Integer), 2290(Integer), 2298(Integer), 2025-06-17T00:58:10.572439300(LocalDateTime), 2025-06-17T00:58:10.572439300(LocalDateTime), 446(Long)
2025-06-17 00:58:11.556 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.556 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 445(Integer), 71.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 260(Integer), 2299(Integer), 2306(Integer), 2025-06-17T00:58:10.572974500(LocalDateTime), 2025-06-17T00:58:10.572974500(LocalDateTime), 447(Long)
2025-06-17 00:58:11.556 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.556 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 444(Integer), 71.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 261(Integer), 2307(Integer), 2330(Integer), 2025-06-17T00:58:10.574056100(LocalDateTime), 2025-06-17T00:58:10.574056100(LocalDateTime), 448(Long)
2025-06-17 00:58:11.556 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.556 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 449(Integer), 72.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 263(Integer), 2335(Integer), 2343(Integer), 2025-06-17T00:58:10.575121100(LocalDateTime), 2025-06-17T00:58:10.575121100(LocalDateTime), 450(Long)
2025-06-17 00:58:11.556 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.557 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 449(Integer), 72.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 264(Integer), 2344(Integer), 2351(Integer), 2025-06-17T00:58:10.575690300(LocalDateTime), 2025-06-17T00:58:10.575690300(LocalDateTime), 451(Long)
2025-06-17 00:58:11.557 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.557 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 452(Integer), 73.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 266(Integer), 2356(Integer), 2366(Integer), 2025-06-17T00:58:10.576701500(LocalDateTime), 2025-06-17T00:58:10.576701500(LocalDateTime), 453(Long)
2025-06-17 00:58:11.557 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.557 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 452(Integer), 73.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 267(Integer), 2367(Integer), 2379(Integer), 2025-06-17T00:58:10.577210100(LocalDateTime), 2025-06-17T00:58:10.577210100(LocalDateTime), 454(Long)
2025-06-17 00:58:11.557 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.557 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 455(Integer), 74.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 269(Integer), 2384(Integer), 2404(Integer), 2025-06-17T00:58:10.578241700(LocalDateTime), 2025-06-17T00:58:10.578241700(LocalDateTime), 456(Long)
2025-06-17 00:58:11.557 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.557 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 456(Integer), 74.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 270(Integer), 2388(Integer), 2396(Integer), 2025-06-17T00:58:10.578750600(LocalDateTime), 2025-06-17T00:58:10.578750600(LocalDateTime), 457(Long)
2025-06-17 00:58:11.558 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.558 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 456(Integer), 74.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 271(Integer), 2397(Integer), 2404(Integer), 2025-06-17T00:58:10.579519700(LocalDateTime), 2025-06-17T00:58:10.579519700(LocalDateTime), 458(Long)
2025-06-17 00:58:11.558 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.558 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 455(Integer), 74.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 272(Integer), 2405(Integer), 2428(Integer), 2025-06-17T00:58:10.580031500(LocalDateTime), 2025-06-17T00:58:10.580108800(LocalDateTime), 459(Long)
2025-06-17 00:58:11.558 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.558 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 460(Integer), 75.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 274(Integer), 2433(Integer), 2441(Integer), 2025-06-17T00:58:10.580825200(LocalDateTime), 2025-06-17T00:58:10.581333600(LocalDateTime), 461(Long)
2025-06-17 00:58:11.558 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.558 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 460(Integer), 75.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 275(Integer), 2442(Integer), 2449(Integer), 2025-06-17T00:58:10.581412500(LocalDateTime), 2025-06-17T00:58:10.581412500(LocalDateTime), 462(Long)
2025-06-17 00:58:11.558 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.558 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 463(Integer), 76.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 277(Integer), 2454(Integer), 2464(Integer), 2025-06-17T00:58:10.583021300(LocalDateTime), 2025-06-17T00:58:10.583021300(LocalDateTime), 464(Long)
2025-06-17 00:58:11.558 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.558 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 463(Integer), 76.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 278(Integer), 2465(Integer), 2477(Integer), 2025-06-17T00:58:10.583528700(LocalDateTime), 2025-06-17T00:58:10.583528700(LocalDateTime), 465(Long)
2025-06-17 00:58:11.559 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.559 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 466(Integer), 77.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 280(Integer), 2482(Integer), 2502(Integer), 2025-06-17T00:58:10.583528700(LocalDateTime), 2025-06-17T00:58:10.583528700(LocalDateTime), 467(Long)
2025-06-17 00:58:11.559 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.559 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 467(Integer), 77.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 281(Integer), 2486(Integer), 2494(Integer), 2025-06-17T00:58:10.583528700(LocalDateTime), 2025-06-17T00:58:10.583528700(LocalDateTime), 468(Long)
2025-06-17 00:58:11.559 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.559 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 467(Integer), 77.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 282(Integer), 2495(Integer), 2502(Integer), 2025-06-17T00:58:10.585234100(LocalDateTime), 2025-06-17T00:58:10.585234100(LocalDateTime), 469(Long)
2025-06-17 00:58:11.559 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.559 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 466(Integer), 77.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 283(Integer), 2503(Integer), 2526(Integer), 2025-06-17T00:58:10.585887900(LocalDateTime), 2025-06-17T00:58:10.585887900(LocalDateTime), 470(Long)
2025-06-17 00:58:11.559 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.559 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 471(Integer), 78.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 285(Integer), 2531(Integer), 2539(Integer), 2025-06-17T00:58:10.586395800(LocalDateTime), 2025-06-17T00:58:10.586395800(LocalDateTime), 472(Long)
2025-06-17 00:58:11.559 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.559 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 471(Integer), 78.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 286(Integer), 2540(Integer), 2547(Integer), 2025-06-17T00:58:10.587403900(LocalDateTime), 2025-06-17T00:58:10.587403900(LocalDateTime), 473(Long)
2025-06-17 00:58:11.560 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.560 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 474(Integer), 79.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 288(Integer), 2552(Integer), 2562(Integer), 2025-06-17T00:58:10.588463200(LocalDateTime), 2025-06-17T00:58:10.588463200(LocalDateTime), 475(Long)
2025-06-17 00:58:11.560 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.560 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 474(Integer), 79.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 289(Integer), 2563(Integer), 2575(Integer), 2025-06-17T00:58:10.588463200(LocalDateTime), 2025-06-17T00:58:10.588463200(LocalDateTime), 476(Long)
2025-06-17 00:58:11.560 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.560 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 477(Integer), 80.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 291(Integer), 2580(Integer), 2600(Integer), 2025-06-17T00:58:10.589854100(LocalDateTime), 2025-06-17T00:58:10.589854100(LocalDateTime), 478(Long)
2025-06-17 00:58:11.560 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.560 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 478(Integer), 80.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 292(Integer), 2584(Integer), 2592(Integer), 2025-06-17T00:58:10.589854100(LocalDateTime), 2025-06-17T00:58:10.589854100(LocalDateTime), 479(Long)
2025-06-17 00:58:11.560 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.560 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 478(Integer), 80.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 293(Integer), 2593(Integer), 2600(Integer), 2025-06-17T00:58:10.590863(LocalDateTime), 2025-06-17T00:58:10.590863(LocalDateTime), 480(Long)
2025-06-17 00:58:11.561 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.561 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 477(Integer), 80.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 294(Integer), 2601(Integer), 2624(Integer), 2025-06-17T00:58:10.590863(LocalDateTime), 2025-06-17T00:58:10.590863(LocalDateTime), 481(Long)
2025-06-17 00:58:11.561 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.561 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 482(Integer), 81.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 296(Integer), 2629(Integer), 2637(Integer), 2025-06-17T00:58:10.592068200(LocalDateTime), 2025-06-17T00:58:10.592068200(LocalDateTime), 483(Long)
2025-06-17 00:58:11.561 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.561 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 482(Integer), 81.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 297(Integer), 2638(Integer), 2645(Integer), 2025-06-17T00:58:10.592068200(LocalDateTime), 2025-06-17T00:58:10.592068200(LocalDateTime), 484(Long)
2025-06-17 00:58:11.562 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.562 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 485(Integer), 82.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 299(Integer), 2650(Integer), 2660(Integer), 2025-06-17T00:58:10.593079500(LocalDateTime), 2025-06-17T00:58:10.593079500(LocalDateTime), 486(Long)
2025-06-17 00:58:11.562 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.562 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 485(Integer), 82.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 300(Integer), 2661(Integer), 2673(Integer), 2025-06-17T00:58:10.594078700(LocalDateTime), 2025-06-17T00:58:10.594078700(LocalDateTime), 487(Long)
2025-06-17 00:58:11.562 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.562 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 488(Integer), 83.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 302(Integer), 2678(Integer), 2698(Integer), 2025-06-17T00:58:10.595081(LocalDateTime), 2025-06-17T00:58:10.595081(LocalDateTime), 489(Long)
2025-06-17 00:58:11.562 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.562 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 489(Integer), 83.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 303(Integer), 2682(Integer), 2690(Integer), 2025-06-17T00:58:10.595594300(LocalDateTime), 2025-06-17T00:58:10.595594300(LocalDateTime), 490(Long)
2025-06-17 00:58:11.563 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.563 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 489(Integer), 83.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 304(Integer), 2691(Integer), 2698(Integer), 2025-06-17T00:58:10.596606800(LocalDateTime), 2025-06-17T00:58:10.596606800(LocalDateTime), 491(Long)
2025-06-17 00:58:11.563 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.563 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 488(Integer), 83.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 305(Integer), 2699(Integer), 2722(Integer), 2025-06-17T00:58:10.596606800(LocalDateTime), 2025-06-17T00:58:10.596606800(LocalDateTime), 492(Long)
2025-06-17 00:58:11.563 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.565 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 493(Integer), 84.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 307(Integer), 2727(Integer), 2735(Integer), 2025-06-17T00:58:10.598630(LocalDateTime), 2025-06-17T00:58:10.598630(LocalDateTime), 494(Long)
2025-06-17 00:58:11.565 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.565 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 493(Integer), 84.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 308(Integer), 2736(Integer), 2743(Integer), 2025-06-17T00:58:10.598630(LocalDateTime), 2025-06-17T00:58:10.598630(LocalDateTime), 495(Long)
2025-06-17 00:58:11.565 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.565 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 496(Integer), 85.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 310(Integer), 2748(Integer), 2758(Integer), 2025-06-17T00:58:10.599630500(LocalDateTime), 2025-06-17T00:58:10.599630500(LocalDateTime), 497(Long)
2025-06-17 00:58:11.565 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.565 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 496(Integer), 85.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 311(Integer), 2759(Integer), 2771(Integer), 2025-06-17T00:58:10.600382300(LocalDateTime), 2025-06-17T00:58:10.600382300(LocalDateTime), 498(Long)
2025-06-17 00:58:11.565 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.565 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 499(Integer), 86.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 313(Integer), 2776(Integer), 2796(Integer), 2025-06-17T00:58:10.601066100(LocalDateTime), 2025-06-17T00:58:10.601066100(LocalDateTime), 500(Long)
2025-06-17 00:58:11.565 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.565 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 500(Integer), 86.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 314(Integer), 2780(Integer), 2788(Integer), 2025-06-17T00:58:10.601907600(LocalDateTime), 2025-06-17T00:58:10.601907600(LocalDateTime), 501(Long)
2025-06-17 00:58:11.566 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.566 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 500(Integer), 86.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 315(Integer), 2789(Integer), 2796(Integer), 2025-06-17T00:58:10.601907600(LocalDateTime), 2025-06-17T00:58:10.601907600(LocalDateTime), 502(Long)
2025-06-17 00:58:11.566 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.566 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 499(Integer), 86.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 316(Integer), 2797(Integer), 2820(Integer), 2025-06-17T00:58:10.602906100(LocalDateTime), 2025-06-17T00:58:10.602906100(LocalDateTime), 503(Long)
2025-06-17 00:58:11.566 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.566 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 504(Integer), 87.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 318(Integer), 2825(Integer), 2833(Integer), 2025-06-17T00:58:10.603905500(LocalDateTime), 2025-06-17T00:58:10.603905500(LocalDateTime), 505(Long)
2025-06-17 00:58:11.566 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.566 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 504(Integer), 87.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 319(Integer), 2834(Integer), 2841(Integer), 2025-06-17T00:58:10.605418500(LocalDateTime), 2025-06-17T00:58:10.605418500(LocalDateTime), 506(Long)
2025-06-17 00:58:11.567 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.567 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 507(Integer), 88.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 321(Integer), 2846(Integer), 2856(Integer), 2025-06-17T00:58:10.609448(LocalDateTime), 2025-06-17T00:58:10.609448(LocalDateTime), 508(Long)
2025-06-17 00:58:11.567 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.567 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 507(Integer), 88.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 322(Integer), 2857(Integer), 2869(Integer), 2025-06-17T00:58:10.610448700(LocalDateTime), 2025-06-17T00:58:10.610448700(LocalDateTime), 509(Long)
2025-06-17 00:58:11.567 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.567 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 510(Integer), 89.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 324(Integer), 2874(Integer), 2894(Integer), 2025-06-17T00:58:10.611500900(LocalDateTime), 2025-06-17T00:58:10.611500900(LocalDateTime), 511(Long)
2025-06-17 00:58:11.567 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.567 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 511(Integer), 89.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 325(Integer), 2878(Integer), 2886(Integer), 2025-06-17T00:58:10.612727900(LocalDateTime), 2025-06-17T00:58:10.612727900(LocalDateTime), 512(Long)
2025-06-17 00:58:11.567 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.568 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 511(Integer), 89.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 326(Integer), 2887(Integer), 2894(Integer), 2025-06-17T00:58:10.613294900(LocalDateTime), 2025-06-17T00:58:10.613294900(LocalDateTime), 513(Long)
2025-06-17 00:58:11.568 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.568 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 510(Integer), 89.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 327(Integer), 2895(Integer), 2918(Integer), 2025-06-17T00:58:10.613802700(LocalDateTime), 2025-06-17T00:58:10.613802700(LocalDateTime), 514(Long)
2025-06-17 00:58:11.568 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.568 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 515(Integer), 90.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 329(Integer), 2923(Integer), 2931(Integer), 2025-06-17T00:58:10.614880800(LocalDateTime), 2025-06-17T00:58:10.614880800(LocalDateTime), 516(Long)
2025-06-17 00:58:11.568 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.568 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 515(Integer), 90.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 330(Integer), 2932(Integer), 2939(Integer), 2025-06-17T00:58:10.615440100(LocalDateTime), 2025-06-17T00:58:10.615440100(LocalDateTime), 517(Long)
2025-06-17 00:58:11.568 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.568 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 518(Integer), 91.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 332(Integer), 2944(Integer), 2954(Integer), 2025-06-17T00:58:10.615996400(LocalDateTime), 2025-06-17T00:58:10.615996400(LocalDateTime), 519(Long)
2025-06-17 00:58:11.568 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.569 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 518(Integer), 91.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 333(Integer), 2955(Integer), 2967(Integer), 2025-06-17T00:58:10.617271500(LocalDateTime), 2025-06-17T00:58:10.617271500(LocalDateTime), 520(Long)
2025-06-17 00:58:11.569 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.569 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 521(Integer), 92.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 335(Integer), 2972(Integer), 2992(Integer), 2025-06-17T00:58:10.618370300(LocalDateTime), 2025-06-17T00:58:10.618370300(LocalDateTime), 522(Long)
2025-06-17 00:58:11.569 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.569 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 522(Integer), 92.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 336(Integer), 2976(Integer), 2984(Integer), 2025-06-17T00:58:10.618967300(LocalDateTime), 2025-06-17T00:58:10.618967300(LocalDateTime), 523(Long)
2025-06-17 00:58:11.569 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.569 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 522(Integer), 92.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 337(Integer), 2985(Integer), 2992(Integer), 2025-06-17T00:58:10.619478(LocalDateTime), 2025-06-17T00:58:10.619478(LocalDateTime), 524(Long)
2025-06-17 00:58:11.569 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.569 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 521(Integer), 92.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 338(Integer), 2993(Integer), 3016(Integer), 2025-06-17T00:58:10.619478(LocalDateTime), 2025-06-17T00:58:10.619478(LocalDateTime), 525(Long)
2025-06-17 00:58:11.570 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.570 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 526(Integer), 93.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 340(Integer), 3021(Integer), 3029(Integer), 2025-06-17T00:58:10.619478(LocalDateTime), 2025-06-17T00:58:10.619478(LocalDateTime), 527(Long)
2025-06-17 00:58:11.570 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.570 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 526(Integer), 93.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 341(Integer), 3030(Integer), 3037(Integer), 2025-06-17T00:58:10.620492100(LocalDateTime), 2025-06-17T00:58:10.620492100(LocalDateTime), 528(Long)
2025-06-17 00:58:11.570 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.570 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 529(Integer), 94.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 343(Integer), 3042(Integer), 3052(Integer), 2025-06-17T00:58:10.621002700(LocalDateTime), 2025-06-17T00:58:10.621002700(LocalDateTime), 530(Long)
2025-06-17 00:58:11.570 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.570 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 529(Integer), 94.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 344(Integer), 3053(Integer), 3065(Integer), 2025-06-17T00:58:10.621002700(LocalDateTime), 2025-06-17T00:58:10.621002700(LocalDateTime), 531(Long)
2025-06-17 00:58:11.570 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.571 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 532(Integer), 95.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 346(Integer), 3070(Integer), 3090(Integer), 2025-06-17T00:58:10.621002700(LocalDateTime), 2025-06-17T00:58:10.621002700(LocalDateTime), 533(Long)
2025-06-17 00:58:11.571 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.571 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 533(Integer), 95.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 347(Integer), 3074(Integer), 3082(Integer), 2025-06-17T00:58:10.622013100(LocalDateTime), 2025-06-17T00:58:10.622013100(LocalDateTime), 534(Long)
2025-06-17 00:58:11.571 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.571 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 533(Integer), 95.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 348(Integer), 3083(Integer), 3090(Integer), 2025-06-17T00:58:10.622013100(LocalDateTime), 2025-06-17T00:58:10.622013100(LocalDateTime), 535(Long)
2025-06-17 00:58:11.571 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.571 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 532(Integer), 95.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 349(Integer), 3091(Integer), 3114(Integer), 2025-06-17T00:58:10.622013100(LocalDateTime), 2025-06-17T00:58:10.622013100(LocalDateTime), 536(Long)
2025-06-17 00:58:11.572 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.572 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 537(Integer), 96.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 351(Integer), 3119(Integer), 3127(Integer), 2025-06-17T00:58:10.622013100(LocalDateTime), 2025-06-17T00:58:10.622013100(LocalDateTime), 538(Long)
2025-06-17 00:58:11.573 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.573 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 537(Integer), 96.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 352(Integer), 3128(Integer), 3135(Integer), 2025-06-17T00:58:10.623024600(LocalDateTime), 2025-06-17T00:58:10.623024600(LocalDateTime), 539(Long)
2025-06-17 00:58:11.573 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.573 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 540(Integer), 97.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 354(Integer), 3140(Integer), 3150(Integer), 2025-06-17T00:58:10.623024600(LocalDateTime), 2025-06-17T00:58:10.623024600(LocalDateTime), 541(Long)
2025-06-17 00:58:11.575 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.575 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 540(Integer), 97.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 355(Integer), 3151(Integer), 3163(Integer), 2025-06-17T00:58:10.623024600(LocalDateTime), 2025-06-17T00:58:10.623024600(LocalDateTime), 542(Long)
2025-06-17 00:58:11.575 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.575 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 543(Integer), 98.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 357(Integer), 3168(Integer), 3188(Integer), 2025-06-17T00:58:10.624030600(LocalDateTime), 2025-06-17T00:58:10.624030600(LocalDateTime), 544(Long)
2025-06-17 00:58:11.575 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.576 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 544(Integer), 98.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 358(Integer), 3172(Integer), 3180(Integer), 2025-06-17T00:58:10.624030600(LocalDateTime), 2025-06-17T00:58:10.624030600(LocalDateTime), 545(Long)
2025-06-17 00:58:11.576 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.576 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 544(Integer), 98.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 359(Integer), 3181(Integer), 3188(Integer), 2025-06-17T00:58:10.624030600(LocalDateTime), 2025-06-17T00:58:10.624030600(LocalDateTime), 546(Long)
2025-06-17 00:58:11.577 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.577 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 543(Integer), 98.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 360(Integer), 3189(Integer), 3212(Integer), 2025-06-17T00:58:10.624030600(LocalDateTime), 2025-06-17T00:58:10.624030600(LocalDateTime), 547(Long)
2025-06-17 00:58:11.577 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.577 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 548(Integer), 99.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 362(Integer), 3217(Integer), 3225(Integer), 2025-06-17T00:58:10.625027300(LocalDateTime), 2025-06-17T00:58:10.625027300(LocalDateTime), 549(Long)
2025-06-17 00:58:11.577 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.577 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 548(Integer), 99.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 363(Integer), 3226(Integer), 3233(Integer), 2025-06-17T00:58:10.625027300(LocalDateTime), 2025-06-17T00:58:10.625027300(LocalDateTime), 550(Long)
2025-06-17 00:58:11.578 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.578 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 551(Integer), 100.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 365(Integer), 3238(Integer), 3248(Integer), 2025-06-17T00:58:10.626336900(LocalDateTime), 2025-06-17T00:58:10.626336900(LocalDateTime), 552(Long)
2025-06-17 00:58:11.579 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.579 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 551(Integer), 100.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 366(Integer), 3249(Integer), 3261(Integer), 2025-06-17T00:58:10.626336900(LocalDateTime), 2025-06-17T00:58:10.626336900(LocalDateTime), 553(Long)
2025-06-17 00:58:11.579 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.579 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 554(Integer), 101.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 368(Integer), 3266(Integer), 3286(Integer), 2025-06-17T00:58:10.627284500(LocalDateTime), 2025-06-17T00:58:10.627284500(LocalDateTime), 555(Long)
2025-06-17 00:58:11.579 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.580 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 555(Integer), 101.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 369(Integer), 3270(Integer), 3278(Integer), 2025-06-17T00:58:10.627284500(LocalDateTime), 2025-06-17T00:58:10.627284500(LocalDateTime), 556(Long)
2025-06-17 00:58:11.580 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.580 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 555(Integer), 101.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 370(Integer), 3279(Integer), 3286(Integer), 2025-06-17T00:58:10.628297(LocalDateTime), 2025-06-17T00:58:10.628297(LocalDateTime), 557(Long)
2025-06-17 00:58:11.580 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.580 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 554(Integer), 101.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 371(Integer), 3287(Integer), 3310(Integer), 2025-06-17T00:58:10.628297(LocalDateTime), 2025-06-17T00:58:10.628297(LocalDateTime), 558(Long)
2025-06-17 00:58:11.580 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.580 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 559(Integer), 102.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 373(Integer), 3315(Integer), 3323(Integer), 2025-06-17T00:58:10.629311100(LocalDateTime), 2025-06-17T00:58:10.629311100(LocalDateTime), 560(Long)
2025-06-17 00:58:11.580 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.580 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 559(Integer), 102.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 374(Integer), 3324(Integer), 3331(Integer), 2025-06-17T00:58:10.629311100(LocalDateTime), 2025-06-17T00:58:10.629311100(LocalDateTime), 561(Long)
2025-06-17 00:58:11.581 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.581 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 562(Integer), 103.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 376(Integer), 3336(Integer), 3346(Integer), 2025-06-17T00:58:10.630310500(LocalDateTime), 2025-06-17T00:58:10.630310500(LocalDateTime), 563(Long)
2025-06-17 00:58:11.581 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.581 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 562(Integer), 103.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 377(Integer), 3347(Integer), 3359(Integer), 2025-06-17T00:58:10.630310500(LocalDateTime), 2025-06-17T00:58:10.630310500(LocalDateTime), 564(Long)
2025-06-17 00:58:11.581 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.581 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 565(Integer), 104.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 379(Integer), 3364(Integer), 3384(Integer), 2025-06-17T00:58:10.631310300(LocalDateTime), 2025-06-17T00:58:10.631310300(LocalDateTime), 566(Long)
2025-06-17 00:58:11.582 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.582 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 566(Integer), 104.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 380(Integer), 3368(Integer), 3376(Integer), 2025-06-17T00:58:10.631310300(LocalDateTime), 2025-06-17T00:58:10.631310300(LocalDateTime), 567(Long)
2025-06-17 00:58:11.582 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.582 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 566(Integer), 104.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 381(Integer), 3377(Integer), 3384(Integer), 2025-06-17T00:58:10.632632200(LocalDateTime), 2025-06-17T00:58:10.632632200(LocalDateTime), 568(Long)
2025-06-17 00:58:11.582 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.582 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 565(Integer), 104.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 382(Integer), 3385(Integer), 3408(Integer), 2025-06-17T00:58:10.633144400(LocalDateTime), 2025-06-17T00:58:10.633144400(LocalDateTime), 569(Long)
2025-06-17 00:58:11.583 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.583 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 570(Integer), 105.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 384(Integer), 3413(Integer), 3421(Integer), 2025-06-17T00:58:10.633144400(LocalDateTime), 2025-06-17T00:58:10.633144400(LocalDateTime), 571(Long)
2025-06-17 00:58:11.583 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.583 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 570(Integer), 105.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 385(Integer), 3422(Integer), 3429(Integer), 2025-06-17T00:58:10.634156800(LocalDateTime), 2025-06-17T00:58:10.634156800(LocalDateTime), 572(Long)
2025-06-17 00:58:11.583 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.583 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 573(Integer), 106.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 387(Integer), 3434(Integer), 3444(Integer), 2025-06-17T00:58:10.635160700(LocalDateTime), 2025-06-17T00:58:10.635160700(LocalDateTime), 574(Long)
2025-06-17 00:58:11.583 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.583 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 573(Integer), 106.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 388(Integer), 3445(Integer), 3457(Integer), 2025-06-17T00:58:10.635160700(LocalDateTime), 2025-06-17T00:58:10.635160700(LocalDateTime), 575(Long)
2025-06-17 00:58:11.583 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.583 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 576(Integer), 107.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 390(Integer), 3462(Integer), 3482(Integer), 2025-06-17T00:58:10.636310800(LocalDateTime), 2025-06-17T00:58:10.636310800(LocalDateTime), 577(Long)
2025-06-17 00:58:11.585 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.585 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 577(Integer), 107.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 391(Integer), 3466(Integer), 3474(Integer), 2025-06-17T00:58:10.637276(LocalDateTime), 2025-06-17T00:58:10.637276(LocalDateTime), 578(Long)
2025-06-17 00:58:11.585 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.585 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 577(Integer), 107.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 392(Integer), 3475(Integer), 3482(Integer), 2025-06-17T00:58:10.637276(LocalDateTime), 2025-06-17T00:58:10.637276(LocalDateTime), 579(Long)
2025-06-17 00:58:11.585 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.585 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 576(Integer), 107.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 393(Integer), 3483(Integer), 3506(Integer), 2025-06-17T00:58:10.637276(LocalDateTime), 2025-06-17T00:58:10.637276(LocalDateTime), 580(Long)
2025-06-17 00:58:11.586 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.586 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 581(Integer), 108.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 395(Integer), 3511(Integer), 3519(Integer), 2025-06-17T00:58:10.637276(LocalDateTime), 2025-06-17T00:58:10.637276(LocalDateTime), 582(Long)
2025-06-17 00:58:11.586 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.586 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 581(Integer), 108.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 396(Integer), 3520(Integer), 3527(Integer), 2025-06-17T00:58:10.638285100(LocalDateTime), 2025-06-17T00:58:10.638285100(LocalDateTime), 583(Long)
2025-06-17 00:58:11.586 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.586 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 584(Integer), 109.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 398(Integer), 3532(Integer), 3542(Integer), 2025-06-17T00:58:10.641268300(LocalDateTime), 2025-06-17T00:58:10.641268300(LocalDateTime), 585(Long)
2025-06-17 00:58:11.586 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.586 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 584(Integer), 109.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 399(Integer), 3543(Integer), 3555(Integer), 2025-06-17T00:58:10.642268600(LocalDateTime), 2025-06-17T00:58:10.642268600(LocalDateTime), 586(Long)
2025-06-17 00:58:11.586 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.586 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 587(Integer), 110.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 401(Integer), 3560(Integer), 3580(Integer), 2025-06-17T00:58:10.644270500(LocalDateTime), 2025-06-17T00:58:10.644270500(LocalDateTime), 588(Long)
2025-06-17 00:58:11.587 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.587 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 588(Integer), 110.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 402(Integer), 3564(Integer), 3572(Integer), 2025-06-17T00:58:10.644270500(LocalDateTime), 2025-06-17T00:58:10.645273100(LocalDateTime), 589(Long)
2025-06-17 00:58:11.587 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.587 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 588(Integer), 110.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 403(Integer), 3573(Integer), 3580(Integer), 2025-06-17T00:58:10.645783200(LocalDateTime), 2025-06-17T00:58:10.645783200(LocalDateTime), 590(Long)
2025-06-17 00:58:11.587 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.587 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 587(Integer), 110.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 404(Integer), 3581(Integer), 3604(Integer), 2025-06-17T00:58:10.646294(LocalDateTime), 2025-06-17T00:58:10.646294(LocalDateTime), 591(Long)
2025-06-17 00:58:11.587 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.587 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 592(Integer), 111.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 406(Integer), 3609(Integer), 3617(Integer), 2025-06-17T00:58:10.647307900(LocalDateTime), 2025-06-17T00:58:10.647307900(LocalDateTime), 593(Long)
2025-06-17 00:58:11.587 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.587 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 592(Integer), 111.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 407(Integer), 3618(Integer), 3625(Integer), 2025-06-17T00:58:10.647307900(LocalDateTime), 2025-06-17T00:58:10.647307900(LocalDateTime), 594(Long)
2025-06-17 00:58:11.587 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.588 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 595(Integer), 112.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 409(Integer), 3630(Integer), 3640(Integer), 2025-06-17T00:58:10.649317(LocalDateTime), 2025-06-17T00:58:10.649317(LocalDateTime), 596(Long)
2025-06-17 00:58:11.588 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.588 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 595(Integer), 112.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 410(Integer), 3641(Integer), 3653(Integer), 2025-06-17T00:58:10.650316800(LocalDateTime), 2025-06-17T00:58:10.650316800(LocalDateTime), 597(Long)
2025-06-17 00:58:11.588 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.588 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 598(Integer), 113.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 412(Integer), 3658(Integer), 3678(Integer), 2025-06-17T00:58:10.651316800(LocalDateTime), 2025-06-17T00:58:10.652315800(LocalDateTime), 599(Long)
2025-06-17 00:58:11.588 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.588 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 599(Integer), 113.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 413(Integer), 3662(Integer), 3670(Integer), 2025-06-17T00:58:10.652315800(LocalDateTime), 2025-06-17T00:58:10.652315800(LocalDateTime), 600(Long)
2025-06-17 00:58:11.588 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.588 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 599(Integer), 113.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 414(Integer), 3671(Integer), 3678(Integer), 2025-06-17T00:58:10.653316100(LocalDateTime), 2025-06-17T00:58:10.653316100(LocalDateTime), 601(Long)
2025-06-17 00:58:11.589 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.589 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 598(Integer), 113.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 415(Integer), 3679(Integer), 3702(Integer), 2025-06-17T00:58:10.653316100(LocalDateTime), 2025-06-17T00:58:10.653316100(LocalDateTime), 602(Long)
2025-06-17 00:58:11.589 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.589 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 603(Integer), 114.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 417(Integer), 3707(Integer), 3715(Integer), 2025-06-17T00:58:10.654493100(LocalDateTime), 2025-06-17T00:58:10.654493100(LocalDateTime), 604(Long)
2025-06-17 00:58:11.589 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.589 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 603(Integer), 114.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 418(Integer), 3716(Integer), 3723(Integer), 2025-06-17T00:58:10.655004500(LocalDateTime), 2025-06-17T00:58:10.655004500(LocalDateTime), 605(Long)
2025-06-17 00:58:11.589 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.590 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 606(Integer), 115.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 420(Integer), 3728(Integer), 3738(Integer), 2025-06-17T00:58:10.655004500(LocalDateTime), 2025-06-17T00:58:10.655004500(LocalDateTime), 607(Long)
2025-06-17 00:58:11.590 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.590 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 606(Integer), 115.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 421(Integer), 3739(Integer), 3751(Integer), 2025-06-17T00:58:10.655004500(LocalDateTime), 2025-06-17T00:58:10.655004500(LocalDateTime), 608(Long)
2025-06-17 00:58:11.590 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.590 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 609(Integer), 116.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 423(Integer), 3756(Integer), 3776(Integer), 2025-06-17T00:58:10.656559200(LocalDateTime), 2025-06-17T00:58:10.656559200(LocalDateTime), 610(Long)
2025-06-17 00:58:11.590 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.590 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 610(Integer), 116.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 424(Integer), 3760(Integer), 3768(Integer), 2025-06-17T00:58:10.656559200(LocalDateTime), 2025-06-17T00:58:10.656559200(LocalDateTime), 611(Long)
2025-06-17 00:58:11.590 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.590 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 610(Integer), 116.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 425(Integer), 3769(Integer), 3776(Integer), 2025-06-17T00:58:10.657584800(LocalDateTime), 2025-06-17T00:58:10.657584800(LocalDateTime), 612(Long)
2025-06-17 00:58:11.590 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.591 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 609(Integer), 116.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 426(Integer), 3777(Integer), 3800(Integer), 2025-06-17T00:58:10.657584800(LocalDateTime), 2025-06-17T00:58:10.657584800(LocalDateTime), 613(Long)
2025-06-17 00:58:11.591 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.591 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 614(Integer), 117.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 428(Integer), 3805(Integer), 3813(Integer), 2025-06-17T00:58:10.658568800(LocalDateTime), 2025-06-17T00:58:10.658568800(LocalDateTime), 615(Long)
2025-06-17 00:58:11.591 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.591 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 614(Integer), 117.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 429(Integer), 3814(Integer), 3821(Integer), 2025-06-17T00:58:10.658568800(LocalDateTime), 2025-06-17T00:58:10.658568800(LocalDateTime), 616(Long)
2025-06-17 00:58:11.591 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.591 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 617(Integer), 118.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 431(Integer), 3826(Integer), 3836(Integer), 2025-06-17T00:58:10.659569500(LocalDateTime), 2025-06-17T00:58:10.659569500(LocalDateTime), 618(Long)
2025-06-17 00:58:11.591 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.591 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 617(Integer), 118.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 432(Integer), 3837(Integer), 3849(Integer), 2025-06-17T00:58:10.659569500(LocalDateTime), 2025-06-17T00:58:10.659569500(LocalDateTime), 619(Long)
2025-06-17 00:58:11.592 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.592 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 620(Integer), 119.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 434(Integer), 3854(Integer), 3874(Integer), 2025-06-17T00:58:10.659569500(LocalDateTime), 2025-06-17T00:58:10.659569500(LocalDateTime), 621(Long)
2025-06-17 00:58:11.592 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.592 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 621(Integer), 119.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 435(Integer), 3858(Integer), 3866(Integer), 2025-06-17T00:58:10.660574200(LocalDateTime), 2025-06-17T00:58:10.660574200(LocalDateTime), 622(Long)
2025-06-17 00:58:11.592 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.592 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 621(Integer), 119.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 436(Integer), 3867(Integer), 3874(Integer), 2025-06-17T00:58:10.660574200(LocalDateTime), 2025-06-17T00:58:10.660574200(LocalDateTime), 623(Long)
2025-06-17 00:58:11.592 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.592 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 620(Integer), 119.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 437(Integer), 3875(Integer), 3898(Integer), 2025-06-17T00:58:10.661573700(LocalDateTime), 2025-06-17T00:58:10.661573700(LocalDateTime), 624(Long)
2025-06-17 00:58:11.592 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.592 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 625(Integer), 120.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 439(Integer), 3903(Integer), 3911(Integer), 2025-06-17T00:58:10.663570400(LocalDateTime), 2025-06-17T00:58:10.663570400(LocalDateTime), 626(Long)
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 625(Integer), 120.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 440(Integer), 3912(Integer), 3919(Integer), 2025-06-17T00:58:10.663570400(LocalDateTime), 2025-06-17T00:58:10.663570400(LocalDateTime), 627(Long)
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 628(Integer), 121.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 442(Integer), 3924(Integer), 3934(Integer), 2025-06-17T00:58:10.665138400(LocalDateTime), 2025-06-17T00:58:10.665138400(LocalDateTime), 629(Long)
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 628(Integer), 121.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 443(Integer), 3935(Integer), 3947(Integer), 2025-06-17T00:58:10.665138400(LocalDateTime), 2025-06-17T00:58:10.665138400(LocalDateTime), 630(Long)
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 631(Integer), 122.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 445(Integer), 3952(Integer), 3972(Integer), 2025-06-17T00:58:10.666652400(LocalDateTime), 2025-06-17T00:58:10.666652400(LocalDateTime), 632(Long)
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 632(Integer), 122.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 446(Integer), 3956(Integer), 3964(Integer), 2025-06-17T00:58:10.666652400(LocalDateTime), 2025-06-17T00:58:10.666652400(LocalDateTime), 633(Long)
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 632(Integer), 122.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 447(Integer), 3965(Integer), 3972(Integer), 2025-06-17T00:58:10.667669300(LocalDateTime), 2025-06-17T00:58:10.667669300(LocalDateTime), 634(Long)
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 631(Integer), 122.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 448(Integer), 3973(Integer), 3996(Integer), 2025-06-17T00:58:10.667669300(LocalDateTime), 2025-06-17T00:58:10.667669300(LocalDateTime), 635(Long)
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 636(Integer), 123.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 450(Integer), 4001(Integer), 4009(Integer), 2025-06-17T00:58:10.667669300(LocalDateTime), 2025-06-17T00:58:10.667669300(LocalDateTime), 637(Long)
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 636(Integer), 123.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 451(Integer), 4010(Integer), 4017(Integer), 2025-06-17T00:58:10.669178900(LocalDateTime), 2025-06-17T00:58:10.669178900(LocalDateTime), 638(Long)
2025-06-17 00:58:11.593 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.594 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 639(Integer), 124.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 453(Integer), 4022(Integer), 4032(Integer), 2025-06-17T00:58:10.670194700(LocalDateTime), 2025-06-17T00:58:10.670194700(LocalDateTime), 640(Long)
2025-06-17 00:58:11.595 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.595 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 639(Integer), 124.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 454(Integer), 4033(Integer), 4045(Integer), 2025-06-17T00:58:10.671189400(LocalDateTime), 2025-06-17T00:58:10.671189400(LocalDateTime), 641(Long)
2025-06-17 00:58:11.595 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.596 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 642(Integer), 125.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 456(Integer), 4050(Integer), 4070(Integer), 2025-06-17T00:58:10.673192300(LocalDateTime), 2025-06-17T00:58:10.673192300(LocalDateTime), 643(Long)
2025-06-17 00:58:11.596 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.597 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 643(Integer), 125.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 457(Integer), 4054(Integer), 4062(Integer), 2025-06-17T00:58:10.674191700(LocalDateTime), 2025-06-17T00:58:10.674191700(LocalDateTime), 644(Long)
2025-06-17 00:58:11.597 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.597 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 643(Integer), 125.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 458(Integer), 4063(Integer), 4070(Integer), 2025-06-17T00:58:10.674191700(LocalDateTime), 2025-06-17T00:58:10.674191700(LocalDateTime), 645(Long)
2025-06-17 00:58:11.597 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.597 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 642(Integer), 125.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 459(Integer), 4071(Integer), 4094(Integer), 2025-06-17T00:58:10.675702100(LocalDateTime), 2025-06-17T00:58:10.675702100(LocalDateTime), 646(Long)
2025-06-17 00:58:11.597 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.597 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 647(Integer), 126.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 461(Integer), 4099(Integer), 4107(Integer), 2025-06-17T00:58:10.676712900(LocalDateTime), 2025-06-17T00:58:10.676712900(LocalDateTime), 648(Long)
2025-06-17 00:58:11.597 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.597 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 647(Integer), 126.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 462(Integer), 4108(Integer), 4115(Integer), 2025-06-17T00:58:10.676712900(LocalDateTime), 2025-06-17T00:58:10.676712900(LocalDateTime), 649(Long)
2025-06-17 00:58:11.597 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.598 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 650(Integer), 127.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 464(Integer), 4120(Integer), 4130(Integer), 2025-06-17T00:58:10.677725700(LocalDateTime), 2025-06-17T00:58:10.677725700(LocalDateTime), 651(Long)
2025-06-17 00:58:11.598 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.598 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 650(Integer), 127.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 465(Integer), 4131(Integer), 4143(Integer), 2025-06-17T00:58:10.679727500(LocalDateTime), 2025-06-17T00:58:10.679727500(LocalDateTime), 652(Long)
2025-06-17 00:58:11.598 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.598 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 653(Integer), 128.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 467(Integer), 4148(Integer), 4168(Integer), 2025-06-17T00:58:10.681807800(LocalDateTime), 2025-06-17T00:58:10.681807800(LocalDateTime), 654(Long)
2025-06-17 00:58:11.598 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.598 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 654(Integer), 128.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 468(Integer), 4152(Integer), 4160(Integer), 2025-06-17T00:58:10.681807800(LocalDateTime), 2025-06-17T00:58:10.681807800(LocalDateTime), 655(Long)
2025-06-17 00:58:11.598 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.598 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 654(Integer), 128.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 469(Integer), 4161(Integer), 4168(Integer), 2025-06-17T00:58:10.682806400(LocalDateTime), 2025-06-17T00:58:10.682806400(LocalDateTime), 656(Long)
2025-06-17 00:58:11.598 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.598 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 653(Integer), 128.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 470(Integer), 4169(Integer), 4192(Integer), 2025-06-17T00:58:10.682806400(LocalDateTime), 2025-06-17T00:58:10.682806400(LocalDateTime), 657(Long)
2025-06-17 00:58:11.599 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.599 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 658(Integer), 129.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 472(Integer), 4197(Integer), 4205(Integer), 2025-06-17T00:58:10.683806500(LocalDateTime), 2025-06-17T00:58:10.683806500(LocalDateTime), 659(Long)
2025-06-17 00:58:11.599 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.599 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 658(Integer), 129.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 473(Integer), 4206(Integer), 4213(Integer), 2025-06-17T00:58:10.683806500(LocalDateTime), 2025-06-17T00:58:10.683806500(LocalDateTime), 660(Long)
2025-06-17 00:58:11.599 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.599 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 661(Integer), 130.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 475(Integer), 4218(Integer), 4228(Integer), 2025-06-17T00:58:10.686329300(LocalDateTime), 2025-06-17T00:58:10.686329300(LocalDateTime), 662(Long)
2025-06-17 00:58:11.599 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.599 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 661(Integer), 130.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 476(Integer), 4229(Integer), 4241(Integer), 2025-06-17T00:58:10.686329300(LocalDateTime), 2025-06-17T00:58:10.686329300(LocalDateTime), 663(Long)
2025-06-17 00:58:11.599 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.599 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 664(Integer), 131.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 478(Integer), 4246(Integer), 4266(Integer), 2025-06-17T00:58:10.688596800(LocalDateTime), 2025-06-17T00:58:10.688596800(LocalDateTime), 665(Long)
2025-06-17 00:58:11.600 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.600 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 665(Integer), 131.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 479(Integer), 4250(Integer), 4258(Integer), 2025-06-17T00:58:10.688596800(LocalDateTime), 2025-06-17T00:58:10.688596800(LocalDateTime), 666(Long)
2025-06-17 00:58:11.600 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.600 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 665(Integer), 131.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 480(Integer), 4259(Integer), 4266(Integer), 2025-06-17T00:58:10.689594800(LocalDateTime), 2025-06-17T00:58:10.689594800(LocalDateTime), 667(Long)
2025-06-17 00:58:11.600 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.600 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 664(Integer), 131.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 481(Integer), 4267(Integer), 4290(Integer), 2025-06-17T00:58:10.690592100(LocalDateTime), 2025-06-17T00:58:10.690592100(LocalDateTime), 668(Long)
2025-06-17 00:58:11.600 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.600 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 669(Integer), 132.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 483(Integer), 4295(Integer), 4303(Integer), 2025-06-17T00:58:10.691592(LocalDateTime), 2025-06-17T00:58:10.691592(LocalDateTime), 670(Long)
2025-06-17 00:58:11.600 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.600 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 669(Integer), 132.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 484(Integer), 4304(Integer), 4311(Integer), 2025-06-17T00:58:10.692594400(LocalDateTime), 2025-06-17T00:58:10.692594400(LocalDateTime), 671(Long)
2025-06-17 00:58:11.600 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.600 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 672(Integer), 133.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 486(Integer), 4316(Integer), 4326(Integer), 2025-06-17T00:58:10.692594400(LocalDateTime), 2025-06-17T00:58:10.692594400(LocalDateTime), 673(Long)
2025-06-17 00:58:11.601 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.601 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 672(Integer), 133.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 487(Integer), 4327(Integer), 4339(Integer), 2025-06-17T00:58:10.693594100(LocalDateTime), 2025-06-17T00:58:10.693594100(LocalDateTime), 674(Long)
2025-06-17 00:58:11.708 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.708 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 675(Integer), 134.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 489(Integer), 4344(Integer), 4364(Integer), 2025-06-17T00:58:10.693594100(LocalDateTime), 2025-06-17T00:58:10.693594100(LocalDateTime), 676(Long)
2025-06-17 00:58:11.709 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.709 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 676(Integer), 134.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 490(Integer), 4348(Integer), 4356(Integer), 2025-06-17T00:58:10.693594100(LocalDateTime), 2025-06-17T00:58:10.693594100(LocalDateTime), 677(Long)
2025-06-17 00:58:11.709 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.709 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 676(Integer), 134.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 491(Integer), 4357(Integer), 4364(Integer), 2025-06-17T00:58:10.693594100(LocalDateTime), 2025-06-17T00:58:10.693594100(LocalDateTime), 678(Long)
2025-06-17 00:58:11.709 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.710 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 675(Integer), 134.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 492(Integer), 4365(Integer), 4388(Integer), 2025-06-17T00:58:10.695231400(LocalDateTime), 2025-06-17T00:58:10.695231400(LocalDateTime), 679(Long)
2025-06-17 00:58:11.710 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.711 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 680(Integer), 135.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 494(Integer), 4393(Integer), 4401(Integer), 2025-06-17T00:58:10.696663200(LocalDateTime), 2025-06-17T00:58:10.696663200(LocalDateTime), 681(Long)
2025-06-17 00:58:11.711 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.711 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 680(Integer), 135.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 495(Integer), 4402(Integer), 4409(Integer), 2025-06-17T00:58:10.697679100(LocalDateTime), 2025-06-17T00:58:10.697679100(LocalDateTime), 682(Long)
2025-06-17 00:58:11.711 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.712 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 683(Integer), 136.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 497(Integer), 4414(Integer), 4424(Integer), 2025-06-17T00:58:10.697679100(LocalDateTime), 2025-06-17T00:58:10.697679100(LocalDateTime), 684(Long)
2025-06-17 00:58:11.712 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.713 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 683(Integer), 136.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 498(Integer), 4425(Integer), 4437(Integer), 2025-06-17T00:58:10.698676300(LocalDateTime), 2025-06-17T00:58:10.698676300(LocalDateTime), 685(Long)
2025-06-17 00:58:11.713 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.713 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 686(Integer), 137.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 500(Integer), 4442(Integer), 4462(Integer), 2025-06-17T00:58:10.701675400(LocalDateTime), 2025-06-17T00:58:10.701675400(LocalDateTime), 687(Long)
2025-06-17 00:58:11.714 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.714 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 687(Integer), 137.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 501(Integer), 4446(Integer), 4454(Integer), 2025-06-17T00:58:10.703676700(LocalDateTime), 2025-06-17T00:58:10.703676700(LocalDateTime), 688(Long)
2025-06-17 00:58:11.714 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.714 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 687(Integer), 137.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 502(Integer), 4455(Integer), 4462(Integer), 2025-06-17T00:58:10.703676700(LocalDateTime), 2025-06-17T00:58:10.703676700(LocalDateTime), 689(Long)
2025-06-17 00:58:11.714 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.715 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 686(Integer), 137.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 503(Integer), 4463(Integer), 4486(Integer), 2025-06-17T00:58:10.703676700(LocalDateTime), 2025-06-17T00:58:10.703676700(LocalDateTime), 690(Long)
2025-06-17 00:58:11.715 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.715 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 691(Integer), 138.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 505(Integer), 4491(Integer), 4499(Integer), 2025-06-17T00:58:10.705190300(LocalDateTime), 2025-06-17T00:58:10.705190300(LocalDateTime), 692(Long)
2025-06-17 00:58:11.716 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.716 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 691(Integer), 138.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 506(Integer), 4500(Integer), 4507(Integer), 2025-06-17T00:58:10.705190300(LocalDateTime), 2025-06-17T00:58:10.705190300(LocalDateTime), 693(Long)
2025-06-17 00:58:11.716 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.716 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 694(Integer), 139.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 508(Integer), 4512(Integer), 4522(Integer), 2025-06-17T00:58:10.706738500(LocalDateTime), 2025-06-17T00:58:10.706738500(LocalDateTime), 695(Long)
2025-06-17 00:58:11.717 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.717 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 694(Integer), 139.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 509(Integer), 4523(Integer), 4535(Integer), 2025-06-17T00:58:10.706738500(LocalDateTime), 2025-06-17T00:58:10.706738500(LocalDateTime), 696(Long)
2025-06-17 00:58:11.717 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.717 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 697(Integer), 140.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 511(Integer), 4540(Integer), 4560(Integer), 2025-06-17T00:58:10.707751300(LocalDateTime), 2025-06-17T00:58:10.707751300(LocalDateTime), 698(Long)
2025-06-17 00:58:11.717 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.718 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 698(Integer), 140.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 512(Integer), 4544(Integer), 4552(Integer), 2025-06-17T00:58:10.707751300(LocalDateTime), 2025-06-17T00:58:10.707751300(LocalDateTime), 699(Long)
2025-06-17 00:58:11.718 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.718 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 698(Integer), 140.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 513(Integer), 4553(Integer), 4560(Integer), 2025-06-17T00:58:10.707751300(LocalDateTime), 2025-06-17T00:58:10.707751300(LocalDateTime), 700(Long)
2025-06-17 00:58:11.718 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.719 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 697(Integer), 140.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 514(Integer), 4561(Integer), 4584(Integer), 2025-06-17T00:58:10.708751400(LocalDateTime), 2025-06-17T00:58:10.708751400(LocalDateTime), 701(Long)
2025-06-17 00:58:11.719 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.719 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 702(Integer), 141.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 516(Integer), 4589(Integer), 4597(Integer), 2025-06-17T00:58:10.708751400(LocalDateTime), 2025-06-17T00:58:10.708751400(LocalDateTime), 703(Long)
2025-06-17 00:58:11.719 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.720 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 702(Integer), 141.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 517(Integer), 4598(Integer), 4605(Integer), 2025-06-17T00:58:10.709749800(LocalDateTime), 2025-06-17T00:58:10.709749800(LocalDateTime), 704(Long)
2025-06-17 00:58:11.720 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.720 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 705(Integer), 142.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 519(Integer), 4610(Integer), 4620(Integer), 2025-06-17T00:58:10.709749800(LocalDateTime), 2025-06-17T00:58:10.709749800(LocalDateTime), 706(Long)
2025-06-17 00:58:11.721 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.721 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 705(Integer), 142.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 520(Integer), 4621(Integer), 4633(Integer), 2025-06-17T00:58:10.709749800(LocalDateTime), 2025-06-17T00:58:10.709749800(LocalDateTime), 707(Long)
2025-06-17 00:58:11.721 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.721 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 708(Integer), 143.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 522(Integer), 4638(Integer), 4658(Integer), 2025-06-17T00:58:10.710750600(LocalDateTime), 2025-06-17T00:58:10.710750600(LocalDateTime), 709(Long)
2025-06-17 00:58:11.722 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.722 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 709(Integer), 143.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 523(Integer), 4642(Integer), 4650(Integer), 2025-06-17T00:58:10.711751400(LocalDateTime), 2025-06-17T00:58:10.711751400(LocalDateTime), 710(Long)
2025-06-17 00:58:11.722 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.722 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 709(Integer), 143.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 524(Integer), 4651(Integer), 4658(Integer), 2025-06-17T00:58:10.711751400(LocalDateTime), 2025-06-17T00:58:10.711751400(LocalDateTime), 711(Long)
2025-06-17 00:58:11.722 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.723 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 708(Integer), 143.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 525(Integer), 4659(Integer), 4682(Integer), 2025-06-17T00:58:10.712750400(LocalDateTime), 2025-06-17T00:58:10.712750400(LocalDateTime), 712(Long)
2025-06-17 00:58:11.723 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.723 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 713(Integer), 144.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 527(Integer), 4687(Integer), 4695(Integer), 2025-06-17T00:58:10.713750200(LocalDateTime), 2025-06-17T00:58:10.713750200(LocalDateTime), 714(Long)
2025-06-17 00:58:11.723 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.724 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 713(Integer), 144.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 528(Integer), 4696(Integer), 4703(Integer), 2025-06-17T00:58:10.715262400(LocalDateTime), 2025-06-17T00:58:10.715262400(LocalDateTime), 715(Long)
2025-06-17 00:58:11.724 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.725 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 716(Integer), 145.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 530(Integer), 4708(Integer), 4718(Integer), 2025-06-17T00:58:10.716801(LocalDateTime), 2025-06-17T00:58:10.716801(LocalDateTime), 717(Long)
2025-06-17 00:58:11.725 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.725 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 716(Integer), 145.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 531(Integer), 4719(Integer), 4731(Integer), 2025-06-17T00:58:10.717818(LocalDateTime), 2025-06-17T00:58:10.717818(LocalDateTime), 718(Long)
2025-06-17 00:58:11.725 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.725 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 719(Integer), 146.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 533(Integer), 4736(Integer), 4756(Integer), 2025-06-17T00:58:10.719818300(LocalDateTime), 2025-06-17T00:58:10.719818300(LocalDateTime), 720(Long)
2025-06-17 00:58:11.725 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.725 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 720(Integer), 146.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 534(Integer), 4740(Integer), 4748(Integer), 2025-06-17T00:58:10.720811900(LocalDateTime), 2025-06-17T00:58:10.720811900(LocalDateTime), 721(Long)
2025-06-17 00:58:11.726 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.726 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 720(Integer), 146.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 535(Integer), 4749(Integer), 4756(Integer), 2025-06-17T00:58:10.721814(LocalDateTime), 2025-06-17T00:58:10.721814(LocalDateTime), 722(Long)
2025-06-17 00:58:11.726 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.726 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 719(Integer), 146.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 536(Integer), 4757(Integer), 4780(Integer), 2025-06-17T00:58:10.730410600(LocalDateTime), 2025-06-17T00:58:10.730410600(LocalDateTime), 723(Long)
2025-06-17 00:58:11.727 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.727 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 724(Integer), 147.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 538(Integer), 4785(Integer), 4793(Integer), 2025-06-17T00:58:10.730410600(LocalDateTime), 2025-06-17T00:58:10.730410600(LocalDateTime), 725(Long)
2025-06-17 00:58:11.727 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.727 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 724(Integer), 147.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 539(Integer), 4794(Integer), 4801(Integer), 2025-06-17T00:58:10.731413(LocalDateTime), 2025-06-17T00:58:10.731413(LocalDateTime), 726(Long)
2025-06-17 00:58:11.727 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.727 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 727(Integer), 148.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 541(Integer), 4806(Integer), 4816(Integer), 2025-06-17T00:58:10.731413(LocalDateTime), 2025-06-17T00:58:10.731413(LocalDateTime), 728(Long)
2025-06-17 00:58:11.728 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.728 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 727(Integer), 148.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 542(Integer), 4817(Integer), 4829(Integer), 2025-06-17T00:58:10.731413(LocalDateTime), 2025-06-17T00:58:10.731413(LocalDateTime), 729(Long)
2025-06-17 00:58:11.728 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.728 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 730(Integer), 149.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 544(Integer), 4834(Integer), 4854(Integer), 2025-06-17T00:58:10.732407900(LocalDateTime), 2025-06-17T00:58:10.732407900(LocalDateTime), 731(Long)
2025-06-17 00:58:11.728 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.728 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 731(Integer), 149.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 545(Integer), 4838(Integer), 4846(Integer), 2025-06-17T00:58:10.732407900(LocalDateTime), 2025-06-17T00:58:10.732407900(LocalDateTime), 732(Long)
2025-06-17 00:58:11.728 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.728 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 731(Integer), 149.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 546(Integer), 4847(Integer), 4854(Integer), 2025-06-17T00:58:10.732407900(LocalDateTime), 2025-06-17T00:58:10.732407900(LocalDateTime), 733(Long)
2025-06-17 00:58:11.729 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.729 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 730(Integer), 149.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 547(Integer), 4855(Integer), 4878(Integer), 2025-06-17T00:58:10.732407900(LocalDateTime), 2025-06-17T00:58:10.732407900(LocalDateTime), 734(Long)
2025-06-17 00:58:11.729 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.729 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 735(Integer), 150.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 549(Integer), 4883(Integer), 4891(Integer), 2025-06-17T00:58:10.733407900(LocalDateTime), 2025-06-17T00:58:10.733407900(LocalDateTime), 736(Long)
2025-06-17 00:58:11.729 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.729 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 735(Integer), 150.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 550(Integer), 4892(Integer), 4899(Integer), 2025-06-17T00:58:10.733407900(LocalDateTime), 2025-06-17T00:58:10.733407900(LocalDateTime), 737(Long)
2025-06-17 00:58:11.730 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.730 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 738(Integer), 151.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 552(Integer), 4904(Integer), 4914(Integer), 2025-06-17T00:58:10.733407900(LocalDateTime), 2025-06-17T00:58:10.733407900(LocalDateTime), 739(Long)
2025-06-17 00:58:11.730 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.730 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 738(Integer), 151.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 553(Integer), 4915(Integer), 4927(Integer), 2025-06-17T00:58:10.733407900(LocalDateTime), 2025-06-17T00:58:10.733407900(LocalDateTime), 740(Long)
2025-06-17 00:58:11.730 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.730 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 741(Integer), 152.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 555(Integer), 4932(Integer), 4952(Integer), 2025-06-17T00:58:10.733407900(LocalDateTime), 2025-06-17T00:58:10.733407900(LocalDateTime), 742(Long)
2025-06-17 00:58:11.730 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.730 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 742(Integer), 152.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 556(Integer), 4936(Integer), 4944(Integer), 2025-06-17T00:58:10.734924(LocalDateTime), 2025-06-17T00:58:10.734924(LocalDateTime), 743(Long)
2025-06-17 00:58:11.730 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.730 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 742(Integer), 152.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 557(Integer), 4945(Integer), 4952(Integer), 2025-06-17T00:58:10.734982(LocalDateTime), 2025-06-17T00:58:10.734982(LocalDateTime), 744(Long)
2025-06-17 00:58:11.730 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.730 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 741(Integer), 152.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 558(Integer), 4953(Integer), 4976(Integer), 2025-06-17T00:58:10.734982(LocalDateTime), 2025-06-17T00:58:10.734982(LocalDateTime), 745(Long)
2025-06-17 00:58:11.731 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.731 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 746(Integer), 153.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 560(Integer), 4981(Integer), 4989(Integer), 2025-06-17T00:58:10.734982(LocalDateTime), 2025-06-17T00:58:10.734982(LocalDateTime), 747(Long)
2025-06-17 00:58:11.731 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.731 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 746(Integer), 153.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 561(Integer), 4990(Integer), 4997(Integer), 2025-06-17T00:58:10.734982(LocalDateTime), 2025-06-17T00:58:10.734982(LocalDateTime), 748(Long)
2025-06-17 00:58:11.731 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.731 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 749(Integer), 154.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 563(Integer), 5002(Integer), 5012(Integer), 2025-06-17T00:58:10.734982(LocalDateTime), 2025-06-17T00:58:10.734982(LocalDateTime), 750(Long)
2025-06-17 00:58:11.731 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.731 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 749(Integer), 154.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 564(Integer), 5013(Integer), 5025(Integer), 2025-06-17T00:58:10.734982(LocalDateTime), 2025-06-17T00:58:10.734982(LocalDateTime), 751(Long)
2025-06-17 00:58:11.732 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.732 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 752(Integer), 155.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 566(Integer), 5030(Integer), 5050(Integer), 2025-06-17T00:58:10.736551(LocalDateTime), 2025-06-17T00:58:10.736551(LocalDateTime), 753(Long)
2025-06-17 00:58:11.732 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.732 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 753(Integer), 155.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 567(Integer), 5034(Integer), 5042(Integer), 2025-06-17T00:58:10.736551(LocalDateTime), 2025-06-17T00:58:10.736551(LocalDateTime), 754(Long)
2025-06-17 00:58:11.732 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.732 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 753(Integer), 155.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 568(Integer), 5043(Integer), 5050(Integer), 2025-06-17T00:58:10.736551(LocalDateTime), 2025-06-17T00:58:10.736551(LocalDateTime), 755(Long)
2025-06-17 00:58:11.732 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.732 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 752(Integer), 155.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 569(Integer), 5051(Integer), 5074(Integer), 2025-06-17T00:58:10.737507(LocalDateTime), 2025-06-17T00:58:10.737507(LocalDateTime), 756(Long)
2025-06-17 00:58:11.732 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.733 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 757(Integer), 156.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 571(Integer), 5079(Integer), 5087(Integer), 2025-06-17T00:58:10.737507(LocalDateTime), 2025-06-17T00:58:10.737507(LocalDateTime), 758(Long)
2025-06-17 00:58:11.733 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.733 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 757(Integer), 156.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 572(Integer), 5088(Integer), 5095(Integer), 2025-06-17T00:58:10.737507(LocalDateTime), 2025-06-17T00:58:10.737507(LocalDateTime), 759(Long)
2025-06-17 00:58:11.733 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.733 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 760(Integer), 157.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 574(Integer), 5100(Integer), 5110(Integer), 2025-06-17T00:58:10.738523500(LocalDateTime), 2025-06-17T00:58:10.738523500(LocalDateTime), 761(Long)
2025-06-17 00:58:11.733 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.734 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 760(Integer), 157.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 575(Integer), 5111(Integer), 5123(Integer), 2025-06-17T00:58:10.738523500(LocalDateTime), 2025-06-17T00:58:10.738523500(LocalDateTime), 762(Long)
2025-06-17 00:58:11.734 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.734 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 763(Integer), 158.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 577(Integer), 5128(Integer), 5148(Integer), 2025-06-17T00:58:10.738523500(LocalDateTime), 2025-06-17T00:58:10.738523500(LocalDateTime), 764(Long)
2025-06-17 00:58:11.734 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.734 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 764(Integer), 158.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 578(Integer), 5132(Integer), 5140(Integer), 2025-06-17T00:58:10.738523500(LocalDateTime), 2025-06-17T00:58:10.738523500(LocalDateTime), 765(Long)
2025-06-17 00:58:11.734 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.735 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 764(Integer), 158.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 579(Integer), 5141(Integer), 5148(Integer), 2025-06-17T00:58:10.739524700(LocalDateTime), 2025-06-17T00:58:10.739524700(LocalDateTime), 766(Long)
2025-06-17 00:58:11.735 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.735 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 763(Integer), 158.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 580(Integer), 5149(Integer), 5172(Integer), 2025-06-17T00:58:10.739524700(LocalDateTime), 2025-06-17T00:58:10.739524700(LocalDateTime), 767(Long)
2025-06-17 00:58:11.736 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.736 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 768(Integer), 159.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 582(Integer), 5177(Integer), 5185(Integer), 2025-06-17T00:58:10.739524700(LocalDateTime), 2025-06-17T00:58:10.739524700(LocalDateTime), 769(Long)
2025-06-17 00:58:11.736 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.736 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 768(Integer), 159.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 583(Integer), 5186(Integer), 5193(Integer), 2025-06-17T00:58:10.739524700(LocalDateTime), 2025-06-17T00:58:10.739524700(LocalDateTime), 770(Long)
2025-06-17 00:58:11.737 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.737 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 771(Integer), 160.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 585(Integer), 5198(Integer), 5208(Integer), 2025-06-17T00:58:10.740519200(LocalDateTime), 2025-06-17T00:58:10.740519200(LocalDateTime), 772(Long)
2025-06-17 00:58:11.737 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.737 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 771(Integer), 160.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 586(Integer), 5209(Integer), 5221(Integer), 2025-06-17T00:58:10.740519200(LocalDateTime), 2025-06-17T00:58:10.740519200(LocalDateTime), 773(Long)
2025-06-17 00:58:11.737 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.737 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 774(Integer), 161.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 588(Integer), 5226(Integer), 5246(Integer), 2025-06-17T00:58:10.740519200(LocalDateTime), 2025-06-17T00:58:10.740519200(LocalDateTime), 775(Long)
2025-06-17 00:58:11.737 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.737 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 775(Integer), 161.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 589(Integer), 5230(Integer), 5238(Integer), 2025-06-17T00:58:10.741521600(LocalDateTime), 2025-06-17T00:58:10.741521600(LocalDateTime), 776(Long)
2025-06-17 00:58:11.738 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.738 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 775(Integer), 161.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 590(Integer), 5239(Integer), 5246(Integer), 2025-06-17T00:58:10.741521600(LocalDateTime), 2025-06-17T00:58:10.741521600(LocalDateTime), 777(Long)
2025-06-17 00:58:11.738 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.738 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 774(Integer), 161.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 591(Integer), 5247(Integer), 5270(Integer), 2025-06-17T00:58:10.741521600(LocalDateTime), 2025-06-17T00:58:10.741521600(LocalDateTime), 778(Long)
2025-06-17 00:58:11.738 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.739 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 779(Integer), 162.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 593(Integer), 5275(Integer), 5283(Integer), 2025-06-17T00:58:10.742519300(LocalDateTime), 2025-06-17T00:58:10.742519300(LocalDateTime), 780(Long)
2025-06-17 00:58:11.739 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.739 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 779(Integer), 162.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 594(Integer), 5284(Integer), 5291(Integer), 2025-06-17T00:58:10.742519300(LocalDateTime), 2025-06-17T00:58:10.742519300(LocalDateTime), 781(Long)
2025-06-17 00:58:11.739 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.739 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 782(Integer), 163.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 596(Integer), 5296(Integer), 5306(Integer), 2025-06-17T00:58:10.743522100(LocalDateTime), 2025-06-17T00:58:10.743522100(LocalDateTime), 783(Long)
2025-06-17 00:58:11.739 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.739 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 782(Integer), 163.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 597(Integer), 5307(Integer), 5319(Integer), 2025-06-17T00:58:10.743522100(LocalDateTime), 2025-06-17T00:58:10.743522100(LocalDateTime), 784(Long)
2025-06-17 00:58:11.739 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.739 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 785(Integer), 164.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 599(Integer), 5324(Integer), 5344(Integer), 2025-06-17T00:58:10.743522100(LocalDateTime), 2025-06-17T00:58:10.743522100(LocalDateTime), 786(Long)
2025-06-17 00:58:11.739 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.740 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 786(Integer), 164.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 600(Integer), 5328(Integer), 5336(Integer), 2025-06-17T00:58:10.743522100(LocalDateTime), 2025-06-17T00:58:10.743522100(LocalDateTime), 787(Long)
2025-06-17 00:58:11.740 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.740 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 786(Integer), 164.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 601(Integer), 5337(Integer), 5344(Integer), 2025-06-17T00:58:10.743522100(LocalDateTime), 2025-06-17T00:58:10.743522100(LocalDateTime), 788(Long)
2025-06-17 00:58:11.740 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.740 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 785(Integer), 164.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 602(Integer), 5345(Integer), 5368(Integer), 2025-06-17T00:58:10.745085100(LocalDateTime), 2025-06-17T00:58:10.745085100(LocalDateTime), 789(Long)
2025-06-17 00:58:11.740 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.741 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 790(Integer), 165.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 604(Integer), 5373(Integer), 5381(Integer), 2025-06-17T00:58:10.745085100(LocalDateTime), 2025-06-17T00:58:10.745085100(LocalDateTime), 791(Long)
2025-06-17 00:58:11.741 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.741 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 790(Integer), 165.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 605(Integer), 5382(Integer), 5389(Integer), 2025-06-17T00:58:10.746597100(LocalDateTime), 2025-06-17T00:58:10.746597100(LocalDateTime), 792(Long)
2025-06-17 00:58:11.741 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.741 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 793(Integer), 166.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 607(Integer), 5394(Integer), 5404(Integer), 2025-06-17T00:58:10.747610700(LocalDateTime), 2025-06-17T00:58:10.747610700(LocalDateTime), 794(Long)
2025-06-17 00:58:11.741 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.741 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 793(Integer), 166.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 608(Integer), 5405(Integer), 5417(Integer), 2025-06-17T00:58:10.747610700(LocalDateTime), 2025-06-17T00:58:10.747610700(LocalDateTime), 795(Long)
2025-06-17 00:58:11.741 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.741 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 796(Integer), 167.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 610(Integer), 5422(Integer), 5442(Integer), 2025-06-17T00:58:10.748609400(LocalDateTime), 2025-06-17T00:58:10.748609400(LocalDateTime), 797(Long)
2025-06-17 00:58:11.741 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.742 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 797(Integer), 167.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 611(Integer), 5426(Integer), 5434(Integer), 2025-06-17T00:58:10.748609400(LocalDateTime), 2025-06-17T00:58:10.748609400(LocalDateTime), 798(Long)
2025-06-17 00:58:11.742 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.742 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 797(Integer), 167.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 612(Integer), 5435(Integer), 5442(Integer), 2025-06-17T00:58:10.748609400(LocalDateTime), 2025-06-17T00:58:10.748609400(LocalDateTime), 799(Long)
2025-06-17 00:58:11.742 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.742 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 796(Integer), 167.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 613(Integer), 5443(Integer), 5466(Integer), 2025-06-17T00:58:10.748609400(LocalDateTime), 2025-06-17T00:58:10.748609400(LocalDateTime), 800(Long)
2025-06-17 00:58:11.742 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.743 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 801(Integer), 168.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 615(Integer), 5471(Integer), 5479(Integer), 2025-06-17T00:58:10.749612200(LocalDateTime), 2025-06-17T00:58:10.749612200(LocalDateTime), 802(Long)
2025-06-17 00:58:11.743 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.743 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 801(Integer), 168.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 616(Integer), 5480(Integer), 5487(Integer), 2025-06-17T00:58:10.749612200(LocalDateTime), 2025-06-17T00:58:10.749612200(LocalDateTime), 803(Long)
2025-06-17 00:58:11.743 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.744 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 804(Integer), 169.1(String), 2(Integer), 1.1 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 618(Integer), 5492(Integer), 5502(Integer), 2025-06-17T00:58:10.750610900(LocalDateTime), 2025-06-17T00:58:10.750610900(LocalDateTime), 805(Long)
2025-06-17 00:58:11.744 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.744 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 804(Integer), 169.2(String), 2(Integer), 1.2 AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 619(Integer), 5503(Integer), 5515(Integer), 2025-06-17T00:58:10.750610900(LocalDateTime), 2025-06-17T00:58:10.750610900(LocalDateTime), 806(Long)
2025-06-17 00:58:11.745 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.745 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 807(Integer), 170.1(String), 2(Integer), 2.1 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 2.1.1 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 2.1.2 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 621(Integer), 5520(Integer), 5540(Integer), 2025-06-17T00:58:10.750610900(LocalDateTime), 2025-06-17T00:58:10.750610900(LocalDateTime), 808(Long)
2025-06-17 00:58:11.745 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.746 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 808(Integer), 170.1.1(String), 3(Integer), 2.1.1 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 622(Integer), 5524(Integer), 5532(Integer), 2025-06-17T00:58:10.751610(LocalDateTime), 2025-06-17T00:58:10.751610(LocalDateTime), 809(Long)
2025-06-17 00:58:11.746 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.746 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 808(Integer), 170.1.2(String), 3(Integer), 2.1.2 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 623(Integer), 5533(Integer), 5540(Integer), 2025-06-17T00:58:10.751610(LocalDateTime), 2025-06-17T00:58:10.751610(LocalDateTime), 810(Long)
2025-06-17 00:58:11.746 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.747 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 807(Integer), 170.2(String), 2(Integer), 2.2 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 624(Integer), 5541(Integer), 5564(Integer), 2025-06-17T00:58:10.751610(LocalDateTime), 2025-06-17T00:58:10.751610(LocalDateTime), 811(Long)
2025-06-17 00:58:11.747 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.747 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 812(Integer), 171.1(String), 2(Integer), 3.1 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 626(Integer), 5569(Integer), 5577(Integer), 2025-06-17T00:58:10.752611300(LocalDateTime), 2025-06-17T00:58:10.752611300(LocalDateTime), 813(Long)
2025-06-17 00:58:11.747 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:11.748 [http-nio-8080-exec-9] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 812(Integer), 171.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 627(Integer), 5578(Integer), 5585(Integer), 2025-06-17T00:58:10.752611300(LocalDateTime), 2025-06-17T00:58:10.752611300(LocalDateTime), 814(Long)
2025-06-17 00:58:12.112 [http-nio-8080-exec-9] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 00:58:12.112 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 00:58:12.112 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), b491d07b620a3d6e135f6e927923e0bc7756fc9a428bb46b07c29666fc074216(String), 2025-06-17T00:57:44.092185300(LocalDateTime), success(String), 2025-06-17T00:58:12.109365500(LocalDateTime), 627(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 00:58:12.114 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 00:58:12.130 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 课程解析成功，课程ID: 1
2025-06-17 00:58:33.609 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 00:58:33.610 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 00:58:33.613 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 00:58:33.625 [http-nio-8080-exec-10] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 00:58:33.625 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 00:58:33.625 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 00:58:33.629 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 00:58:33.638 [http-nio-8080-exec-10] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:00:50.693 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:00:50.693 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:00:50.696 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:00:50.700 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:00:50.700 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:00:50.701 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:00:50.702 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:00:50.734 [http-nio-8080-exec-2] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:02:12.664 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:02:12.664 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:02:12.666 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:02:12.670 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:02:12.670 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:02:12.670 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:02:12.671 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:02:12.673 [http-nio-8080-exec-3] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:02:14.938 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:02:14.939 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:02:14.939 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:02:14.943 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 01:02:14.944 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:02:14.944 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:02:14.945 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:02:14.945 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 01:02:14.946 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 01:02:14.948 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 01:02:14.948 [http-nio-8080-exec-8] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 01:02:17.145 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:02:17.145 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:02:17.146 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:02:17.149 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:02:17.149 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:02:17.149 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:02:17.151 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:02:17.152 [http-nio-8080-exec-5] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:03:52.304 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:03:52.304 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:03:52.306 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:03:52.309 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:03:52.309 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:03:52.310 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:03:52.311 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:03:52.313 [http-nio-8080-exec-6] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:03:53.559 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:03:53.559 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:03:53.559 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:03:53.562 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 01:03:53.563 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:03:53.563 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:03:53.564 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:03:53.564 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 01:03:53.564 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 01:03:53.566 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 01:03:53.566 [http-nio-8080-exec-7] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 01:03:55.214 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:03:55.214 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:03:55.215 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:03:55.218 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 01:03:55.219 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:03:55.219 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:03:55.219 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:03:55.220 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 01:03:55.220 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 01:03:55.222 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 01:03:55.222 [http-nio-8080-exec-4] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 01:03:56.400 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:03:56.400 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:03:56.401 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:03:56.404 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:03:56.405 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:03:56.405 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:03:56.406 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:03:56.407 [http-nio-8080-exec-9] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:04:08.793 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:04:08.794 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:04:08.797 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:04:08.804 [http-nio-8080-exec-10] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:04:08.804 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:04:08.804 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:04:08.807 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:04:08.811 [http-nio-8080-exec-10] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:04:31.461 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:04:31.462 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:04:31.465 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:04:31.472 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:04:31.472 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:04:31.472 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:04:31.475 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:04:31.479 [http-nio-8080-exec-1] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:04:45.714 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:04:45.715 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:04:45.716 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:04:45.721 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:04:45.721 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:04:45.723 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:04:45.725 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:04:45.728 [http-nio-8080-exec-2] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:06:55.603 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:06:55.604 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:06:55.607 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:06:55.613 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:06:55.614 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:06:55.614 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:06:55.617 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:06:55.620 [http-nio-8080-exec-3] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:09:09.041 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:09:09.042 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:09:09.043 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:09:09.045 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:09:09.045 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:09:09.045 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:09:09.046 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:09:09.049 [http-nio-8080-exec-8] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:10:37.164 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:10:37.165 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:10:37.171 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:10:37.181 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:10:37.182 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:10:37.183 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:10:37.187 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:10:37.201 [http-nio-8080-exec-5] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:13:24.427 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:13:24.427 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:13:24.429 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:13:24.434 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:13:24.434 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:13:24.434 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:13:24.436 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:13:24.446 [http-nio-8080-exec-6] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:18:38.319 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:18:38.321 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:18:38.326 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:18:38.345 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:18:38.346 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:18:38.347 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:18:38.351 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:18:38.399 [http-nio-8080-exec-7] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:29:09.207 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:29:09.209 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:29:09.220 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:29:09.230 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:29:09.231 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:29:09.231 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:29:09.234 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:29:09.245 [http-nio-8080-exec-4] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:37:44.065 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:37:44.066 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:37:44.069 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:37:44.079 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:37:44.079 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:37:44.080 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:37:44.081 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:37:44.092 [http-nio-8080-exec-9] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:40:56.146 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:40:56.147 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:40:56.156 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:40:56.216 [http-nio-8080-exec-10] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:40:56.217 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:40:56.217 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:40:56.225 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:40:56.235 [http-nio-8080-exec-10] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:43:01.308 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:43:01.308 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:43:01.311 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:43:01.323 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:43:01.323 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:43:01.323 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:43:01.325 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:43:01.342 [http-nio-8080-exec-1] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:44:15.779 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:44:15.779 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:44:15.781 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:44:15.787 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:44:15.787 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:44:15.788 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:44:15.789 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:44:15.798 [http-nio-8080-exec-2] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:46:37.636 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:46:37.637 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:46:37.638 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:46:37.649 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 01:46:37.651 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:46:37.651 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:46:37.654 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:46:37.656 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 01:46:37.657 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 01:46:37.662 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 01:46:37.663 [http-nio-8080-exec-3] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 01:46:38.701 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:46:38.701 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:46:38.704 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:46:38.710 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:46:38.710 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:46:38.710 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:46:38.713 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:46:38.724 [http-nio-8080-exec-8] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:48:42.896 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:48:42.896 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:48:42.898 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:48:42.906 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:48:42.906 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:48:42.906 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:48:42.909 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:48:42.921 [http-nio-8080-exec-5] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:49:19.236 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:49:19.236 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:49:19.239 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:49:19.247 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:49:19.248 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:49:19.249 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:49:19.251 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:49:19.261 [http-nio-8080-exec-6] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:51:31.347 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:51:31.347 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:51:31.350 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:51:31.357 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:51:31.357 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:51:31.359 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:51:31.360 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:51:31.372 [http-nio-8080-exec-7] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:51:46.221 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:51:46.221 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:51:46.223 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:51:46.227 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:51:46.227 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:51:46.229 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:51:46.231 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:51:46.240 [http-nio-8080-exec-4] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:53:48.527 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:53:48.528 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:53:48.529 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:53:48.535 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:53:48.535 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:53:48.536 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:53:48.537 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:53:48.548 [http-nio-8080-exec-9] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:54:14.540 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:54:14.540 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:54:14.541 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:54:14.547 [http-nio-8080-exec-10] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:54:14.548 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:54:14.548 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:54:14.549 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:54:14.560 [http-nio-8080-exec-10] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:57:36.762 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:57:36.763 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:57:36.765 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:57:36.772 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:57:36.773 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:57:36.773 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:57:36.775 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:57:36.785 [http-nio-8080-exec-1] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:58:09.673 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:58:09.673 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:58:09.675 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:58:09.688 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:58:09.688 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:58:09.689 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:58:09.691 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:58:09.700 [http-nio-8080-exec-2] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:58:17.426 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:58:17.426 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:58:17.429 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:58:17.439 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:58:17.444 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:58:17.444 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:58:17.447 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:58:17.458 [http-nio-8080-exec-3] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 01:58:26.712 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 01:58:26.712 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 01:58:26.715 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 01:58:26.724 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 01:58:26.724 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 01:58:26.725 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 01:58:26.728 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 01:58:26.735 [http-nio-8080-exec-8] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:01:55.029 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:01:55.030 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:01:55.032 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:01:55.042 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:01:55.042 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:01:55.043 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:01:55.045 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:01:55.055 [http-nio-8080-exec-5] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:03:49.969 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:03:49.970 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:03:49.972 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:03:49.980 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:03:49.980 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:03:49.981 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:03:49.984 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:03:49.995 [http-nio-8080-exec-6] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:04:49.376 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:04:49.376 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:04:49.378 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:04:49.383 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:04:49.383 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:04:49.383 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:04:49.384 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:04:49.391 [http-nio-8080-exec-7] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:06:20.622 [http-nio-8080-exec-6] INFO  org.springdoc.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 637 ms
2025-06-17 02:07:29.752 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-17 02:07:29.770 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-17 02:07:40.551 [main] INFO  com.example.aihub.AiHubApplication - Starting AiHubApplication using Java 17.0.12 with PID 33456 (D:\JAVA\AIHub\target\classes started by ZhuanZ（无密码） in D:\JAVA\AIHub)
2025-06-17 02:07:40.554 [main] DEBUG com.example.aihub.AiHubApplication - Running with Spring Boot v3.3.6, Spring v6.1.15
2025-06-17 02:07:40.555 [main] INFO  com.example.aihub.AiHubApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-17 02:07:41.744 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-17 02:07:41.748 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-17 02:07:41.790 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 0 Redis repository interfaces.
2025-06-17 02:07:42.612 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 02:07:42.627 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 02:07:42.629 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 02:07:42.629 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.33]
2025-06-17 02:07:42.728 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 02:07:42.728 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2094 ms
2025-06-17 02:07:43.743 [main] DEBUG com.example.aihub.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-17 02:07:43.803 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-06-17 02:07:45.201 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 02:07:45.220 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 02:07:45.232 [main] INFO  com.example.aihub.AiHubApplication - Started AiHubApplication in 5.494 seconds (process running for 6.435)
2025-06-17 02:07:45.446 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 02:07:45.447 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 02:07:45.449 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-06-17 02:07:46.121 [http-nio-8080-exec-1] INFO  org.springdoc.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 620 ms
2025-06-17 02:11:03.299 [http-nio-8080-exec-6] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 02:11:03.836 [http-nio-8080-exec-6] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1a2f92e7
2025-06-17 02:11:03.838 [http-nio-8080-exec-6] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 02:11:03.846 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:11:03.874 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:11:03.908 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:11:03.931 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:11:03.932 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:11:03.933 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:11:03.939 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:11:03.949 [http-nio-8080-exec-6] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:11:07.176 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:11:07.176 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:11:07.178 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:11:07.183 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:11:07.183 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:11:07.184 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:11:07.186 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:11:07.189 [http-nio-8080-exec-5] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:11:38.975 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:11:38.976 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:11:38.980 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:11:38.989 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:11:38.990 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:11:38.990 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:11:38.995 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:11:38.998 [http-nio-8080-exec-7] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:12:19.478 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:12:19.478 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:12:19.481 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:12:19.485 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:12:19.486 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:12:19.486 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:12:19.490 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:12:19.492 [http-nio-8080-exec-8] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:12:47.031 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:12:47.032 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:12:47.034 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:12:47.039 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:12:47.040 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:12:47.040 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:12:47.041 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:12:47.043 [http-nio-8080-exec-9] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:14:38.304 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:14:38.304 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:14:38.307 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:14:38.312 [http-nio-8080-exec-10] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:14:38.312 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:14:38.313 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:14:38.315 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:14:38.317 [http-nio-8080-exec-10] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:17:35.850 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:17:35.851 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:17:35.853 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:17:35.864 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 请求更新课程Markdown内容，课程ID: 1
2025-06-17 02:17:35.870 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:17:35.870 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:17:35.873 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:17:35.874 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:17:35.874 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:17:35.876 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:17:37.839 [http-nio-8080-exec-1] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:17:37.842 [http-nio-8080-exec-1] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 0 ---
2025-06-17 02:17:37.843 [http-nio-8080-exec-1] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:17:37.844 [http-nio-8080-exec-1] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:17:37.902 [http-nio-8080-exec-1] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 627
2025-06-17 02:17:37.907 [http-nio-8080-exec-1] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:17:37.909 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parse_error=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:17:37.910 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), 681adf054a2fdf91dc12cd9a27f3ac0bb0f2638d8743d77579749e9eb7b0085e(String), 2025-06-17T02:17:35.882590600(LocalDateTime), success(String), 课程为空或未包含章节(String), 2025-06-17T02:17:37.902289100(LocalDateTime), 0(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:17:37.914 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:17:37.922 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 课程内容更新并重新解析成功，课程ID: 1
2025-06-17 02:17:41.337 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:17:41.338 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:17:41.342 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:17:41.351 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:17:41.352 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:17:41.352 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:17:41.354 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:17:41.357 [http-nio-8080-exec-3] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:17:44.599 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:17:44.600 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:17:44.602 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:17:44.605 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:17:44.606 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:17:44.606 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:17:44.607 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:17:44.609 [http-nio-8080-exec-2] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:17:48.476 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:17:48.477 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:17:48.478 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:17:48.486 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 请求更新课程Markdown内容，课程ID: 1
2025-06-17 02:17:48.487 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:17:48.488 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:17:48.490 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:17:48.491 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:17:48.491 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:17:48.494 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:17:49.782 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:17:49.784 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:17:49.788 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:17:49.791 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 02:17:49.793 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:17:49.793 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:17:49.794 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:17:49.798 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 02:17:49.798 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 02:17:49.801 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 02:17:49.801 [http-nio-8080-exec-6] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 02:17:50.073 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:17:50.074 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 0 ---
2025-06-17 02:17:50.074 [http-nio-8080-exec-4] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:17:50.074 [http-nio-8080-exec-4] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:17:50.074 [http-nio-8080-exec-4] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 0
2025-06-17 02:17:50.076 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:17:50.076 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parse_error=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:17:50.077 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), 681adf054a2fdf91dc12cd9a27f3ac0bb0f2638d8743d77579749e9eb7b0085e(String), 2025-06-17T02:17:48.499652600(LocalDateTime), success(String), 课程为空或未包含章节(String), 2025-06-17T02:17:50.076115500(LocalDateTime), 0(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:17:50.079 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:17:50.082 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 课程内容更新并重新解析成功，课程ID: 1
2025-06-17 02:17:50.529 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:17:50.529 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:17:50.530 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:17:50.534 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:17:50.534 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:17:50.534 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:17:50.536 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:17:50.538 [http-nio-8080-exec-5] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:18:15.681 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:18:15.681 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:18:15.684 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:18:15.687 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:18:15.688 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:18:15.688 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:18:15.690 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:18:15.691 [http-nio-8080-exec-7] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:18:52.759 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:18:52.760 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:18:52.761 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:18:52.764 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:18:52.764 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:18:52.765 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:18:52.766 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:18:52.767 [http-nio-8080-exec-9] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:20:34.355 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.AuthController - 用户尝试登录: testuser
2025-06-17 02:20:34.529 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:20:34.529 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:20:34.531 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:20:34.671 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.AuthController - 用户登录成功: testuser
2025-06-17 02:20:48.344 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:20:48.344 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:20:48.346 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:20:48.350 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 请求解析课程，课程ID: 1
2025-06-17 02:20:48.353 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:20:48.353 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:20:48.357 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:20:48.373 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [0, 0, 0, 0, 0, 0]
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 0, 0, 0, 0, 0]
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '什么是人工智能？', level: 2
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 0, 0, 0, 0, 0]
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 1, 0, 0, 0, 0]
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.1
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: 'AI发展简史', level: 2
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 1, 0, 0, 0, 0]
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 2, 0, 0, 0, 0]
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.2
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 2, 0, 0, 0, 0]
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 0, 0, 0, 0, 0]
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '机器学习基础', level: 2
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 0, 0, 0, 0, 0]
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 0, 0, 0, 0]
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '监督学习', level: 3
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 0, 0, 0, 0]
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 1, 0, 0, 0]
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.1
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '无监督学习', level: 3
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 1, 0, 0, 0]
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 2, 0, 0, 0]
2025-06-17 02:20:48.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.2
2025-06-17 02:20:48.375 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '神经网络与深度学习', level: 2
2025-06-17 02:20:48.375 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 2, 0, 0, 0]
2025-06-17 02:20:48.375 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 2, 0, 0, 0, 0]
2025-06-17 02:20:48.375 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.2
2025-06-17 02:20:48.375 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 02:20:48.375 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 2, 0, 0, 0, 0]
2025-06-17 02:20:48.375 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 0, 0, 0, 0, 0]
2025-06-17 02:20:48.375 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3
2025-06-17 02:20:48.375 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '自然语言处理 (NLP)', level: 2
2025-06-17 02:20:48.375 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 0, 0, 0, 0, 0]
2025-06-17 02:20:48.375 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 1, 0, 0, 0, 0]
2025-06-17 02:20:48.375 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.1
2025-06-17 02:20:48.375 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 02:20:48.375 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 1, 0, 0, 0, 0]
2025-06-17 02:20:48.376 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 2, 0, 0, 0, 0]
2025-06-17 02:20:48.376 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.2
2025-06-17 02:20:48.376 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 11 ---
2025-06-17 02:20:48.376 [http-nio-8080-exec-7] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:20:48.376 [http-nio-8080-exec-7] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:20:48.377 [http-nio-8080-exec-7] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 0
2025-06-17 02:20:48.385 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:20:48.386 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==>  Preparing: INSERT INTO chapters ( course_id, chapter_key, level, title, content, sort_order, line_start, line_end, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-17 02:20:48.395 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
##  什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
##  AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 1(Integer), 0(Integer), 27(Integer), 2025-06-17T02:20:48.385707200(LocalDateTime), 2025-06-17T02:20:48.385707200(LocalDateTime)
2025-06-17 02:20:48.398 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:20:48.399 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:20:48.398747600(LocalDateTime), 2025-06-17T02:20:48.398747600(LocalDateTime)
2025-06-17 02:20:48.400 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:20:48.401 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:20:48.400750(LocalDateTime), 2025-06-17T02:20:48.400750(LocalDateTime)
2025-06-17 02:20:48.403 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:20:48.404 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
##  神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 4(Integer), 28(Integer), 76(Integer), 2025-06-17T02:20:48.403273900(LocalDateTime), 2025-06-17T02:20:48.403273900(LocalDateTime)
2025-06-17 02:20:48.406 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:20:48.409 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:20:48.407787(LocalDateTime), 2025-06-17T02:20:48.407787(LocalDateTime)
2025-06-17 02:20:48.414 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:20:48.414 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:20:48.414304700(LocalDateTime), 2025-06-17T02:20:48.414304700(LocalDateTime)
2025-06-17 02:20:48.415 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:20:48.418 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:20:48.416823900(LocalDateTime), 2025-06-17T02:20:48.416823900(LocalDateTime)
2025-06-17 02:20:48.421 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:20:48.421 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:20:48.421339400(LocalDateTime), 2025-06-17T02:20:48.421339400(LocalDateTime)
2025-06-17 02:20:48.422 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:20:48.423 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 9(Integer), 77(Integer), 97(Integer), 2025-06-17T02:20:48.422890(LocalDateTime), 2025-06-17T02:20:48.422890(LocalDateTime)
2025-06-17 02:20:48.425 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:20:48.428 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:20:48.425398700(LocalDateTime), 2025-06-17T02:20:48.425398700(LocalDateTime)
2025-06-17 02:20:48.429 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:20:48.429 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:20:48.429406(LocalDateTime), 2025-06-17T02:20:48.429406(LocalDateTime)
2025-06-17 02:20:48.469 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:20:48.469 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==>  Preparing: UPDATE chapters SET course_id=?, parent_id=?, chapter_key=?, level=?, title=?, content=?, sort_order=?, line_start=?, line_end=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:20:48.472 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 815(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:20:48.398747600(LocalDateTime), 2025-06-17T02:20:48.398747600(LocalDateTime), 816(Long)
2025-06-17 02:20:48.473 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:20:48.473 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 815(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:20:48.400750(LocalDateTime), 2025-06-17T02:20:48.400750(LocalDateTime), 817(Long)
2025-06-17 02:20:48.474 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:20:48.474 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 818(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:20:48.407787(LocalDateTime), 2025-06-17T02:20:48.407787(LocalDateTime), 819(Long)
2025-06-17 02:20:48.476 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:20:48.476 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 819(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:20:48.414304700(LocalDateTime), 2025-06-17T02:20:48.414304700(LocalDateTime), 820(Long)
2025-06-17 02:20:48.477 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:20:48.479 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 819(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:20:48.416823900(LocalDateTime), 2025-06-17T02:20:48.416823900(LocalDateTime), 821(Long)
2025-06-17 02:20:48.482 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:20:48.483 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 818(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:20:48.421339400(LocalDateTime), 2025-06-17T02:20:48.421339400(LocalDateTime), 822(Long)
2025-06-17 02:20:48.484 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:20:48.484 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 823(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:20:48.425398700(LocalDateTime), 2025-06-17T02:20:48.425398700(LocalDateTime), 824(Long)
2025-06-17 02:20:48.485 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:20:48.485 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 823(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:20:48.429406(LocalDateTime), 2025-06-17T02:20:48.429406(LocalDateTime), 825(Long)
2025-06-17 02:20:48.500 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:20:48.501 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:20:48.503 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), a93d3a782dbf7555f96278e190624e79d7df1977b980db7c248c38e2255cc418(String), 2025-06-17T02:19:44.220960600(LocalDateTime), success(String), 2025-06-17T02:20:48.496682(LocalDateTime), 11(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:20:48.505 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:20:48.510 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 课程解析成功，课程ID: 1
2025-06-17 02:20:54.695 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:20:54.696 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:20:54.700 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:20:54.707 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:20:54.708 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:20:54.709 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:20:54.713 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:20:54.714 [http-nio-8080-exec-9] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:21:00.570 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:21:00.570 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:21:00.573 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:21:00.576 [http-nio-8080-exec-10] INFO  com.example.aihub.controller.CoursesController - 请求更新课程Markdown内容，课程ID: 1
2025-06-17 02:21:00.576 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:21:00.576 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:21:00.579 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:21:00.580 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:21:00.580 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:21:00.583 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:21:00.589 [http-nio-8080-exec-10] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:21:00.589 [http-nio-8080-exec-10] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 0 ---
2025-06-17 02:21:00.589 [http-nio-8080-exec-10] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:21:00.590 [http-nio-8080-exec-10] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:21:00.593 [http-nio-8080-exec-10] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 11
2025-06-17 02:21:00.594 [http-nio-8080-exec-10] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:21:00.594 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parse_error=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:21:00.594 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), 306bcfb1dfd57deda32601776a8443afb1cc455883493df99a4d40c050244bb4(String), 2025-06-17T02:21:00.584173200(LocalDateTime), success(String), 课程为空或未包含章节(String), 2025-06-17T02:21:00.593206500(LocalDateTime), 0(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:21:00.596 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:21:00.600 [http-nio-8080-exec-10] INFO  com.example.aihub.controller.CoursesController - 课程内容更新并重新解析成功，课程ID: 1
2025-06-17 02:21:03.158 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:21:03.159 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:21:03.162 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:21:03.173 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:21:03.174 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:21:03.174 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:21:03.178 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:21:03.180 [http-nio-8080-exec-1] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:21:09.783 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:21:09.783 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:21:09.785 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:21:09.789 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 请求解析课程，课程ID: 1
2025-06-17 02:21:09.790 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:21:09.790 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:21:09.792 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:21:09.796 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:21:09.797 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 0 ---
2025-06-17 02:21:09.797 [http-nio-8080-exec-3] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:21:09.798 [http-nio-8080-exec-3] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:21:09.800 [http-nio-8080-exec-3] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 0
2025-06-17 02:21:09.801 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:21:09.801 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parse_error=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:21:09.802 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), 306bcfb1dfd57deda32601776a8443afb1cc455883493df99a4d40c050244bb4(String), 2025-06-17T02:21:00.584173200(LocalDateTime), success(String), 课程为空或未包含章节(String), 2025-06-17T02:21:09.800141400(LocalDateTime), 0(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:21:09.804 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:21:09.807 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 课程解析成功，课程ID: 1
2025-06-17 02:21:11.838 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:21:11.839 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:21:11.841 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:21:11.848 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:21:11.848 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:21:11.848 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:21:11.849 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:21:11.850 [http-nio-8080-exec-2] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:21:21.971 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:21:21.972 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:21:21.973 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:21:21.977 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 请求解析课程，课程ID: 1
2025-06-17 02:21:21.978 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:21:21.978 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:21:21.979 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:21:21.981 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:21:21.981 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 0 ---
2025-06-17 02:21:21.981 [http-nio-8080-exec-4] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:21:21.981 [http-nio-8080-exec-4] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:21:21.982 [http-nio-8080-exec-4] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 0
2025-06-17 02:21:21.983 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:21:21.983 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parse_error=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:21:21.983 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), 306bcfb1dfd57deda32601776a8443afb1cc455883493df99a4d40c050244bb4(String), 2025-06-17T02:21:00.584173200(LocalDateTime), success(String), 课程为空或未包含章节(String), 2025-06-17T02:21:21.982967600(LocalDateTime), 0(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:21:21.984 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:21:21.989 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 课程解析成功，课程ID: 1
2025-06-17 02:21:29.066 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:21:29.067 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:21:29.070 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:21:29.074 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:21:29.076 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:21:29.076 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:21:29.078 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:21:29.078 [http-nio-8080-exec-5] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:22:15.265 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:15.266 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:15.269 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:15.276 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 02:22:15.277 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:15.278 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:15.280 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:15.282 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 02:22:15.282 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 02:22:15.287 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 02:22:15.288 [http-nio-8080-exec-8] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 02:22:16.188 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:16.190 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:16.191 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:16.197 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:22:16.199 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:22:16.199 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:22:16.201 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:22:16.202 [http-nio-8080-exec-9] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:22:18.313 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:18.313 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:18.316 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:18.326 [http-nio-8080-exec-10] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:22:18.327 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:22:18.328 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:22:18.331 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:22:18.332 [http-nio-8080-exec-10] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:22:19.900 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:19.900 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:19.904 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:19.912 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 02:22:19.913 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:19.913 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:19.915 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:19.917 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 02:22:19.917 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 02:22:19.919 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 02:22:19.921 [http-nio-8080-exec-1] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 02:22:20.608 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:20.608 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:20.610 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:20.616 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:22:20.617 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:22:20.617 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:22:20.618 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:22:20.619 [http-nio-8080-exec-3] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:22:22.846 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:22.847 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:22.848 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:22.856 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 02:22:22.857 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:22.858 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:22.859 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:22.861 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 02:22:22.861 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 02:22:22.864 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 02:22:22.865 [http-nio-8080-exec-2] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 02:22:24.125 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:24.126 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:24.127 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:24.133 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:22:24.134 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:22:24.134 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:22:24.136 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:22:24.137 [http-nio-8080-exec-6] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:22:25.739 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:25.739 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:25.741 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:25.750 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 02:22:25.752 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:25.752 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:25.755 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:25.756 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 02:22:25.757 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 02:22:25.761 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 02:22:25.761 [http-nio-8080-exec-4] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 02:22:26.291 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:26.291 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:26.293 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:26.298 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:22:26.299 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:22:26.299 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:22:26.301 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:22:26.301 [http-nio-8080-exec-5] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:22:29.834 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:29.834 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:29.836 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:29.843 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:22:29.844 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:22:29.845 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:22:29.846 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:22:29.847 [http-nio-8080-exec-7] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:22:31.037 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:31.037 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:31.039 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:31.045 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:22:31.045 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:22:31.046 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:22:31.048 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:22:31.048 [http-nio-8080-exec-8] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:22:32.770 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:32.770 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:32.772 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:32.776 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 02:22:32.777 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:32.778 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:32.779 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:32.780 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 02:22:32.780 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 02:22:32.781 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 02:22:32.783 [http-nio-8080-exec-9] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 02:22:35.432 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:35.432 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:35.434 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:35.437 [http-nio-8080-exec-10] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:22:35.437 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:22:35.437 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:22:35.439 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:22:35.439 [http-nio-8080-exec-10] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:22:48.195 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:22:48.195 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:22:48.197 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:22:48.201 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:22:48.201 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:22:48.201 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:22:48.204 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:22:48.205 [http-nio-8080-exec-1] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:23:13.618 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:23:13.618 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:23:13.619 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:23:13.625 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 请求解析课程，课程ID: 1
2025-06-17 02:23:13.626 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:23:13.626 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:23:13.627 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [0, 0, 0, 0, 0, 0]
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 0, 0, 0, 0, 0]
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '什么是人工智能？', level: 2
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 0, 0, 0, 0, 0]
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 1, 0, 0, 0, 0]
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.1
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: 'AI发展简史', level: 2
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 1, 0, 0, 0, 0]
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 2, 0, 0, 0, 0]
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.2
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 2, 0, 0, 0, 0]
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 0, 0, 0, 0, 0]
2025-06-17 02:23:13.633 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '机器学习基础', level: 2
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 0, 0, 0, 0, 0]
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 0, 0, 0, 0]
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '监督学习', level: 3
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 0, 0, 0, 0]
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 1, 0, 0, 0]
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.1
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '无监督学习', level: 3
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 1, 0, 0, 0]
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 2, 0, 0, 0]
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.2
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '神经网络与深度学习', level: 2
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 2, 0, 0, 0]
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 2, 0, 0, 0, 0]
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.2
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 2, 0, 0, 0, 0]
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 0, 0, 0, 0, 0]
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '自然语言处理 (NLP)', level: 2
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 0, 0, 0, 0, 0]
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 1, 0, 0, 0, 0]
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.1
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 1, 0, 0, 0, 0]
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 2, 0, 0, 0, 0]
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.2
2025-06-17 02:23:13.634 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 11 ---
2025-06-17 02:23:13.635 [http-nio-8080-exec-3] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:23:13.635 [http-nio-8080-exec-3] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:23:13.636 [http-nio-8080-exec-3] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 0
2025-06-17 02:23:13.637 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:23:13.637 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==>  Preparing: INSERT INTO chapters ( course_id, chapter_key, level, title, content, sort_order, line_start, line_end, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-17 02:23:13.638 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
##  什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
##  AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 1(Integer), 0(Integer), 27(Integer), 2025-06-17T02:23:13.637574800(LocalDateTime), 2025-06-17T02:23:13.637574800(LocalDateTime)
2025-06-17 02:23:13.638 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:23:13.638 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:23:13.638570800(LocalDateTime), 2025-06-17T02:23:13.638570800(LocalDateTime)
2025-06-17 02:23:13.638 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:23:13.639 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:23:13.638570800(LocalDateTime), 2025-06-17T02:23:13.638570800(LocalDateTime)
2025-06-17 02:23:13.639 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:23:13.639 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
##  神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 4(Integer), 28(Integer), 76(Integer), 2025-06-17T02:23:13.639570600(LocalDateTime), 2025-06-17T02:23:13.639570600(LocalDateTime)
2025-06-17 02:23:13.639 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:23:13.639 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:23:13.639570600(LocalDateTime), 2025-06-17T02:23:13.639570600(LocalDateTime)
2025-06-17 02:23:13.639 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:23:13.639 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:23:13.639570600(LocalDateTime), 2025-06-17T02:23:13.639570600(LocalDateTime)
2025-06-17 02:23:13.641 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:23:13.641 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:23:13.641078(LocalDateTime), 2025-06-17T02:23:13.641078(LocalDateTime)
2025-06-17 02:23:13.641 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:23:13.641 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:23:13.641470600(LocalDateTime), 2025-06-17T02:23:13.641470600(LocalDateTime)
2025-06-17 02:23:13.641 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:23:13.641 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 9(Integer), 77(Integer), 97(Integer), 2025-06-17T02:23:13.641980700(LocalDateTime), 2025-06-17T02:23:13.641980700(LocalDateTime)
2025-06-17 02:23:13.641 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:23:13.642 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:23:13.641980700(LocalDateTime), 2025-06-17T02:23:13.641980700(LocalDateTime)
2025-06-17 02:23:13.642 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:23:13.642 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:23:13.642994600(LocalDateTime), 2025-06-17T02:23:13.642994600(LocalDateTime)
2025-06-17 02:23:13.653 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:23:13.653 [http-nio-8080-exec-3] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==>  Preparing: UPDATE chapters SET course_id=?, parent_id=?, chapter_key=?, level=?, title=?, content=?, sort_order=?, line_start=?, line_end=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:23:13.654 [http-nio-8080-exec-3] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 826(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:23:13.638570800(LocalDateTime), 2025-06-17T02:23:13.638570800(LocalDateTime), 827(Long)
2025-06-17 02:23:13.654 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:23:13.654 [http-nio-8080-exec-3] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 826(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:23:13.638570800(LocalDateTime), 2025-06-17T02:23:13.638570800(LocalDateTime), 828(Long)
2025-06-17 02:23:13.654 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:23:13.654 [http-nio-8080-exec-3] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 829(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:23:13.639570600(LocalDateTime), 2025-06-17T02:23:13.639570600(LocalDateTime), 830(Long)
2025-06-17 02:23:13.655 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:23:13.655 [http-nio-8080-exec-3] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 830(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:23:13.639570600(LocalDateTime), 2025-06-17T02:23:13.639570600(LocalDateTime), 831(Long)
2025-06-17 02:23:13.655 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:23:13.655 [http-nio-8080-exec-3] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 830(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:23:13.641078(LocalDateTime), 2025-06-17T02:23:13.641078(LocalDateTime), 832(Long)
2025-06-17 02:23:13.655 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:23:13.656 [http-nio-8080-exec-3] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 829(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:23:13.641470600(LocalDateTime), 2025-06-17T02:23:13.641470600(LocalDateTime), 833(Long)
2025-06-17 02:23:13.656 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:23:13.656 [http-nio-8080-exec-3] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 834(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:23:13.641980700(LocalDateTime), 2025-06-17T02:23:13.641980700(LocalDateTime), 835(Long)
2025-06-17 02:23:13.658 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:23:13.658 [http-nio-8080-exec-3] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 834(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:23:13.642994600(LocalDateTime), 2025-06-17T02:23:13.642994600(LocalDateTime), 836(Long)
2025-06-17 02:23:13.667 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:23:13.667 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:23:13.668 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), a93d3a782dbf7555f96278e190624e79d7df1977b980db7c248c38e2255cc418(String), 2025-06-17T02:23:10.932948300(LocalDateTime), success(String), 2025-06-17T02:23:13.667609200(LocalDateTime), 11(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:23:13.669 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:23:13.673 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 课程解析成功，课程ID: 1
2025-06-17 02:23:17.006 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:23:17.006 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:23:17.007 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:23:17.010 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:23:17.010 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:23:17.011 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:23:17.012 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:23:17.012 [http-nio-8080-exec-6] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:23:26.764 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:23:26.765 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:23:26.768 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:23:26.775 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:23:26.776 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:23:26.776 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:23:26.779 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:23:26.780 [http-nio-8080-exec-4] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:23:42.106 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:23:42.107 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:23:42.109 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:23:42.118 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求更新课程Markdown内容，课程ID: 1
2025-06-17 02:23:42.120 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:23:42.121 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:23:42.122 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:23:42.124 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:23:42.124 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:23:42.126 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:23:42.132 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:23:42.134 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 0 ---
2025-06-17 02:23:42.135 [http-nio-8080-exec-5] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:23:42.136 [http-nio-8080-exec-5] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:23:42.138 [http-nio-8080-exec-5] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 11
2025-06-17 02:23:42.139 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:23:42.139 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parse_error=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:23:42.141 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), 7a9a5e2c39f8dabb3b0b76d0ace3b534f92250d8aaaa16b544a155bc738914d7(String), 2025-06-17T02:23:42.127965300(LocalDateTime), success(String), 课程为空或未包含章节(String), 2025-06-17T02:23:42.138124400(LocalDateTime), 0(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:23:42.144 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:23:42.148 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 课程内容更新并重新解析成功，课程ID: 1
2025-06-17 02:23:51.051 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:23:51.051 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:23:51.054 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:23:51.060 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 02:23:51.061 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:23:51.061 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:23:51.064 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:23:51.065 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 02:23:51.066 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 02:23:51.070 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 02:23:51.070 [http-nio-8080-exec-7] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 02:23:53.083 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:23:53.083 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:23:53.084 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:23:53.089 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:23:53.090 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:23:53.090 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:23:53.092 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:23:53.093 [http-nio-8080-exec-8] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:29:01.659 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:29:01.660 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:29:01.662 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:29:01.684 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:29:01.684 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:29:01.685 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:29:01.688 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:29:01.689 [http-nio-8080-exec-9] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:29:20.013 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:29:20.015 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:29:20.019 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:29:20.030 [http-nio-8080-exec-10] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:29:20.031 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:29:20.031 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:29:20.034 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:29:20.036 [http-nio-8080-exec-10] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:29:27.961 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:29:27.961 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:29:27.963 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:29:27.967 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 请求更新课程Markdown内容，课程ID: 1
2025-06-17 02:29:27.967 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:29:27.969 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:29:27.970 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:29:27.970 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:29:27.971 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:29:27.972 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:29:27.976 [http-nio-8080-exec-1] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:29:27.976 [http-nio-8080-exec-1] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 0 ---
2025-06-17 02:29:27.976 [http-nio-8080-exec-1] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:29:27.977 [http-nio-8080-exec-1] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:29:27.979 [http-nio-8080-exec-1] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 0
2025-06-17 02:29:27.979 [http-nio-8080-exec-1] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:29:27.979 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parse_error=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:29:27.980 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), 2ff221695203a32b87b18d3c298b102a2494d7738b260b6b24b2544f4246ec63(String), 2025-06-17T02:29:27.972785200(LocalDateTime), success(String), 课程为空或未包含章节(String), 2025-06-17T02:29:27.979288100(LocalDateTime), 0(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:29:27.980 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:29:27.983 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 课程内容更新并重新解析成功，课程ID: 1
2025-06-17 02:29:30.468 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:29:30.468 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:29:30.471 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:29:30.483 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:29:30.484 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:29:30.484 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:29:30.486 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:29:30.487 [http-nio-8080-exec-3] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:29:33.189 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:29:33.190 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:29:33.192 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:29:33.199 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:29:33.200 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:29:33.200 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:29:33.203 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:29:33.204 [http-nio-8080-exec-2] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:29:35.236 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:29:35.236 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:29:35.239 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:29:35.251 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 02:29:35.253 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:29:35.255 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:29:35.257 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:29:35.259 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 02:29:35.260 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 02:29:35.263 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 02:29:35.264 [http-nio-8080-exec-6] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 02:29:36.089 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:29:36.089 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:29:36.091 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:29:36.097 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:29:36.097 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:29:36.097 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:29:36.099 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:29:36.100 [http-nio-8080-exec-4] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:30:01.616 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:30:01.616 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:30:01.618 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:30:01.623 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求更新课程Markdown内容，课程ID: 1
2025-06-17 02:30:01.624 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:30:01.624 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:30:01.625 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:30:01.626 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:30:01.626 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:30:01.628 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:30:01.636 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:30:01.637 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 0 ---
2025-06-17 02:30:01.637 [http-nio-8080-exec-5] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:30:01.637 [http-nio-8080-exec-5] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:30:01.637 [http-nio-8080-exec-5] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 0
2025-06-17 02:30:01.639 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:30:01.640 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parse_error=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:30:01.641 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), b5531bf1a8f13c5ba01fba76f74a79ae9ca206b093e17f5881365b1b386e48fa(String), 2025-06-17T02:30:01.631628400(LocalDateTime), success(String), 课程为空或未包含章节(String), 2025-06-17T02:30:01.637861700(LocalDateTime), 0(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:30:01.644 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:30:01.647 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 课程内容更新并重新解析成功，课程ID: 1
2025-06-17 02:30:08.934 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:30:08.934 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:30:08.935 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:30:08.940 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 请求更新课程Markdown内容，课程ID: 1
2025-06-17 02:30:08.941 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:30:08.943 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:30:08.945 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:30:08.946 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:30:08.946 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:30:08.948 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:30:08.951 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:30:08.951 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 0 ---
2025-06-17 02:30:08.951 [http-nio-8080-exec-7] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:30:08.951 [http-nio-8080-exec-7] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:30:08.953 [http-nio-8080-exec-7] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 0
2025-06-17 02:30:08.953 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:30:08.953 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parse_error=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:30:08.954 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), fdf065096308f5889c4e697cfe36689f428301cb1eaf6774cf782a41803fa61b(String), 2025-06-17T02:30:08.948836900(LocalDateTime), success(String), 课程为空或未包含章节(String), 2025-06-17T02:30:08.953353700(LocalDateTime), 0(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:30:08.955 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:30:08.958 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 课程内容更新并重新解析成功，课程ID: 1
2025-06-17 02:30:22.507 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:30:22.507 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:30:22.509 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:30:22.514 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 02:30:22.514 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:30:22.515 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:30:22.516 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:30:22.517 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 02:30:22.518 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 02:30:22.520 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 02:30:22.520 [http-nio-8080-exec-8] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 02:30:29.662 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:30:29.662 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:30:29.663 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:30:29.670 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:30:29.670 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:30:29.671 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:30:29.672 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:30:29.674 [http-nio-8080-exec-9] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:30:31.127 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:30:31.127 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:30:31.129 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:30:31.133 [http-nio-8080-exec-10] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 02:30:31.134 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:30:31.134 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:30:31.135 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:30:31.136 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 02:30:31.136 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 02:30:31.137 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 02:30:31.138 [http-nio-8080-exec-10] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 02:30:32.122 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:30:32.122 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:30:32.124 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:30:32.127 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:30:32.127 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:30:32.127 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:30:32.127 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:30:32.128 [http-nio-8080-exec-1] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:30:41.879 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:30:41.880 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:30:41.881 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:30:41.884 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 请求更新课程Markdown内容，课程ID: 1
2025-06-17 02:30:41.885 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:30:41.885 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:30:41.886 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:30:41.887 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:30:41.887 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:30:41.888 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:30:41.891 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:30:41.891 [http-nio-8080-exec-3] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 0 ---
2025-06-17 02:30:41.891 [http-nio-8080-exec-3] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:30:41.891 [http-nio-8080-exec-3] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:30:41.892 [http-nio-8080-exec-3] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 0
2025-06-17 02:30:41.893 [http-nio-8080-exec-3] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:30:41.894 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parse_error=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:30:41.896 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), e369e01b19124987885a735898715094914b93367dc13dc588949a7f21faf688(String), 2025-06-17T02:30:41.889234900(LocalDateTime), success(String), 课程为空或未包含章节(String), 2025-06-17T02:30:41.892242(LocalDateTime), 0(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:30:41.896 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:30:41.901 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 课程内容更新并重新解析成功，课程ID: 1
2025-06-17 02:30:44.793 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:30:44.794 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:30:44.796 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:30:44.808 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:30:44.808 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:30:44.809 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:30:44.809 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:30:44.810 [http-nio-8080-exec-2] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:30:50.549 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:30:50.550 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:30:50.551 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:30:50.560 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求解析课程，课程ID: 1
2025-06-17 02:30:50.563 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:30:50.563 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:30:50.565 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:30:50.568 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:30:50.569 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 0 ---
2025-06-17 02:30:50.569 [http-nio-8080-exec-6] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:30:50.570 [http-nio-8080-exec-6] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:30:50.575 [http-nio-8080-exec-6] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 0
2025-06-17 02:30:50.577 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:30:50.578 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parse_error=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:30:50.579 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), e369e01b19124987885a735898715094914b93367dc13dc588949a7f21faf688(String), 2025-06-17T02:30:41.889234900(LocalDateTime), success(String), 课程为空或未包含章节(String), 2025-06-17T02:30:50.576436300(LocalDateTime), 0(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:30:50.585 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:30:50.590 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 课程解析成功，课程ID: 1
2025-06-17 02:30:52.870 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:30:52.870 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:30:52.872 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:30:52.877 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求解析课程，课程ID: 2
2025-06-17 02:30:52.878 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:30:52.879 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 2(Integer)
2025-06-17 02:30:52.880 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:30:52.889 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 2 ---
2025-06-17 02:30:52.889 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 02:30:52.889 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [0, 0, 0, 0, 0, 0]
2025-06-17 02:30:52.889 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 0, 0, 0, 0, 0]
2025-06-17 02:30:52.889 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1
2025-06-17 02:30:52.890 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '什么是人工智能？', level: 2
2025-06-17 02:30:52.890 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 0, 0, 0, 0, 0]
2025-06-17 02:30:52.890 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 1, 0, 0, 0, 0]
2025-06-17 02:30:52.890 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.1
2025-06-17 02:30:52.890 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: 'AI发展简史', level: 2
2025-06-17 02:30:52.890 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 1, 0, 0, 0, 0]
2025-06-17 02:30:52.890 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 2, 0, 0, 0, 0]
2025-06-17 02:30:52.890 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.2
2025-06-17 02:30:52.890 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 02:30:52.890 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 2, 0, 0, 0, 0]
2025-06-17 02:30:52.890 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 0, 0, 0, 0, 0]
2025-06-17 02:30:52.890 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2
2025-06-17 02:30:52.891 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '机器学习基础', level: 2
2025-06-17 02:30:52.891 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 0, 0, 0, 0, 0]
2025-06-17 02:30:52.891 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 0, 0, 0, 0]
2025-06-17 02:30:52.891 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1
2025-06-17 02:30:52.891 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '监督学习', level: 3
2025-06-17 02:30:52.891 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 0, 0, 0, 0]
2025-06-17 02:30:52.891 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 1, 0, 0, 0]
2025-06-17 02:30:52.891 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.1
2025-06-17 02:30:52.891 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '无监督学习', level: 3
2025-06-17 02:30:52.891 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 1, 0, 0, 0]
2025-06-17 02:30:52.892 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 2, 0, 0, 0]
2025-06-17 02:30:52.896 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.2
2025-06-17 02:30:52.896 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '神经网络与深度学习', level: 2
2025-06-17 02:30:52.896 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 2, 0, 0, 0]
2025-06-17 02:30:52.896 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 2, 0, 0, 0, 0]
2025-06-17 02:30:52.896 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.2
2025-06-17 02:30:52.896 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 02:30:52.896 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 2, 0, 0, 0, 0]
2025-06-17 02:30:52.896 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 0, 0, 0, 0, 0]
2025-06-17 02:30:52.896 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3
2025-06-17 02:30:52.897 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '自然语言处理 (NLP)', level: 2
2025-06-17 02:30:52.897 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 0, 0, 0, 0, 0]
2025-06-17 02:30:52.897 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 1, 0, 0, 0, 0]
2025-06-17 02:30:52.897 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.1
2025-06-17 02:30:52.897 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 02:30:52.897 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 1, 0, 0, 0, 0]
2025-06-17 02:30:52.897 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 2, 0, 0, 0, 0]
2025-06-17 02:30:52.897 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.2
2025-06-17 02:30:52.897 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 11 ---
2025-06-17 02:30:52.897 [http-nio-8080-exec-5] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:30:52.897 [http-nio-8080-exec-5] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 2(Integer)
2025-06-17 02:30:52.900 [http-nio-8080-exec-5] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 11
2025-06-17 02:30:52.901 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:30:52.902 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==>  Preparing: INSERT INTO chapters ( course_id, chapter_key, level, title, content, sort_order, line_start, line_end, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-17 02:30:52.903 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 2(Integer), 1(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
##  什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
##  AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 1(Integer), 0(Integer), 27(Integer), 2025-06-17T02:30:52.901836900(LocalDateTime), 2025-06-17T02:30:52.901836900(LocalDateTime)
2025-06-17 02:30:52.905 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:30:52.907 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 2(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:30:52.906360100(LocalDateTime), 2025-06-17T02:30:52.906360100(LocalDateTime)
2025-06-17 02:30:52.908 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:30:52.910 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 2(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:30:52.908867600(LocalDateTime), 2025-06-17T02:30:52.908867600(LocalDateTime)
2025-06-17 02:30:52.911 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:30:52.911 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 2(Integer), 2(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
##  神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 4(Integer), 28(Integer), 76(Integer), 2025-06-17T02:30:52.911878500(LocalDateTime), 2025-06-17T02:30:52.911878500(LocalDateTime)
2025-06-17 02:30:52.912 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:30:52.912 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 2(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:30:52.912879600(LocalDateTime), 2025-06-17T02:30:52.912879600(LocalDateTime)
2025-06-17 02:30:52.913 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:30:52.913 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 2(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:30:52.913877800(LocalDateTime), 2025-06-17T02:30:52.913877800(LocalDateTime)
2025-06-17 02:30:52.916 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:30:52.917 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 2(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:30:52.916398100(LocalDateTime), 2025-06-17T02:30:52.916398100(LocalDateTime)
2025-06-17 02:30:52.962 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:30:52.963 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 2(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:30:52.962611400(LocalDateTime), 2025-06-17T02:30:52.962611400(LocalDateTime)
2025-06-17 02:30:52.963 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:30:52.965 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 2(Integer), 3(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 9(Integer), 77(Integer), 97(Integer), 2025-06-17T02:30:52.965122100(LocalDateTime), 2025-06-17T02:30:52.965122100(LocalDateTime)
2025-06-17 02:30:52.966 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:30:52.967 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 2(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:30:52.966130800(LocalDateTime), 2025-06-17T02:30:52.966130800(LocalDateTime)
2025-06-17 02:30:52.967 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:30:52.968 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 2(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:30:52.967129100(LocalDateTime), 2025-06-17T02:30:52.967129100(LocalDateTime)
2025-06-17 02:30:52.985 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:30:52.985 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==>  Preparing: UPDATE chapters SET course_id=?, parent_id=?, chapter_key=?, level=?, title=?, content=?, sort_order=?, line_start=?, line_end=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:30:52.985 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 2(Integer), 837(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:30:52.906360100(LocalDateTime), 2025-06-17T02:30:52.906360100(LocalDateTime), 838(Long)
2025-06-17 02:30:52.986 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:30:52.986 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 2(Integer), 837(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:30:52.908867600(LocalDateTime), 2025-06-17T02:30:52.908867600(LocalDateTime), 839(Long)
2025-06-17 02:30:52.986 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:30:52.987 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 2(Integer), 840(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:30:52.912879600(LocalDateTime), 2025-06-17T02:30:52.912879600(LocalDateTime), 841(Long)
2025-06-17 02:30:52.987 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:30:52.987 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 2(Integer), 841(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:30:52.913877800(LocalDateTime), 2025-06-17T02:30:52.913877800(LocalDateTime), 842(Long)
2025-06-17 02:30:52.987 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:30:52.988 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 2(Integer), 841(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:30:52.916398100(LocalDateTime), 2025-06-17T02:30:52.916398100(LocalDateTime), 843(Long)
2025-06-17 02:30:52.988 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:30:52.988 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 2(Integer), 840(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:30:52.962611400(LocalDateTime), 2025-06-17T02:30:52.962611400(LocalDateTime), 844(Long)
2025-06-17 02:30:52.989 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:30:52.989 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 2(Integer), 845(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:30:52.966130800(LocalDateTime), 2025-06-17T02:30:52.966130800(LocalDateTime), 846(Long)
2025-06-17 02:30:52.989 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:30:52.989 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 2(Integer), 845(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:30:52.967129100(LocalDateTime), 2025-06-17T02:30:52.967129100(LocalDateTime), 847(Long)
2025-06-17 02:30:52.999 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:30:52.999 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:30:53.000 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: 人工智能(String), string(String), 2(Integer), courses-md/2c3d23a5-2423-4e23-8c33-fab36671046e.md(String), a93d3a782dbf7555f96278e190624e79d7df1977b980db7c248c38e2255cc418(String), 2025-06-16T12:23:32.105755200(LocalDateTime), success(String), 2025-06-17T02:30:52.999825500(LocalDateTime), 11(Integer), 2025-06-16T12:12:02(LocalDateTime), 2025-06-16T12:12:02(LocalDateTime), 2(Long)
2025-06-17 02:30:53.001 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:30:53.006 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 课程解析成功，课程ID: 2
2025-06-17 02:31:51.334 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:31:51.335 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:31:51.336 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:31:51.346 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.CoursesController - 请求解析课程，课程ID: 1
2025-06-17 02:31:51.348 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:31:51.348 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:31:51.349 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:31:51.356 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:31:51.356 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 人工智能导论', level: 1
2025-06-17 02:31:51.356 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [0, 0, 0, 0, 0, 0]
2025-06-17 02:31:51.356 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 0, 0, 0, 0, 0]
2025-06-17 02:31:51.356 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1
2025-06-17 02:31:51.356 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '什么是人工智能？', level: 2
2025-06-17 02:31:51.356 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 0, 0, 0, 0, 0]
2025-06-17 02:31:51.356 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 1, 0, 0, 0, 0]
2025-06-17 02:31:51.357 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.1
2025-06-17 02:31:51.357 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: 'AI发展简史', level: 2
2025-06-17 02:31:51.357 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 1, 0, 0, 0, 0]
2025-06-17 02:31:51.357 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 2, 0, 0, 0, 0]
2025-06-17 02:31:51.357 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.2
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 2, 0, 0, 0, 0]
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 0, 0, 0, 0, 0]
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '机器学习基础', level: 2
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 0, 0, 0, 0, 0]
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 0, 0, 0, 0]
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '监督学习', level: 3
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 0, 0, 0, 0]
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 1, 0, 0, 0]
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.1
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '无监督学习', level: 3
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 1, 0, 0, 0]
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 2, 0, 0, 0]
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.2
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '神经网络与深度学习', level: 2
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 2, 0, 0, 0]
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 2, 0, 0, 0, 0]
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.2
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 2, 0, 0, 0, 0]
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 0, 0, 0, 0, 0]
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '自然语言处理 (NLP)', level: 2
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 0, 0, 0, 0, 0]
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 1, 0, 0, 0, 0]
2025-06-17 02:31:51.358 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.1
2025-06-17 02:31:51.359 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 02:31:51.359 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 1, 0, 0, 0, 0]
2025-06-17 02:31:51.359 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 2, 0, 0, 0, 0]
2025-06-17 02:31:51.359 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.2
2025-06-17 02:31:51.359 [http-nio-8080-exec-8] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 11 ---
2025-06-17 02:31:51.359 [http-nio-8080-exec-8] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:31:51.359 [http-nio-8080-exec-8] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:31:51.361 [http-nio-8080-exec-8] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 0
2025-06-17 02:31:51.361 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:31:51.361 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==>  Preparing: INSERT INTO chapters ( course_id, chapter_key, level, title, content, sort_order, line_start, line_end, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-17 02:31:51.362 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1(String), 1(Integer), 第1章 人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
##  什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
##  AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 1(Integer), 0(Integer), 27(Integer), 2025-06-17T02:31:51.361245800(LocalDateTime), 2025-06-17T02:31:51.361245800(LocalDateTime)
2025-06-17 02:31:51.363 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:31:51.363 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:31:51.363254(LocalDateTime), 2025-06-17T02:31:51.363254(LocalDateTime)
2025-06-17 02:31:51.364 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:31:51.364 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:31:51.364253800(LocalDateTime), 2025-06-17T02:31:51.364253800(LocalDateTime)
2025-06-17 02:31:51.364 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:31:51.365 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
##  神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 4(Integer), 28(Integer), 76(Integer), 2025-06-17T02:31:51.364253800(LocalDateTime), 2025-06-17T02:31:51.364253800(LocalDateTime)
2025-06-17 02:31:51.365 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:31:51.365 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:31:51.365253400(LocalDateTime), 2025-06-17T02:31:51.365253400(LocalDateTime)
2025-06-17 02:31:51.366 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:31:51.366 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:31:51.366253700(LocalDateTime), 2025-06-17T02:31:51.366253700(LocalDateTime)
2025-06-17 02:31:51.366 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:31:51.366 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:31:51.366253700(LocalDateTime), 2025-06-17T02:31:51.366253700(LocalDateTime)
2025-06-17 02:31:51.366 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:31:51.366 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:31:51.366253700(LocalDateTime), 2025-06-17T02:31:51.366253700(LocalDateTime)
2025-06-17 02:31:51.367 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:31:51.368 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 9(Integer), 77(Integer), 97(Integer), 2025-06-17T02:31:51.367873600(LocalDateTime), 2025-06-17T02:31:51.367873600(LocalDateTime)
2025-06-17 02:31:51.368 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:31:51.368 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:31:51.368768700(LocalDateTime), 2025-06-17T02:31:51.368768700(LocalDateTime)
2025-06-17 02:31:51.368 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:31:51.369 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:31:51.368768700(LocalDateTime), 2025-06-17T02:31:51.369835700(LocalDateTime)
2025-06-17 02:31:51.382 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:31:51.383 [http-nio-8080-exec-8] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==>  Preparing: UPDATE chapters SET course_id=?, parent_id=?, chapter_key=?, level=?, title=?, content=?, sort_order=?, line_start=?, line_end=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:31:51.384 [http-nio-8080-exec-8] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 848(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:31:51.363254(LocalDateTime), 2025-06-17T02:31:51.363254(LocalDateTime), 849(Long)
2025-06-17 02:31:51.384 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:31:51.384 [http-nio-8080-exec-8] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 848(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，"人工智能"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:31:51.364253800(LocalDateTime), 2025-06-17T02:31:51.364253800(LocalDateTime), 850(Long)
2025-06-17 02:31:51.385 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:31:51.385 [http-nio-8080-exec-8] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 851(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:31:51.365253400(LocalDateTime), 2025-06-17T02:31:51.365253400(LocalDateTime), 852(Long)
2025-06-17 02:31:51.385 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:31:51.385 [http-nio-8080-exec-8] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 852(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:31:51.366253700(LocalDateTime), 2025-06-17T02:31:51.366253700(LocalDateTime), 853(Long)
2025-06-17 02:31:51.385 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:31:51.386 [http-nio-8080-exec-8] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 852(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:31:51.366253700(LocalDateTime), 2025-06-17T02:31:51.366253700(LocalDateTime), 854(Long)
2025-06-17 02:31:51.386 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:31:51.386 [http-nio-8080-exec-8] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 851(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print("模型结构摘要:")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:31:51.366253700(LocalDateTime), 2025-06-17T02:31:51.366253700(LocalDateTime), 855(Long)
2025-06-17 02:31:51.388 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:31:51.388 [http-nio-8080-exec-8] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 856(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:31:51.368768700(LocalDateTime), 2025-06-17T02:31:51.368768700(LocalDateTime), 857(Long)
2025-06-17 02:31:51.389 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:31:51.389 [http-nio-8080-exec-8] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 856(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:31:51.368768700(LocalDateTime), 2025-06-17T02:31:51.369835700(LocalDateTime), 858(Long)
2025-06-17 02:31:51.396 [http-nio-8080-exec-8] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:31:51.396 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:31:51.396 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), a93d3a782dbf7555f96278e190624e79d7df1977b980db7c248c38e2255cc418(String), 2025-06-17T02:31:23.919916800(LocalDateTime), success(String), 2025-06-17T02:31:51.395739600(LocalDateTime), 11(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:31:51.397 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:31:51.401 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.CoursesController - 课程解析成功，课程ID: 1
2025-06-17 02:31:57.844 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:31:57.844 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:31:57.845 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:31:57.849 [http-nio-8080-exec-10] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 02:31:57.850 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:31:57.850 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:31:57.851 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:31:57.852 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 02:31:57.853 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 02:31:57.854 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 02:31:57.854 [http-nio-8080-exec-10] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 02:31:58.776 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:31:58.776 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:31:58.777 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:31:58.783 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:31:58.784 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:31:58.784 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:31:58.785 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:31:58.786 [http-nio-8080-exec-1] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:32:02.892 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:32:02.892 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:32:02.893 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:32:02.896 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 02:32:02.897 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:32:02.897 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:32:02.898 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:32:02.899 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 02:32:02.899 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 02:32:02.900 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 02:32:02.900 [http-nio-8080-exec-3] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 02:32:03.547 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:32:03.548 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:32:03.548 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:32:03.552 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:32:03.552 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:32:03.553 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:32:03.554 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:32:03.555 [http-nio-8080-exec-2] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:32:05.080 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:32:05.081 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:32:05.083 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:32:05.091 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 02:32:05.094 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:32:05.094 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:32:05.096 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:32:05.098 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 02:32:05.098 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 02:32:05.099 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 02:32:05.099 [http-nio-8080-exec-6] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 02:32:05.659 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:32:05.659 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:32:05.660 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:32:05.664 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:32:05.664 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:32:05.666 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:32:05.666 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:32:05.666 [http-nio-8080-exec-4] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:32:12.574 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:32:12.574 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:32:12.576 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:32:12.578 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:32:12.579 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:32:12.580 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:32:12.582 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:32:12.584 [http-nio-8080-exec-5] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:36:27.775 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-17 02:36:27.801 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-17 02:36:43.909 [main] INFO  com.example.aihub.AiHubApplication - Starting AiHubApplication using Java 17.0.12 with PID 23404 (D:\JAVA\AIHub\target\classes started by ZhuanZ（无密码） in D:\JAVA\AIHub)
2025-06-17 02:36:43.911 [main] DEBUG com.example.aihub.AiHubApplication - Running with Spring Boot v3.3.6, Spring v6.1.15
2025-06-17 02:36:43.912 [main] INFO  com.example.aihub.AiHubApplication - No active profile set, falling back to 1 default profile: "default"
2025-06-17 02:36:45.603 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-06-17 02:36:45.610 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-06-17 02:36:45.688 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 44 ms. Found 0 Redis repository interfaces.
2025-06-17 02:36:47.113 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 02:36:47.141 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 02:36:47.144 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 02:36:47.145 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.33]
2025-06-17 02:36:47.335 [main] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 02:36:47.336 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 3363 ms
2025-06-17 02:36:48.497 [main] DEBUG com.example.aihub.config.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-06-17 02:36:48.613 [main] INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name userDetailsServiceImpl
2025-06-17 02:36:50.848 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 02:36:50.900 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 02:36:50.926 [main] INFO  com.example.aihub.AiHubApplication - Started AiHubApplication in 7.686 seconds (process running for 8.95)
2025-06-17 02:37:04.714 [http-nio-8080-exec-1] INFO  o.a.c.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 02:37:04.716 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 02:37:04.719 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-06-17 02:37:05.098 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 02:37:05.715 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@474cefd7
2025-06-17 02:37:05.718 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 02:37:05.740 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:37:05.798 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:37:05.859 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:37:05.947 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:37:05.949 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:37:05.949 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:37:05.964 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:37:05.966 [http-nio-8080-exec-1] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:37:28.007 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:37:28.008 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:37:28.012 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:37:28.044 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.CoursesController - 请求更新课程Markdown内容，课程ID: 1
2025-06-17 02:37:28.070 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:37:28.070 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:37:28.074 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:37:28.075 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:37:28.076 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:37:28.077 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:37:28.360 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:37:28.366 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 123人工智能导论', level: 1
2025-06-17 02:37:28.366 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [0, 0, 0, 0, 0, 0]
2025-06-17 02:37:28.366 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 0, 0, 0, 0, 0]
2025-06-17 02:37:28.366 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1
2025-06-17 02:37:28.367 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '什么是人工智能？', level: 2
2025-06-17 02:37:28.367 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 0, 0, 0, 0, 0]
2025-06-17 02:37:28.367 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 1, 0, 0, 0, 0]
2025-06-17 02:37:28.367 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.1
2025-06-17 02:37:28.367 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: 'AI发展简史', level: 2
2025-06-17 02:37:28.367 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 1, 0, 0, 0, 0]
2025-06-17 02:37:28.367 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 2, 0, 0, 0, 0]
2025-06-17 02:37:28.367 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.2
2025-06-17 02:37:28.367 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 02:37:28.367 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 2, 0, 0, 0, 0]
2025-06-17 02:37:28.368 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 0, 0, 0, 0, 0]
2025-06-17 02:37:28.368 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2
2025-06-17 02:37:28.368 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '机器学习基础', level: 2
2025-06-17 02:37:28.368 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 0, 0, 0, 0, 0]
2025-06-17 02:37:28.368 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 0, 0, 0, 0]
2025-06-17 02:37:28.368 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1
2025-06-17 02:37:28.368 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '监督学习', level: 3
2025-06-17 02:37:28.368 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 0, 0, 0, 0]
2025-06-17 02:37:28.369 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 1, 0, 0, 0]
2025-06-17 02:37:28.369 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.1
2025-06-17 02:37:28.369 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '无监督学习', level: 3
2025-06-17 02:37:28.369 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 1, 0, 0, 0]
2025-06-17 02:37:28.370 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 2, 0, 0, 0]
2025-06-17 02:37:28.370 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.2
2025-06-17 02:37:28.370 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '神经网络与深度学习', level: 2
2025-06-17 02:37:28.370 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 2, 0, 0, 0]
2025-06-17 02:37:28.370 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 2, 0, 0, 0, 0]
2025-06-17 02:37:28.370 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.2
2025-06-17 02:37:28.370 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 02:37:28.371 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 2, 0, 0, 0, 0]
2025-06-17 02:37:28.371 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 0, 0, 0, 0, 0]
2025-06-17 02:37:28.371 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3
2025-06-17 02:37:28.371 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '自然语言处理 (NLP)', level: 2
2025-06-17 02:37:28.371 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 0, 0, 0, 0, 0]
2025-06-17 02:37:28.371 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 1, 0, 0, 0, 0]
2025-06-17 02:37:28.371 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.1
2025-06-17 02:37:28.371 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 02:37:28.371 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 1, 0, 0, 0, 0]
2025-06-17 02:37:28.371 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 2, 0, 0, 0, 0]
2025-06-17 02:37:28.371 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.2
2025-06-17 02:37:28.371 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 11 ---
2025-06-17 02:37:28.372 [http-nio-8080-exec-2] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:37:28.372 [http-nio-8080-exec-2] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:37:28.376 [http-nio-8080-exec-2] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 11
2025-06-17 02:37:28.384 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:28.387 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==>  Preparing: INSERT INTO chapters ( course_id, chapter_key, level, title, content, sort_order, line_start, line_end, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-17 02:37:28.388 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1(String), 1(Integer), 第1章 123人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
##  什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
##  AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 1(Integer), 0(Integer), 27(Integer), 2025-06-17T02:37:28.385922400(LocalDateTime), 2025-06-17T02:37:28.386922(LocalDateTime)
2025-06-17 02:37:28.390 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:28.390 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:37:28.390921700(LocalDateTime), 2025-06-17T02:37:28.390921700(LocalDateTime)
2025-06-17 02:37:28.391 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:28.392 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:37:28.391921800(LocalDateTime), 2025-06-17T02:37:28.391921800(LocalDateTime)
2025-06-17 02:37:28.393 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:28.393 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
##  神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 4(Integer), 28(Integer), 76(Integer), 2025-06-17T02:37:28.393951400(LocalDateTime), 2025-06-17T02:37:28.393951400(LocalDateTime)
2025-06-17 02:37:28.394 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:28.394 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:37:28.394950300(LocalDateTime), 2025-06-17T02:37:28.394950300(LocalDateTime)
2025-06-17 02:37:28.396 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:28.397 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:37:28.396948200(LocalDateTime), 2025-06-17T02:37:28.396948200(LocalDateTime)
2025-06-17 02:37:28.399 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:28.400 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:37:28.399954800(LocalDateTime), 2025-06-17T02:37:28.399954800(LocalDateTime)
2025-06-17 02:37:28.402 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:28.403 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:37:28.402466700(LocalDateTime), 2025-06-17T02:37:28.402466700(LocalDateTime)
2025-06-17 02:37:28.403 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:28.404 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 9(Integer), 77(Integer), 97(Integer), 2025-06-17T02:37:28.403985200(LocalDateTime), 2025-06-17T02:37:28.404985400(LocalDateTime)
2025-06-17 02:37:28.405 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:28.406 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:37:28.405986100(LocalDateTime), 2025-06-17T02:37:28.405986100(LocalDateTime)
2025-06-17 02:37:28.407 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:28.408 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:37:28.407984800(LocalDateTime), 2025-06-17T02:37:28.407984800(LocalDateTime)
2025-06-17 02:37:28.437 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:28.438 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==>  Preparing: UPDATE chapters SET course_id=?, parent_id=?, chapter_key=?, level=?, title=?, content=?, sort_order=?, line_start=?, line_end=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:37:28.439 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 859(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:37:28.390921700(LocalDateTime), 2025-06-17T02:37:28.390921700(LocalDateTime), 860(Long)
2025-06-17 02:37:28.439 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:28.440 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 859(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:37:28.391921800(LocalDateTime), 2025-06-17T02:37:28.391921800(LocalDateTime), 861(Long)
2025-06-17 02:37:28.440 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:28.441 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 862(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:37:28.394950300(LocalDateTime), 2025-06-17T02:37:28.394950300(LocalDateTime), 863(Long)
2025-06-17 02:37:28.442 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:28.443 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 863(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:37:28.396948200(LocalDateTime), 2025-06-17T02:37:28.396948200(LocalDateTime), 864(Long)
2025-06-17 02:37:28.443 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:28.444 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 863(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:37:28.399954800(LocalDateTime), 2025-06-17T02:37:28.399954800(LocalDateTime), 865(Long)
2025-06-17 02:37:28.445 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:28.446 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 862(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:37:28.402466700(LocalDateTime), 2025-06-17T02:37:28.402466700(LocalDateTime), 866(Long)
2025-06-17 02:37:28.447 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:28.449 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 867(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:37:28.405986100(LocalDateTime), 2025-06-17T02:37:28.405986100(LocalDateTime), 868(Long)
2025-06-17 02:37:28.450 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:28.452 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 867(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:37:28.407984800(LocalDateTime), 2025-06-17T02:37:28.407984800(LocalDateTime), 869(Long)
2025-06-17 02:37:28.469 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:28.470 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:37:28.472 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), baf4939d435f9955f01117d58dd862efdfb553f471797af47888726a1ff7be18(String), 2025-06-17T02:37:28.079523800(LocalDateTime), success(String), 2025-06-17T02:37:28.465695300(LocalDateTime), 11(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:37:28.477 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:37:28.487 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.CoursesController - 课程内容更新并重新解析成功，课程ID: 1
2025-06-17 02:37:30.001 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:37:30.002 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:37:30.006 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:37:30.022 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:37:30.022 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:37:30.023 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:37:30.026 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:37:30.027 [http-nio-8080-exec-3] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:37:31.120 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:37:31.121 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:37:31.123 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:37:31.129 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 请求获取当前教师的课程列表
2025-06-17 02:37:31.130 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:37:31.131 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:37:31.132 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:37:31.137 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE deleted=0 AND (teacher_id = ?)
2025-06-17 02:37:31.138 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - ==> Parameters: 2(Long)
2025-06-17 02:37:31.141 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectList - <==      Total: 2
2025-06-17 02:37:31.142 [http-nio-8080-exec-4] DEBUG com.example.aihub.controller.CoursesController - 获取到课程 2 条
2025-06-17 02:37:32.095 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:37:32.096 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:37:32.100 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:37:32.111 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:37:32.113 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:37:32.114 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:37:32.116 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:37:32.117 [http-nio-8080-exec-5] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:37:43.968 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:37:43.968 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:37:43.970 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:37:43.975 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求解析课程，课程ID: 1
2025-06-17 02:37:43.976 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:37:43.977 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:37:43.978 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:37:43.986 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:37:43.986 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 123人工智能导论', level: 1
2025-06-17 02:37:43.986 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [0, 0, 0, 0, 0, 0]
2025-06-17 02:37:43.986 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 0, 0, 0, 0, 0]
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '什么是人工智能？', level: 2
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 0, 0, 0, 0, 0]
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 1, 0, 0, 0, 0]
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.1
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: 'AI发展简史', level: 2
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 1, 0, 0, 0, 0]
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 2, 0, 0, 0, 0]
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.2
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 2, 0, 0, 0, 0]
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 0, 0, 0, 0, 0]
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '机器学习基础', level: 2
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 0, 0, 0, 0, 0]
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 0, 0, 0, 0]
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '监督学习', level: 3
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 0, 0, 0, 0]
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 1, 0, 0, 0]
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.1
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '无监督学习', level: 3
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 1, 0, 0, 0]
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 2, 0, 0, 0]
2025-06-17 02:37:43.987 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.2
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '神经网络与深度学习', level: 2
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 2, 0, 0, 0]
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 2, 0, 0, 0, 0]
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.2
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 2, 0, 0, 0, 0]
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 0, 0, 0, 0, 0]
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '自然语言处理 (NLP)', level: 2
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 0, 0, 0, 0, 0]
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 1, 0, 0, 0, 0]
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.1
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 1, 0, 0, 0, 0]
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 2, 0, 0, 0, 0]
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.2
2025-06-17 02:37:43.988 [http-nio-8080-exec-6] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 11 ---
2025-06-17 02:37:43.989 [http-nio-8080-exec-6] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:37:43.989 [http-nio-8080-exec-6] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:37:43.991 [http-nio-8080-exec-6] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 11
2025-06-17 02:37:43.993 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:43.993 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==>  Preparing: INSERT INTO chapters ( course_id, chapter_key, level, title, content, sort_order, line_start, line_end, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-17 02:37:43.994 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1(String), 1(Integer), 第1章 123人工智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
##  什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
##  AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 1(Integer), 0(Integer), 27(Integer), 2025-06-17T02:37:43.993673600(LocalDateTime), 2025-06-17T02:37:43.993673600(LocalDateTime)
2025-06-17 02:37:43.994 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:43.994 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:37:43.994674400(LocalDateTime), 2025-06-17T02:37:43.994674400(LocalDateTime)
2025-06-17 02:37:43.995 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:43.995 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:37:43.995676300(LocalDateTime), 2025-06-17T02:37:43.995676300(LocalDateTime)
2025-06-17 02:37:43.995 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:43.996 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
##  神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 4(Integer), 28(Integer), 76(Integer), 2025-06-17T02:37:43.995676300(LocalDateTime), 2025-06-17T02:37:43.995676300(LocalDateTime)
2025-06-17 02:37:43.996 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:43.996 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:37:43.996674(LocalDateTime), 2025-06-17T02:37:43.996674(LocalDateTime)
2025-06-17 02:37:43.997 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:43.997 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:37:43.997672800(LocalDateTime), 2025-06-17T02:37:43.997672800(LocalDateTime)
2025-06-17 02:37:43.997 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:43.998 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:37:43.997672800(LocalDateTime), 2025-06-17T02:37:43.997672800(LocalDateTime)
2025-06-17 02:37:43.999 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:43.999 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:37:43.999674200(LocalDateTime), 2025-06-17T02:37:43.999674200(LocalDateTime)
2025-06-17 02:37:43.999 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:43.999 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 9(Integer), 77(Integer), 97(Integer), 2025-06-17T02:37:43.999674200(LocalDateTime), 2025-06-17T02:37:43.999674200(LocalDateTime)
2025-06-17 02:37:44.000 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:44.000 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:37:44.000678900(LocalDateTime), 2025-06-17T02:37:44.000678900(LocalDateTime)
2025-06-17 02:37:44.000 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:37:44.001 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:37:44.000678900(LocalDateTime), 2025-06-17T02:37:44.000678900(LocalDateTime)
2025-06-17 02:37:44.012 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:44.012 [http-nio-8080-exec-6] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==>  Preparing: UPDATE chapters SET course_id=?, parent_id=?, chapter_key=?, level=?, title=?, content=?, sort_order=?, line_start=?, line_end=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:37:44.012 [http-nio-8080-exec-6] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 870(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:37:43.994674400(LocalDateTime), 2025-06-17T02:37:43.994674400(LocalDateTime), 871(Long)
2025-06-17 02:37:44.012 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:44.012 [http-nio-8080-exec-6] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 870(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:37:43.995676300(LocalDateTime), 2025-06-17T02:37:43.995676300(LocalDateTime), 872(Long)
2025-06-17 02:37:44.013 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:44.013 [http-nio-8080-exec-6] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 873(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:37:43.996674(LocalDateTime), 2025-06-17T02:37:43.996674(LocalDateTime), 874(Long)
2025-06-17 02:37:44.014 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:44.015 [http-nio-8080-exec-6] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 874(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:37:43.997672800(LocalDateTime), 2025-06-17T02:37:43.997672800(LocalDateTime), 875(Long)
2025-06-17 02:37:44.015 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:44.016 [http-nio-8080-exec-6] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 874(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:37:43.997672800(LocalDateTime), 2025-06-17T02:37:43.997672800(LocalDateTime), 876(Long)
2025-06-17 02:37:44.016 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:44.016 [http-nio-8080-exec-6] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 873(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:37:43.999674200(LocalDateTime), 2025-06-17T02:37:43.999674200(LocalDateTime), 877(Long)
2025-06-17 02:37:44.017 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:44.017 [http-nio-8080-exec-6] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 878(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:37:44.000678900(LocalDateTime), 2025-06-17T02:37:44.000678900(LocalDateTime), 879(Long)
2025-06-17 02:37:44.018 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:44.018 [http-nio-8080-exec-6] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 878(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:37:44.000678900(LocalDateTime), 2025-06-17T02:37:44.000678900(LocalDateTime), 880(Long)
2025-06-17 02:37:44.026 [http-nio-8080-exec-6] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:37:44.026 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:37:44.027 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), baf4939d435f9955f01117d58dd862efdfb553f471797af47888726a1ff7be18(String), 2025-06-17T02:37:28.079523800(LocalDateTime), success(String), 2025-06-17T02:37:44.026858(LocalDateTime), 11(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:37:44.029 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:37:44.032 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 课程解析成功，课程ID: 1
2025-06-17 02:37:57.300 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:37:57.301 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:37:57.303 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:37:57.309 [http-nio-8080-exec-8] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:37:57.310 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:37:57.310 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:37:57.314 [http-nio-8080-exec-8] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:37:57.316 [http-nio-8080-exec-8] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:39:11.356 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:39:11.357 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:39:11.361 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:39:11.370 [http-nio-8080-exec-9] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:39:11.370 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:39:11.370 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:39:11.374 [http-nio-8080-exec-9] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:39:11.375 [http-nio-8080-exec-9] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:39:16.729 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:39:16.729 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:39:16.732 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:39:16.741 [http-nio-8080-exec-10] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:39:16.742 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:39:16.742 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:39:16.744 [http-nio-8080-exec-10] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:39:16.746 [http-nio-8080-exec-10] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:39:29.239 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:39:29.239 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:39:29.241 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:39:29.248 [http-nio-8080-exec-1] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:39:29.248 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:39:29.249 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:39:29.250 [http-nio-8080-exec-1] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:39:29.252 [http-nio-8080-exec-1] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:39:32.630 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:39:32.630 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:39:32.631 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:39:32.638 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.CoursesController - 请求更新课程Markdown内容，课程ID: 1
2025-06-17 02:39:32.639 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:39:32.640 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:39:32.640 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:39:32.642 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:39:32.642 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:39:32.644 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 123人工321321321智能导论', level: 1
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [0, 0, 0, 0, 0, 0]
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 0, 0, 0, 0, 0]
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '什么是人工智能？', level: 2
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 0, 0, 0, 0, 0]
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 1, 0, 0, 0, 0]
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.1
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: 'AI发展简史', level: 2
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 1, 0, 0, 0, 0]
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 2, 0, 0, 0, 0]
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.2
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 2, 0, 0, 0, 0]
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 0, 0, 0, 0, 0]
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '机器学习基础', level: 2
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 0, 0, 0, 0, 0]
2025-06-17 02:39:32.654 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 0, 0, 0, 0]
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '监督学习', level: 3
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 0, 0, 0, 0]
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 1, 0, 0, 0]
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.1
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '无监督学习', level: 3
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 1, 0, 0, 0]
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 2, 0, 0, 0]
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.2
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '神经网络与深度学习', level: 2
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 2, 0, 0, 0]
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 2, 0, 0, 0, 0]
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.2
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 2, 0, 0, 0, 0]
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 0, 0, 0, 0, 0]
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '自然语言处理 (NLP)', level: 2
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 0, 0, 0, 0, 0]
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 1, 0, 0, 0, 0]
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.1
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 1, 0, 0, 0, 0]
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 2, 0, 0, 0, 0]
2025-06-17 02:39:32.655 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.2
2025-06-17 02:39:32.656 [http-nio-8080-exec-2] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 11 ---
2025-06-17 02:39:32.656 [http-nio-8080-exec-2] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:39:32.656 [http-nio-8080-exec-2] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:39:32.659 [http-nio-8080-exec-2] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 11
2025-06-17 02:39:32.660 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:32.660 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==>  Preparing: INSERT INTO chapters ( course_id, chapter_key, level, title, content, sort_order, line_start, line_end, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-17 02:39:32.665 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1(String), 1(Integer), 第1章 123人工321321321智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
##  什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
##  AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 1(Integer), 0(Integer), 27(Integer), 2025-06-17T02:39:32.660579500(LocalDateTime), 2025-06-17T02:39:32.660579500(LocalDateTime)
2025-06-17 02:39:32.667 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:32.668 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:39:32.667270100(LocalDateTime), 2025-06-17T02:39:32.667270100(LocalDateTime)
2025-06-17 02:39:32.668 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:32.669 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:39:32.668280900(LocalDateTime), 2025-06-17T02:39:32.668280900(LocalDateTime)
2025-06-17 02:39:32.669 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:32.670 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
##  神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 4(Integer), 28(Integer), 76(Integer), 2025-06-17T02:39:32.670279200(LocalDateTime), 2025-06-17T02:39:32.670279200(LocalDateTime)
2025-06-17 02:39:32.670 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:32.670 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:39:32.670809900(LocalDateTime), 2025-06-17T02:39:32.670809900(LocalDateTime)
2025-06-17 02:39:32.671 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:32.671 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:39:32.671817400(LocalDateTime), 2025-06-17T02:39:32.671817400(LocalDateTime)
2025-06-17 02:39:32.672 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:32.673 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:39:32.672825700(LocalDateTime), 2025-06-17T02:39:32.672825700(LocalDateTime)
2025-06-17 02:39:32.673 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:32.674 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:39:32.673828600(LocalDateTime), 2025-06-17T02:39:32.673828600(LocalDateTime)
2025-06-17 02:39:32.674 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:32.675 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 9(Integer), 77(Integer), 97(Integer), 2025-06-17T02:39:32.674826300(LocalDateTime), 2025-06-17T02:39:32.674826300(LocalDateTime)
2025-06-17 02:39:32.675 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:32.676 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:39:32.675824600(LocalDateTime), 2025-06-17T02:39:32.675824600(LocalDateTime)
2025-06-17 02:39:32.676 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:32.676 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:39:32.676826600(LocalDateTime), 2025-06-17T02:39:32.676826600(LocalDateTime)
2025-06-17 02:39:32.692 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:32.692 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==>  Preparing: UPDATE chapters SET course_id=?, parent_id=?, chapter_key=?, level=?, title=?, content=?, sort_order=?, line_start=?, line_end=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:39:32.694 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 881(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:39:32.667270100(LocalDateTime), 2025-06-17T02:39:32.667270100(LocalDateTime), 882(Long)
2025-06-17 02:39:32.694 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:32.695 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 881(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:39:32.668280900(LocalDateTime), 2025-06-17T02:39:32.668280900(LocalDateTime), 883(Long)
2025-06-17 02:39:32.695 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:32.696 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 884(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:39:32.670809900(LocalDateTime), 2025-06-17T02:39:32.670809900(LocalDateTime), 885(Long)
2025-06-17 02:39:32.697 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:32.697 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 885(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:39:32.671817400(LocalDateTime), 2025-06-17T02:39:32.671817400(LocalDateTime), 886(Long)
2025-06-17 02:39:32.697 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:32.698 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 885(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:39:32.672825700(LocalDateTime), 2025-06-17T02:39:32.672825700(LocalDateTime), 887(Long)
2025-06-17 02:39:32.699 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:32.699 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 884(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:39:32.673828600(LocalDateTime), 2025-06-17T02:39:32.673828600(LocalDateTime), 888(Long)
2025-06-17 02:39:32.699 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:32.700 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 889(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:39:32.675824600(LocalDateTime), 2025-06-17T02:39:32.675824600(LocalDateTime), 890(Long)
2025-06-17 02:39:32.700 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:32.700 [http-nio-8080-exec-2] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 889(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:39:32.676826600(LocalDateTime), 2025-06-17T02:39:32.676826600(LocalDateTime), 891(Long)
2025-06-17 02:39:32.710 [http-nio-8080-exec-2] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:32.711 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:39:32.711 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), f1f4b7ea9596f688fb63b823011b750ef6843993fc320e11fa6cb7d5588dfbed(String), 2025-06-17T02:39:32.645017200(LocalDateTime), success(String), 2025-06-17T02:39:32.710345300(LocalDateTime), 11(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:39:32.713 [http-nio-8080-exec-2] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:39:32.716 [http-nio-8080-exec-2] INFO  com.example.aihub.controller.CoursesController - 课程内容更新并重新解析成功，课程ID: 1
2025-06-17 02:39:38.941 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:39:38.942 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:39:38.943 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:39:38.950 [http-nio-8080-exec-3] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:39:38.950 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:39:38.950 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:39:38.952 [http-nio-8080-exec-3] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:39:38.953 [http-nio-8080-exec-3] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:39:52.892 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:39:52.893 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:39:52.896 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:39:52.901 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 请求更新课程Markdown内容，课程ID: 1
2025-06-17 02:39:52.902 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:39:52.903 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:39:52.904 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:39:52.904 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:39:52.905 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:39:52.906 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:39:52.913 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 123人工321321321智能导论', level: 1
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [0, 0, 0, 0, 0, 0]
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 0, 0, 0, 0, 0]
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '什么是人工智能？', level: 2
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 0, 0, 0, 0, 0]
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 1, 0, 0, 0, 0]
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.1
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: 'AI发展简史', level: 2
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 1, 0, 0, 0, 0]
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 2, 0, 0, 0, 0]
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.2
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 2, 0, 0, 0, 0]
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 0, 0, 0, 0, 0]
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '机器学习基础', level: 2
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 0, 0, 0, 0, 0]
2025-06-17 02:39:52.914 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 0, 0, 0, 0]
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '监督学习', level: 3
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 0, 0, 0, 0]
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 1, 0, 0, 0]
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.1
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '无监督学习', level: 3
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 1, 0, 0, 0]
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 2, 0, 0, 0]
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.2
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '神经网络与深度学习', level: 2
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 2, 0, 0, 0]
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 2, 0, 0, 0, 0]
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.2
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 2, 0, 0, 0, 0]
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 0, 0, 0, 0, 0]
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '自然语言处理 (NLP)', level: 2
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 0, 0, 0, 0, 0]
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 1, 0, 0, 0, 0]
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.1
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 1, 0, 0, 0, 0]
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 2, 0, 0, 0, 0]
2025-06-17 02:39:52.915 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.2
2025-06-17 02:39:52.916 [http-nio-8080-exec-4] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 11 ---
2025-06-17 02:39:52.916 [http-nio-8080-exec-4] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:39:52.916 [http-nio-8080-exec-4] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:39:52.920 [http-nio-8080-exec-4] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 11
2025-06-17 02:39:52.920 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:52.921 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==>  Preparing: INSERT INTO chapters ( course_id, chapter_key, level, title, content, sort_order, line_start, line_end, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-17 02:39:52.921 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1(String), 1(Integer), 第1章 123人工321321321智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
##  什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
##  AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 1(Integer), 0(Integer), 27(Integer), 2025-06-17T02:39:52.921008700(LocalDateTime), 2025-06-17T02:39:52.921008700(LocalDateTime)
2025-06-17 02:39:52.922 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:52.922 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:39:52.922009100(LocalDateTime), 2025-06-17T02:39:52.922009100(LocalDateTime)
2025-06-17 02:39:52.922 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:52.922 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:39:52.922519400(LocalDateTime), 2025-06-17T02:39:52.922519400(LocalDateTime)
2025-06-17 02:39:52.922 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:52.922 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
##  神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 4(Integer), 28(Integer), 76(Integer), 2025-06-17T02:39:52.922519400(LocalDateTime), 2025-06-17T02:39:52.922519400(LocalDateTime)
2025-06-17 02:39:52.923 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:52.923 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:39:52.923532600(LocalDateTime), 2025-06-17T02:39:52.923532600(LocalDateTime)
2025-06-17 02:39:52.923 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:52.924 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:39:52.923532600(LocalDateTime), 2025-06-17T02:39:52.923532600(LocalDateTime)
2025-06-17 02:39:52.924 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:52.924 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:39:52.924529300(LocalDateTime), 2025-06-17T02:39:52.924529300(LocalDateTime)
2025-06-17 02:39:52.924 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:52.925 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:39:52.924529300(LocalDateTime), 2025-06-17T02:39:52.924529300(LocalDateTime)
2025-06-17 02:39:52.925 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:52.925 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 9(Integer), 77(Integer), 97(Integer), 2025-06-17T02:39:52.925531900(LocalDateTime), 2025-06-17T02:39:52.925531900(LocalDateTime)
2025-06-17 02:39:52.925 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:52.926 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:39:52.926529(LocalDateTime), 2025-06-17T02:39:52.926529(LocalDateTime)
2025-06-17 02:39:52.926 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:39:52.926 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:39:52.926529(LocalDateTime), 2025-06-17T02:39:52.926529(LocalDateTime)
2025-06-17 02:39:52.939 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:52.939 [http-nio-8080-exec-4] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==>  Preparing: UPDATE chapters SET course_id=?, parent_id=?, chapter_key=?, level=?, title=?, content=?, sort_order=?, line_start=?, line_end=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:39:52.940 [http-nio-8080-exec-4] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 892(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:39:52.922009100(LocalDateTime), 2025-06-17T02:39:52.922009100(LocalDateTime), 893(Long)
2025-06-17 02:39:52.940 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:52.940 [http-nio-8080-exec-4] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 892(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:39:52.922519400(LocalDateTime), 2025-06-17T02:39:52.922519400(LocalDateTime), 894(Long)
2025-06-17 02:39:52.940 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:52.941 [http-nio-8080-exec-4] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 895(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:39:52.923532600(LocalDateTime), 2025-06-17T02:39:52.923532600(LocalDateTime), 896(Long)
2025-06-17 02:39:52.941 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:52.941 [http-nio-8080-exec-4] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 896(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:39:52.923532600(LocalDateTime), 2025-06-17T02:39:52.923532600(LocalDateTime), 897(Long)
2025-06-17 02:39:52.941 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:52.942 [http-nio-8080-exec-4] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 896(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:39:52.924529300(LocalDateTime), 2025-06-17T02:39:52.924529300(LocalDateTime), 898(Long)
2025-06-17 02:39:52.942 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:52.942 [http-nio-8080-exec-4] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 895(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:39:52.924529300(LocalDateTime), 2025-06-17T02:39:52.924529300(LocalDateTime), 899(Long)
2025-06-17 02:39:52.943 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:52.943 [http-nio-8080-exec-4] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 900(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:39:52.926529(LocalDateTime), 2025-06-17T02:39:52.926529(LocalDateTime), 901(Long)
2025-06-17 02:39:52.943 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:52.944 [http-nio-8080-exec-4] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 900(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:39:52.926529(LocalDateTime), 2025-06-17T02:39:52.926529(LocalDateTime), 902(Long)
2025-06-17 02:39:52.950 [http-nio-8080-exec-4] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:39:52.951 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:39:52.951 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), f1f4b7ea9596f688fb63b823011b750ef6843993fc320e11fa6cb7d5588dfbed(String), 2025-06-17T02:39:52.906632100(LocalDateTime), success(String), 2025-06-17T02:39:52.950235800(LocalDateTime), 11(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:39:52.953 [http-nio-8080-exec-4] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:39:52.955 [http-nio-8080-exec-4] INFO  com.example.aihub.controller.CoursesController - 课程内容更新并重新解析成功，课程ID: 1
2025-06-17 02:40:39.879 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:40:39.879 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:40:39.881 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:40:39.886 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 请求更新课程Markdown内容，课程ID: 1
2025-06-17 02:40:39.888 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:40:39.889 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:40:39.891 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:40:39.892 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:40:39.893 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:40:39.894 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:40:39.901 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:40:39.901 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 22222人工321321321智能导论', level: 1
2025-06-17 02:40:39.902 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [0, 0, 0, 0, 0, 0]
2025-06-17 02:40:39.902 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 0, 0, 0, 0, 0]
2025-06-17 02:40:39.902 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1
2025-06-17 02:40:39.902 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '什么是人工智能？', level: 2
2025-06-17 02:40:39.902 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 0, 0, 0, 0, 0]
2025-06-17 02:40:39.902 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 1, 0, 0, 0, 0]
2025-06-17 02:40:39.902 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.1
2025-06-17 02:40:39.902 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: 'AI发展简史', level: 2
2025-06-17 02:40:39.902 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 1, 0, 0, 0, 0]
2025-06-17 02:40:39.902 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 2, 0, 0, 0, 0]
2025-06-17 02:40:39.902 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.2
2025-06-17 02:40:39.902 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 02:40:39.902 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 2, 0, 0, 0, 0]
2025-06-17 02:40:39.903 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 0, 0, 0, 0, 0]
2025-06-17 02:40:39.903 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2
2025-06-17 02:40:39.903 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '机器学习基础', level: 2
2025-06-17 02:40:39.903 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 0, 0, 0, 0, 0]
2025-06-17 02:40:39.903 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 0, 0, 0, 0]
2025-06-17 02:40:39.903 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1
2025-06-17 02:40:39.903 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '监督学习', level: 3
2025-06-17 02:40:39.903 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 0, 0, 0, 0]
2025-06-17 02:40:39.903 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 1, 0, 0, 0]
2025-06-17 02:40:39.903 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.1
2025-06-17 02:40:39.903 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '无监督学习', level: 3
2025-06-17 02:40:39.903 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 1, 0, 0, 0]
2025-06-17 02:40:39.903 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 2, 0, 0, 0]
2025-06-17 02:40:39.903 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.2
2025-06-17 02:40:39.904 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '神经网络与深度学习', level: 2
2025-06-17 02:40:39.904 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 2, 0, 0, 0]
2025-06-17 02:40:39.904 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 2, 0, 0, 0, 0]
2025-06-17 02:40:39.904 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.2
2025-06-17 02:40:39.904 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 02:40:39.904 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 2, 0, 0, 0, 0]
2025-06-17 02:40:39.904 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 0, 0, 0, 0, 0]
2025-06-17 02:40:39.904 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3
2025-06-17 02:40:39.904 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '自然语言处理 (NLP)', level: 2
2025-06-17 02:40:39.904 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 0, 0, 0, 0, 0]
2025-06-17 02:40:39.904 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 1, 0, 0, 0, 0]
2025-06-17 02:40:39.904 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.1
2025-06-17 02:40:39.904 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 02:40:39.905 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 1, 0, 0, 0, 0]
2025-06-17 02:40:39.905 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 2, 0, 0, 0, 0]
2025-06-17 02:40:39.905 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.2
2025-06-17 02:40:39.905 [http-nio-8080-exec-5] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 11 ---
2025-06-17 02:40:39.905 [http-nio-8080-exec-5] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:40:39.905 [http-nio-8080-exec-5] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:40:39.908 [http-nio-8080-exec-5] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 11
2025-06-17 02:40:39.909 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:40:39.909 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==>  Preparing: INSERT INTO chapters ( course_id, chapter_key, level, title, content, sort_order, line_start, line_end, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-17 02:40:39.909 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1(String), 1(Integer), 第1章 22222人工321321321智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
##  什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
##  AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 1(Integer), 0(Integer), 27(Integer), 2025-06-17T02:40:39.909950900(LocalDateTime), 2025-06-17T02:40:39.909950900(LocalDateTime)
2025-06-17 02:40:39.910 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:40:39.910 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:40:39.910960600(LocalDateTime), 2025-06-17T02:40:39.910960600(LocalDateTime)
2025-06-17 02:40:39.911 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:40:39.911 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:40:39.911958900(LocalDateTime), 2025-06-17T02:40:39.911958900(LocalDateTime)
2025-06-17 02:40:39.911 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:40:39.912 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
##  神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 4(Integer), 28(Integer), 76(Integer), 2025-06-17T02:40:39.911958900(LocalDateTime), 2025-06-17T02:40:39.911958900(LocalDateTime)
2025-06-17 02:40:39.912 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:40:39.912 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:40:39.912964500(LocalDateTime), 2025-06-17T02:40:39.912964500(LocalDateTime)
2025-06-17 02:40:39.913 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:40:39.913 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:40:39.913959900(LocalDateTime), 2025-06-17T02:40:39.913959900(LocalDateTime)
2025-06-17 02:40:39.914 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:40:39.914 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:40:39.914959100(LocalDateTime), 2025-06-17T02:40:39.914959100(LocalDateTime)
2025-06-17 02:40:39.914 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:40:39.915 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:40:39.914959100(LocalDateTime), 2025-06-17T02:40:39.914959100(LocalDateTime)
2025-06-17 02:40:39.915 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:40:39.915 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 9(Integer), 77(Integer), 97(Integer), 2025-06-17T02:40:39.915961900(LocalDateTime), 2025-06-17T02:40:39.915961900(LocalDateTime)
2025-06-17 02:40:39.916 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:40:39.916 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:40:39.916964700(LocalDateTime), 2025-06-17T02:40:39.916964700(LocalDateTime)
2025-06-17 02:40:39.916 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:40:39.916 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:40:39.916964700(LocalDateTime), 2025-06-17T02:40:39.916964700(LocalDateTime)
2025-06-17 02:40:39.933 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:40:39.934 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==>  Preparing: UPDATE chapters SET course_id=?, parent_id=?, chapter_key=?, level=?, title=?, content=?, sort_order=?, line_start=?, line_end=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:40:39.934 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 903(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:40:39.910960600(LocalDateTime), 2025-06-17T02:40:39.910960600(LocalDateTime), 904(Long)
2025-06-17 02:40:39.935 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:40:39.935 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 903(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 3(Integer), 15(Integer), 27(Integer), 2025-06-17T02:40:39.911958900(LocalDateTime), 2025-06-17T02:40:39.911958900(LocalDateTime), 905(Long)
2025-06-17 02:40:39.935 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:40:39.936 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 906(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 5(Integer), 32(Integer), 52(Integer), 2025-06-17T02:40:39.912964500(LocalDateTime), 2025-06-17T02:40:39.912964500(LocalDateTime), 907(Long)
2025-06-17 02:40:39.936 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:40:39.936 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 907(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 6(Integer), 36(Integer), 44(Integer), 2025-06-17T02:40:39.913959900(LocalDateTime), 2025-06-17T02:40:39.913959900(LocalDateTime), 908(Long)
2025-06-17 02:40:39.937 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:40:39.937 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 907(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 7(Integer), 45(Integer), 52(Integer), 2025-06-17T02:40:39.914959100(LocalDateTime), 2025-06-17T02:40:39.914959100(LocalDateTime), 909(Long)
2025-06-17 02:40:39.937 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:40:39.938 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 906(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 8(Integer), 53(Integer), 76(Integer), 2025-06-17T02:40:39.914959100(LocalDateTime), 2025-06-17T02:40:39.914959100(LocalDateTime), 910(Long)
2025-06-17 02:40:39.938 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:40:39.938 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 911(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 10(Integer), 81(Integer), 89(Integer), 2025-06-17T02:40:39.916964700(LocalDateTime), 2025-06-17T02:40:39.916964700(LocalDateTime), 912(Long)
2025-06-17 02:40:39.939 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:40:39.939 [http-nio-8080-exec-5] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 911(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 11(Integer), 90(Integer), 97(Integer), 2025-06-17T02:40:39.916964700(LocalDateTime), 2025-06-17T02:40:39.916964700(LocalDateTime), 913(Long)
2025-06-17 02:40:39.947 [http-nio-8080-exec-5] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:40:39.947 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:40:39.948 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), 83282920ac010951f628760a85d4ce3312f2354988965cbb87f688bd5f0ced4c(String), 2025-06-17T02:40:39.895198500(LocalDateTime), success(String), 2025-06-17T02:40:39.946712(LocalDateTime), 11(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:40:39.949 [http-nio-8080-exec-5] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:40:39.953 [http-nio-8080-exec-5] INFO  com.example.aihub.controller.CoursesController - 课程内容更新并重新解析成功，课程ID: 1
2025-06-17 02:41:50.793 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:41:50.793 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:41:50.796 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:41:50.801 [http-nio-8080-exec-6] INFO  com.example.aihub.controller.CoursesController - 请求获取课程Markdown内容，课程ID: 1
2025-06-17 02:41:50.801 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:41:50.801 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:41:50.808 [http-nio-8080-exec-6] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:41:50.809 [http-nio-8080-exec-6] DEBUG com.example.aihub.controller.CoursesController - 成功获取到课程内容，课程ID: 1
2025-06-17 02:42:34.373 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:42:34.373 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:42:34.374 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:42:34.380 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 请求更新课程Markdown内容，课程ID: 1
2025-06-17 02:42:34.381 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==>  Preparing: SELECT id,title,description,teacher_id,file_path,file_hash,file_updated_at,parse_status,parse_error,parsed_at,chapter_count,create_time,update_time,deleted FROM courses WHERE id=? AND deleted=0
2025-06-17 02:42:34.381 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - ==> Parameters: 1(Integer)
2025-06-17 02:42:34.383 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.selectById - <==      Total: 1
2025-06-17 02:42:34.383 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==>  Preparing: SELECT id,username,email,user_code,password_hash,full_name,avatar,role,create_time,update_time,deleted FROM users WHERE deleted=0 AND (username = ?)
2025-06-17 02:42:34.383 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - ==> Parameters: testuser(String)
2025-06-17 02:42:34.384 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.UsersMapper.selectList - <==      Total: 1
2025-06-17 02:42:34.391 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing START] courseId: 1 ---
2025-06-17 02:42:34.391 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第1章 22222人工321321321智能导论', level: 1
2025-06-17 02:42:34.391 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [0, 0, 0, 0, 0, 0]
2025-06-17 02:42:34.391 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 0, 0, 0, 0, 0]
2025-06-17 02:42:34.391 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1
2025-06-17 02:42:34.391 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '什么是人工智能？', level: 2
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 0, 0, 0, 0, 0]
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 1, 0, 0, 0, 0]
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.1
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '程凯', level: 3
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 1, 0, 0, 0, 0]
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 1, 1, 0, 0, 0]
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.1.1
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: 'AI发展简史', level: 2
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 1, 1, 0, 0, 0]
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [1, 2, 0, 0, 0, 0]
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 1.2
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第2章 核心技术概念', level: 1
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [1, 2, 0, 0, 0, 0]
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 0, 0, 0, 0, 0]
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '机器学习基础', level: 2
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 0, 0, 0, 0, 0]
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 0, 0, 0, 0]
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '监督学习', level: 3
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 0, 0, 0, 0]
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 1, 0, 0, 0]
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.1
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '无监督学习', level: 3
2025-06-17 02:42:34.392 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 1, 0, 0, 0]
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 1, 2, 0, 0, 0]
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.1.2
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '神经网络与深度学习', level: 2
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 1, 2, 0, 0, 0]
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [2, 2, 0, 0, 0, 0]
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 2.2
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '第3章 主要应用领域', level: 1
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [2, 2, 0, 0, 0, 0]
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 0, 0, 0, 0, 0]
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '自然语言处理 (NLP)', level: 2
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 0, 0, 0, 0, 0]
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 1, 0, 0, 0, 0]
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.1
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Found heading: '3.2 计算机视觉 (CV)', level: 2
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state BEFORE: [3, 1, 0, 0, 0, 0]
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - Counters state AFTER:  [3, 2, 0, 0, 0, 0]
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - ==> Generated chapterKey: 3.2
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG com.example.aihub.service.impl.CoursesServiceImpl - --- [Chapter Parsing END] Total chapters found: 12 ---
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==>  Preparing: DELETE FROM chapters WHERE course_id = ?
2025-06-17 02:42:34.393 [http-nio-8080-exec-7] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - ==> Parameters: 1(Integer)
2025-06-17 02:42:34.395 [http-nio-8080-exec-7] DEBUG c.e.a.m.ChaptersMapper.physicalDeleteByCourseId - <==    Updates: 11
2025-06-17 02:42:34.396 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:42:34.396 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==>  Preparing: INSERT INTO chapters ( course_id, chapter_key, level, title, content, sort_order, line_start, line_end, create_time, update_time ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
2025-06-17 02:42:34.396 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1(String), 1(Integer), 第1章 22222人工321321321智能导论(String), 欢迎来到人工智能的世界！本章将为您揭开AI的神秘面纱，介绍其基本定义、发展历史以及核心理念。学习本章后，您将对AI有一个宏观的认识。
##  什么是人工智能？人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
### 程凯##  AI发展简史从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 1(Integer), 0(Integer), 27(Integer), 2025-06-17T02:42:34.396747500(LocalDateTime), 2025-06-17T02:42:34.396747500(LocalDateTime)
2025-06-17 02:42:34.398 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:42:34.398 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
### 程凯(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:42:34.398255700(LocalDateTime), 2025-06-17T02:42:34.398255700(LocalDateTime)
2025-06-17 02:42:34.398 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:42:34.398 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.1.1(String), 3(Integer), 程凯(String), (String), 3(Integer), 13(Integer), 14(Integer), 2025-06-17T02:42:34.398393300(LocalDateTime), 2025-06-17T02:42:34.398393300(LocalDateTime)
2025-06-17 02:42:34.399 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:42:34.399 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 4(Integer), 15(Integer), 27(Integer), 2025-06-17T02:42:34.399265100(LocalDateTime), 2025-06-17T02:42:34.399265100(LocalDateTime)
2025-06-17 02:42:34.399 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:42:34.400 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2(String), 1(Integer), 第2章 核心技术概念(String), 本章将深入探讨构成现代AI的两大支柱：机器学习和神经网络。这是所有AI应用的技术基石。
## 机器学习基础机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。
##  神经网络与深度学习神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 5(Integer), 28(Integer), 76(Integer), 2025-06-17T02:42:34.399265100(LocalDateTime), 2025-06-17T02:42:34.399265100(LocalDateTime)
2025-06-17 02:42:34.400 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:42:34.400 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 6(Integer), 32(Integer), 52(Integer), 2025-06-17T02:42:34.400265100(LocalDateTime), 2025-06-17T02:42:34.400265100(LocalDateTime)
2025-06-17 02:42:34.400 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:42:34.401 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 7(Integer), 36(Integer), 44(Integer), 2025-06-17T02:42:34.401263(LocalDateTime), 2025-06-17T02:42:34.401263(LocalDateTime)
2025-06-17 02:42:34.401 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:42:34.401 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 8(Integer), 45(Integer), 52(Integer), 2025-06-17T02:42:34.401263(LocalDateTime), 2025-06-17T02:42:34.401263(LocalDateTime)
2025-06-17 02:42:34.402 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:42:34.402 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 9(Integer), 53(Integer), 76(Integer), 2025-06-17T02:42:34.402262800(LocalDateTime), 2025-06-17T02:42:34.402262800(LocalDateTime)
2025-06-17 02:42:34.402 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:42:34.402 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3(String), 1(Integer), 第3章 主要应用领域(String), 了解了理论之后，让我们看看AI在现实世界中的一些强大应用，这些技术正在深刻地改变我们的生活。
## 自然语言处理 (NLP)自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。
## 3.2 计算机视觉 (CV)计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 10(Integer), 77(Integer), 97(Integer), 2025-06-17T02:42:34.402262800(LocalDateTime), 2025-06-17T02:42:34.402262800(LocalDateTime)
2025-06-17 02:42:34.403 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:42:34.403 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 11(Integer), 81(Integer), 89(Integer), 2025-06-17T02:42:34.403262100(LocalDateTime), 2025-06-17T02:42:34.403262100(LocalDateTime)
2025-06-17 02:42:34.403 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充创建时间和更新时间
2025-06-17 02:42:34.403 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.ChaptersMapper.insert - ==> Parameters: 1(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 12(Integer), 90(Integer), 97(Integer), 2025-06-17T02:42:34.403262100(LocalDateTime), 2025-06-17T02:42:34.403262100(LocalDateTime)
2025-06-17 02:42:34.414 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:42:34.414 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==>  Preparing: UPDATE chapters SET course_id=?, parent_id=?, chapter_key=?, level=?, title=?, content=?, sort_order=?, line_start=?, line_end=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:42:34.414 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 914(Integer), 1.1(String), 2(Integer), 什么是人工智能？(String), 人工智能（Artificial Intelligence），英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。
本节将探讨以下几个核心问题：
- 智能的定义是什么？
- AI的主要流派有哪些？（例如：符号主义、连接主义、行为主义）
- 强人工智能与弱人工智能的本质区别是什么？
**关键术语**: `图灵测试`, `机器学习`, `深度学习`
### 程凯(String), 2(Integer), 4(Integer), 14(Integer), 2025-06-17T02:42:34.398255700(LocalDateTime), 2025-06-17T02:42:34.398255700(LocalDateTime), 915(Long)
2025-06-17 02:42:34.415 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:42:34.415 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 915(Integer), 1.1.1(String), 3(Integer), 程凯(String), (String), 3(Integer), 13(Integer), 14(Integer), 2025-06-17T02:42:34.398393300(LocalDateTime), 2025-06-17T02:42:34.398393300(LocalDateTime), 916(Long)
2025-06-17 02:42:34.415 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:42:34.416 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 914(Integer), 1.2(String), 2(Integer), AI发展简史(String), 从艾伦·图灵的开创性工作到今天的深度学习革命，AI的发展经历了多次跌宕起伏的浪潮。了解这段历史有助于我们更好地理解当下的技术。
- **诞生期 (1956)**: 在达特茅斯会议上，\"人工智能\"被正式命名。
- **第一个黄金时代 (50年代末-70年代初)**: 主要集中在逻辑推理和搜索算法，解决了许多逻辑难题。
- **第一次AI寒冬 (70年代中-80年代初)**: 由于计算能力和数据量的瓶颈，许多宏伟的项目未能实现，导致资金撤退。
- **繁荣期 (80年代)**: 专家系统的兴起，AI在特定领域展现出商业价值。
- **第二次AI寒冬 (80年代末-90年代初)**: 专家系统构建和维护成本高昂，再次遇到瓶颈。
- **现代AI (90年代至今)**: 随着互联网的普及（大数据）、计算能力的飞跃（GPU）和算法的成熟，机器学习和深度学习引领了新一轮的AI革命。
---(String), 4(Integer), 15(Integer), 27(Integer), 2025-06-17T02:42:34.399265100(LocalDateTime), 2025-06-17T02:42:34.399265100(LocalDateTime), 917(Long)
2025-06-17 02:42:34.416 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:42:34.416 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 918(Integer), 2.1(String), 2(Integer), 机器学习基础(String), 机器学习是AI的一个核心分支，它使计算机能够从数据中“学习”而无需进行显式编程。我们将介绍最主流的学习范式。
### 监督学习在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。
### 无监督学习与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 6(Integer), 32(Integer), 52(Integer), 2025-06-17T02:42:34.400265100(LocalDateTime), 2025-06-17T02:42:34.400265100(LocalDateTime), 919(Long)
2025-06-17 02:42:34.416 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:42:34.416 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 919(Integer), 2.1.1(String), 3(Integer), 监督学习(String), 在监督学习中，我们为算法提供一组带有“正确答案”的标记数据（数据集），然后让算法从中学习一个可以预测新数据答案的模型。
常见的监督学习算法包括：
1.  **线性回归 (Linear Regression)**: 用于预测连续值，如房价。
2.  **逻辑回归 (Logistic Regression)**: 用于分类问题，如判断邮件是否为垃圾邮件。
3.  **支持向量机 (Support Vector Machine, SVM)**: 强大的分类器。(String), 7(Integer), 36(Integer), 44(Integer), 2025-06-17T02:42:34.401263(LocalDateTime), 2025-06-17T02:42:34.401263(LocalDateTime), 920(Long)
2025-06-17 02:42:34.416 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:42:34.418 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 919(Integer), 2.1.2(String), 3(Integer), 无监督学习(String), 与监督学习不同，无监督学习处理的是没有标记的数据，算法需要自己发现数据中的内在结构和模式。
主要应用场景：
- **聚类**: 将相似的数据点分组。例如，通过 `K-Means` 算法对用户进行分群。
- **降维**: 在保留重要信息的同时减少数据特征的数量。例如，使用 `主成分分析 (PCA)` 进行数据可视化。(String), 8(Integer), 45(Integer), 52(Integer), 2025-06-17T02:42:34.401263(LocalDateTime), 2025-06-17T02:42:34.401263(LocalDateTime), 921(Long)
2025-06-17 02:42:34.418 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:42:34.418 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 918(Integer), 2.2(String), 2(Integer), 神经网络与深度学习(String), 神经网络受到人脑神经元连接方式的启发，是深度学习的基础。一个深度学习模型通常由多个神经网络层堆叠而成。
下面是一个简单的代码示例，展示了如何用Python的Keras库构建一个基础的神经网络层：
```python
import tensorflow as tf
from tensorflow import keras

# 定义一个简单的序列模型
model = keras.Sequential([
    # 添加一个全连接层，有128个神经元，激活函数为ReLU
    keras.layers.Dense(128, activation='relu'),
    # 添加一个输出层，有10个神经元（对应10个分类），激活函数为Softmax
    keras.layers.Dense(10, activation='softmax')
])

# 打印模型结构
print(\"模型结构摘要:\")
model.summary()
```---(String), 9(Integer), 53(Integer), 76(Integer), 2025-06-17T02:42:34.402262800(LocalDateTime), 2025-06-17T02:42:34.402262800(LocalDateTime), 922(Long)
2025-06-17 02:42:34.418 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:42:34.419 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 923(Integer), 3.1(String), 2(Integer), 自然语言处理 (NLP)(String), 自然语言处理（NLP）是AI中专注于使计算机能够理解、解释和生成人类语言的领域。
主要应用实例：
- **机器翻译**: 例如谷歌翻译，能够实现多种语言的实时互译。
- **情感分析**: 分析社交媒体上用户评论的情感倾向（正面、负面或中性）。
- **聊天机器人**: 各类网站和App中的智能客服。(String), 11(Integer), 81(Integer), 89(Integer), 2025-06-17T02:42:34.403262100(LocalDateTime), 2025-06-17T02:42:34.403262100(LocalDateTime), 924(Long)
2025-06-17 02:42:34.419 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:42:34.419 [http-nio-8080-exec-7] DEBUG c.example.aihub.mapper.ChaptersMapper.updateById - ==> Parameters: 1(Integer), 923(Integer), 3.2(String), 2(Integer), 3.2 计算机视觉 (CV)(String), 计算机视觉（CV）旨在训练计算机来“看”和理解数字图像与视频。
主要应用实例：
- **图像识别**: 在相册中自动为照片中的人物或物体打上标签。
- **人脸识别**: 用于手机解锁、移动支付和公共安全领域的身份验证。
- **自动驾驶**: 车辆通过摄像头和传感器实时感知周围环境，做出驾驶决策。(String), 12(Integer), 90(Integer), 97(Integer), 2025-06-17T02:42:34.403262100(LocalDateTime), 2025-06-17T02:42:34.403262100(LocalDateTime), 925(Long)
2025-06-17 02:42:34.426 [http-nio-8080-exec-7] DEBUG c.e.aihub.config.MyBatisPlusMetaObjectHandler - 自动填充更新时间
2025-06-17 02:42:34.426 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==>  Preparing: UPDATE courses SET title=?, description=?, teacher_id=?, file_path=?, file_hash=?, file_updated_at=?, parse_status=?, parsed_at=?, chapter_count=?, create_time=?, update_time=? WHERE id=? AND deleted=0
2025-06-17 02:42:34.426 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - ==> Parameters: string(String), string(String), 2(Integer), courses-md/ae62a3c5-dd69-4e8e-b569-873660d997f7.md(String), 69ce1c8a8abb0842dbffb2c19de608ab34f70eb2ebb5eee4ba5f3763a28d56cf(String), 2025-06-17T02:42:34.385714700(LocalDateTime), success(String), 2025-06-17T02:42:34.425840800(LocalDateTime), 12(Integer), 2025-06-15T23:48:02(LocalDateTime), 2025-06-15T23:48:02(LocalDateTime), 1(Long)
2025-06-17 02:42:34.428 [http-nio-8080-exec-7] DEBUG com.example.aihub.mapper.CoursesMapper.updateById - <==    Updates: 1
2025-06-17 02:42:34.430 [http-nio-8080-exec-7] INFO  com.example.aihub.controller.CoursesController - 课程内容更新并重新解析成功，课程ID: 1
>>>>>>> ac6524341ebe8b9521f469469792290f7f36037d
